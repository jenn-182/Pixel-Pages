{"ast":null,"code":"import React from'react';// Helper function to insert formatting at cursor position\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export const insertFormatting=function(textarea,content,before){let after=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'';let placeholder=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'text';const start=textarea.selectionStart;const end=textarea.selectionEnd;const selectedText=content.substring(start,end);const replacement=selectedText||placeholder;const newContent=content.substring(0,start)+before+replacement+after+content.substring(end);return{newContent,newCursorPosition:start+before.length+replacement.length};};// Handle keyboard shortcuts for formatting\nexport const handleFormattingKeyDown=(e,textarea,content,onContentChange)=>{if(e.ctrlKey||e.metaKey){switch(e.key){case'b':e.preventDefault();const boldResult=insertFormatting(textarea,content,'**','**','bold text');onContentChange(boldResult.newContent);setTimeout(()=>{textarea.setSelectionRange(boldResult.newCursorPosition,boldResult.newCursorPosition);},0);break;case'i':e.preventDefault();const italicResult=insertFormatting(textarea,content,'*','*','italic text');onContentChange(italicResult.newContent);setTimeout(()=>{textarea.setSelectionRange(italicResult.newCursorPosition,italicResult.newCursorPosition);},0);break;case'u':e.preventDefault();const underlineResult=insertFormatting(textarea,content,'<u>','</u>','underlined text');onContentChange(underlineResult.newContent);setTimeout(()=>{textarea.setSelectionRange(underlineResult.newCursorPosition,underlineResult.newCursorPosition);},0);break;case'`':e.preventDefault();const codeResult=insertFormatting(textarea,content,'`','`','code');onContentChange(codeResult.newContent);setTimeout(()=>{textarea.setSelectionRange(codeResult.newCursorPosition,codeResult.newCursorPosition);},0);break;}}};// Format inline text with markdown styling\nexport const formatInlineText=text=>{if(!text)return'';let currentText=text;// Process bold text\ncurrentText=currentText.replace(/\\*\\*(.*?)\\*\\*/g,(match,content)=>{return\"BOLD_START\".concat(content,\"BOLD_END\");});// Process italic text\ncurrentText=currentText.replace(/\\*(.*?)\\*/g,(match,content)=>{return\"ITALIC_START\".concat(content,\"ITALIC_END\");});// Process underline text\ncurrentText=currentText.replace(/<u>(.*?)<\\/u>/g,(match,content)=>{return\"UNDERLINE_START\".concat(content,\"UNDERLINE_END\");});// Process code text\ncurrentText=currentText.replace(/`(.*?)`/g,(match,content)=>{return\"CODE_START\".concat(content,\"CODE_END\");});// Process highlight text\ncurrentText=currentText.replace(/==(.*?)==/g,(match,content)=>{return\"HIGHLIGHT_START\".concat(content,\"HIGHLIGHT_END\");});// Split by our markers and render\nconst segments=currentText.split(/(BOLD_START|BOLD_END|ITALIC_START|ITALIC_END|UNDERLINE_START|UNDERLINE_END|CODE_START|CODE_END|HIGHLIGHT_START|HIGHLIGHT_END)/);let isBold=false;let isItalic=false;let isUnderline=false;let isCode=false;let isHighlight=false;return segments.map((segment,index)=>{switch(segment){case'BOLD_START':isBold=true;return null;case'BOLD_END':isBold=false;return null;case'ITALIC_START':isItalic=true;return null;case'ITALIC_END':isItalic=false;return null;case'UNDERLINE_START':isUnderline=true;return null;case'UNDERLINE_END':isUnderline=false;return null;case'CODE_START':isCode=true;return null;case'CODE_END':isCode=false;return null;case'HIGHLIGHT_START':isHighlight=true;return null;case'HIGHLIGHT_END':isHighlight=false;return null;default:if(segment==='')return null;let className='';let style={};if(isBold)className+=' font-bold text-cyan-400';if(isItalic)className+=' italic text-purple-400';if(isUnderline){className+=' underline';style.textDecoration='underline';}if(isCode)className+=' bg-gray-800 text-green-400 px-2 py-1 rounded font-mono text-sm';if(isHighlight){className+=' bg-pink-300 text-black px-1 rounded';style.backgroundColor='#f9a8d4';// Light pink color\nstyle.color='#000000';}return/*#__PURE__*/_jsx(\"span\",{className:className,style:style,children:segment},index);}}).filter(Boolean);};// Format content with block-level markdown - Updated for better live rendering\nexport const formatMarkdownContent=text=>{if(!text)return'';return text.split('\\n').map((line,index)=>{// Headers\nif(line.startsWith('# ')){return/*#__PURE__*/_jsx(\"div\",{className:\"text-2xl font-bold text-cyan-400 mb-4 border-b border-cyan-400 pb-2\",children:formatInlineText(line.substring(2))},index);}if(line.startsWith('## ')){return/*#__PURE__*/_jsx(\"div\",{className:\"text-xl font-bold text-cyan-400 mb-3\",children:formatInlineText(line.substring(3))},index);}if(line.startsWith('### ')){return/*#__PURE__*/_jsx(\"div\",{className:\"text-lg font-bold text-cyan-400 mb-2\",children:formatInlineText(line.substring(4))},index);}// Lists\nif(line.startsWith('- ')||line.startsWith('* ')){return/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-start mb-1\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"text-cyan-400 mr-2 flex-shrink-0\",children:\"\\u2022\"}),/*#__PURE__*/_jsx(\"span\",{className:\"flex-1\",children:formatInlineText(line.substring(2))})]},index);}// Numbered lists\nif(/^\\d+\\.\\s/.test(line)){const match=line.match(/^(\\d+)\\.\\s(.*)$/);if(match){return/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-start mb-1\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"text-cyan-400 mr-2 flex-shrink-0\",children:[match[1],\".\"]}),/*#__PURE__*/_jsx(\"span\",{className:\"flex-1\",children:formatInlineText(match[2])})]},index);}}// Quotes\nif(line.startsWith('> ')){return/*#__PURE__*/_jsx(\"div\",{className:\"border-l-4 border-cyan-400 pl-4 italic text-gray-300 my-2\",children:formatInlineText(line.substring(2))},index);}// Empty lines\nif(line.trim()===''){return/*#__PURE__*/_jsx(\"div\",{className:\"h-6\"},index);}// Regular paragraphs\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"mb-4 leading-relaxed\",children:formatInlineText(line)},index);});};","map":{"version":3,"names":["React","jsx","_jsx","jsxs","_jsxs","insertFormatting","textarea","content","before","after","arguments","length","undefined","placeholder","start","selectionStart","end","selectionEnd","selectedText","substring","replacement","newContent","newCursorPosition","handleFormattingKeyDown","e","onContentChange","ctrlKey","metaKey","key","preventDefault","boldResult","setTimeout","setSelectionRange","italicResult","underlineResult","codeResult","formatInlineText","text","currentText","replace","match","concat","segments","split","isBold","isItalic","isUnderline","isCode","isHighlight","map","segment","index","className","style","textDecoration","backgroundColor","color","children","filter","Boolean","formatMarkdownContent","line","startsWith","test","trim"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/utils/markdownUtils.js"],"sourcesContent":["import React from 'react';\n\n// Helper function to insert formatting at cursor position\nexport const insertFormatting = (textarea, content, before, after = '', placeholder = 'text') => {\n  const start = textarea.selectionStart;\n  const end = textarea.selectionEnd;\n  const selectedText = content.substring(start, end);\n  const replacement = selectedText || placeholder;\n  \n  const newContent = \n    content.substring(0, start) + \n    before + replacement + after + \n    content.substring(end);\n  \n  return {\n    newContent,\n    newCursorPosition: start + before.length + replacement.length\n  };\n};\n\n// Handle keyboard shortcuts for formatting\nexport const handleFormattingKeyDown = (e, textarea, content, onContentChange) => {\n  if (e.ctrlKey || e.metaKey) {\n    switch (e.key) {\n      case 'b':\n        e.preventDefault();\n        const boldResult = insertFormatting(textarea, content, '**', '**', 'bold text');\n        onContentChange(boldResult.newContent);\n        setTimeout(() => {\n          textarea.setSelectionRange(boldResult.newCursorPosition, boldResult.newCursorPosition);\n        }, 0);\n        break;\n      case 'i':\n        e.preventDefault();\n        const italicResult = insertFormatting(textarea, content, '*', '*', 'italic text');\n        onContentChange(italicResult.newContent);\n        setTimeout(() => {\n          textarea.setSelectionRange(italicResult.newCursorPosition, italicResult.newCursorPosition);\n        }, 0);\n        break;\n      case 'u':\n        e.preventDefault();\n        const underlineResult = insertFormatting(textarea, content, '<u>', '</u>', 'underlined text');\n        onContentChange(underlineResult.newContent);\n        setTimeout(() => {\n          textarea.setSelectionRange(underlineResult.newCursorPosition, underlineResult.newCursorPosition);\n        }, 0);\n        break;\n      case '`':\n        e.preventDefault();\n        const codeResult = insertFormatting(textarea, content, '`', '`', 'code');\n        onContentChange(codeResult.newContent);\n        setTimeout(() => {\n          textarea.setSelectionRange(codeResult.newCursorPosition, codeResult.newCursorPosition);\n        }, 0);\n        break;\n    }\n  }\n};\n\n// Format inline text with markdown styling\nexport const formatInlineText = (text) => {\n  if (!text) return '';\n  \n  let currentText = text;\n  \n  // Process bold text\n  currentText = currentText.replace(/\\*\\*(.*?)\\*\\*/g, (match, content) => {\n    return `BOLD_START${content}BOLD_END`;\n  });\n  \n  // Process italic text\n  currentText = currentText.replace(/\\*(.*?)\\*/g, (match, content) => {\n    return `ITALIC_START${content}ITALIC_END`;\n  });\n  \n  // Process underline text\n  currentText = currentText.replace(/<u>(.*?)<\\/u>/g, (match, content) => {\n    return `UNDERLINE_START${content}UNDERLINE_END`;\n  });\n  \n  // Process code text\n  currentText = currentText.replace(/`(.*?)`/g, (match, content) => {\n    return `CODE_START${content}CODE_END`;\n  });\n  \n  // Process highlight text\n  currentText = currentText.replace(/==(.*?)==/g, (match, content) => {\n    return `HIGHLIGHT_START${content}HIGHLIGHT_END`;\n  });\n  \n  // Split by our markers and render\n  const segments = currentText.split(/(BOLD_START|BOLD_END|ITALIC_START|ITALIC_END|UNDERLINE_START|UNDERLINE_END|CODE_START|CODE_END|HIGHLIGHT_START|HIGHLIGHT_END)/);\n  \n  let isBold = false;\n  let isItalic = false;\n  let isUnderline = false;\n  let isCode = false;\n  let isHighlight = false;\n  \n  return segments.map((segment, index) => {\n    switch (segment) {\n      case 'BOLD_START':\n        isBold = true;\n        return null;\n      case 'BOLD_END':\n        isBold = false;\n        return null;\n      case 'ITALIC_START':\n        isItalic = true;\n        return null;\n      case 'ITALIC_END':\n        isItalic = false;\n        return null;\n      case 'UNDERLINE_START':\n        isUnderline = true;\n        return null;\n      case 'UNDERLINE_END':\n        isUnderline = false;\n        return null;\n      case 'CODE_START':\n        isCode = true;\n        return null;\n      case 'CODE_END':\n        isCode = false;\n        return null;\n      case 'HIGHLIGHT_START':\n        isHighlight = true;\n        return null;\n      case 'HIGHLIGHT_END':\n        isHighlight = false;\n        return null;\n      default:\n        if (segment === '') return null;\n        \n        let className = '';\n        let style = {};\n        \n        if (isBold) className += ' font-bold text-cyan-400';\n        if (isItalic) className += ' italic text-purple-400';\n        if (isUnderline) {\n          className += ' underline';\n          style.textDecoration = 'underline';\n        }\n        if (isCode) className += ' bg-gray-800 text-green-400 px-2 py-1 rounded font-mono text-sm';\n        if (isHighlight) {\n          className += ' bg-pink-300 text-black px-1 rounded';\n          style.backgroundColor = '#f9a8d4'; // Light pink color\n          style.color = '#000000';\n        }\n        \n        return (\n          <span key={index} className={className} style={style}>\n            {segment}\n          </span>\n        );\n    }\n  }).filter(Boolean);\n};\n\n// Format content with block-level markdown - Updated for better live rendering\nexport const formatMarkdownContent = (text) => {\n  if (!text) return '';\n  \n  return text.split('\\n').map((line, index) => {\n    // Headers\n    if (line.startsWith('# ')) {\n      return (\n        <div key={index} className=\"text-2xl font-bold text-cyan-400 mb-4 border-b border-cyan-400 pb-2\">\n          {formatInlineText(line.substring(2))}\n        </div>\n      );\n    }\n    if (line.startsWith('## ')) {\n      return (\n        <div key={index} className=\"text-xl font-bold text-cyan-400 mb-3\">\n          {formatInlineText(line.substring(3))}\n        </div>\n      );\n    }\n    if (line.startsWith('### ')) {\n      return (\n        <div key={index} className=\"text-lg font-bold text-cyan-400 mb-2\">\n          {formatInlineText(line.substring(4))}\n        </div>\n      );\n    }\n    \n    // Lists\n    if (line.startsWith('- ') || line.startsWith('* ')) {\n      return (\n        <div key={index} className=\"flex items-start mb-1\">\n          <span className=\"text-cyan-400 mr-2 flex-shrink-0\">•</span>\n          <span className=\"flex-1\">{formatInlineText(line.substring(2))}</span>\n        </div>\n      );\n    }\n    \n    // Numbered lists\n    if (/^\\d+\\.\\s/.test(line)) {\n      const match = line.match(/^(\\d+)\\.\\s(.*)$/);\n      if (match) {\n        return (\n          <div key={index} className=\"flex items-start mb-1\">\n            <span className=\"text-cyan-400 mr-2 flex-shrink-0\">{match[1]}.</span>\n            <span className=\"flex-1\">{formatInlineText(match[2])}</span>\n          </div>\n        );\n      }\n    }\n    \n    // Quotes\n    if (line.startsWith('> ')) {\n      return (\n        <div key={index} className=\"border-l-4 border-cyan-400 pl-4 italic text-gray-300 my-2\">\n          {formatInlineText(line.substring(2))}\n        </div>\n      );\n    }\n    \n    // Empty lines\n    if (line.trim() === '') {\n      return <div key={index} className=\"h-6\" />;\n    }\n    \n    // Regular paragraphs\n    return (\n      <div key={index} className=\"mb-4 leading-relaxed\">\n        {formatInlineText(line)}\n      </div>\n    );\n  });\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}