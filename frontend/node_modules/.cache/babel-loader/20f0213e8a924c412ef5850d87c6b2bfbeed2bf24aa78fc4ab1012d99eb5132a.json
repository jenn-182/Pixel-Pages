{"ast":null,"code":"import apiService from './api';\nimport { allAchievements } from '../data/achievements';\nclass BackendAchievementService {\n  constructor() {\n    this.allAchievements = [];\n    this.playerAchievements = [];\n    this.playerStats = {};\n    this.loaded = false;\n  }\n  getUnlockedAchievements() {\n    if (!this.loaded) {\n      console.warn('‚ö†Ô∏è Backend achievement service not loaded yet');\n      return [];\n    }\n    const unlockedIds = this.playerAchievements.filter(pa => pa.unlocked).map(pa => pa.achievementId);\n    const unlockedAchievements = this.allAchievements.filter(achievement => unlockedIds.includes(achievement.id)).map(achievement => {\n      const playerAch = this.playerAchievements.find(pa => pa.achievementId === achievement.id);\n      return {\n        ...achievement,\n        unlockedAt: (playerAch === null || playerAch === void 0 ? void 0 : playerAch.unlockedAt) || new Date().toISOString(),\n        progress: (playerAch === null || playerAch === void 0 ? void 0 : playerAch.progress) || 100\n      };\n    });\n    console.log('üîç BACKEND SERVICE getUnlockedAchievements():');\n    console.log('   - unlockedIds:', unlockedIds);\n    console.log('   - unlockedAchievements:', unlockedAchievements);\n    return unlockedAchievements;\n  }\n  getLockedAchievements() {\n    if (!this.loaded) {\n      console.warn('‚ö†Ô∏è Backend achievement service not loaded yet');\n      return [];\n    }\n    const unlockedIds = this.playerAchievements.filter(pa => pa.unlocked).map(pa => pa.achievementId);\n    return this.allAchievements.filter(achievement => !unlockedIds.includes(achievement.id));\n  }\n  getInProgressAchievements() {\n    if (!this.loaded) {\n      console.warn('‚ö†Ô∏è Backend achievement service not loaded yet');\n      return [];\n    }\n    const inProgressIds = this.playerAchievements.filter(pa => !pa.unlocked && pa.progress > 0).map(pa => pa.achievementId);\n    return this.allAchievements.filter(achievement => inProgressIds.includes(achievement.id)).map(achievement => {\n      const playerAch = this.playerAchievements.find(pa => pa.achievementId === achievement.id);\n      return {\n        ...achievement,\n        progress: (playerAch === null || playerAch === void 0 ? void 0 : playerAch.progress) || 0\n      };\n    });\n  }\n\n  // NEW: Load from localStorage if backend fails\n  loadFromLocalStorage() {\n    console.log('üîÑ LOADING FROM LOCALSTORAGE');\n\n    // Use local achievements data\n    this.allAchievements = allAchievements;\n\n    // Load unlocked achievements from localStorage and filter out nulls\n    const unlockedIds = JSON.parse(localStorage.getItem('unlockedAchievements') || '[]').filter(id => id !== null && id !== undefined); // Filter out null values\n\n    const achievementData = JSON.parse(localStorage.getItem('achievementData') || '{}');\n    console.log('üì¶ LocalStorage data:', {\n      unlockedIds,\n      achievementData\n    });\n\n    // Convert to player achievement format\n    this.playerAchievements = unlockedIds.map(achievementId => {\n      var _achievementData$achi;\n      return {\n        achievementId,\n        unlocked: true,\n        progress: 100,\n        unlockedAt: ((_achievementData$achi = achievementData[achievementId]) === null || _achievementData$achi === void 0 ? void 0 : _achievementData$achi.unlockedAt) || new Date().toISOString()\n      };\n    });\n\n    // Mock player stats\n    this.playerStats = {\n      totalNotes: 0,\n      totalWords: 0,\n      completedAchievements: unlockedIds.length,\n      totalSessions: 0,\n      totalFocusTime: 0,\n      totalXp: unlockedIds.length * 100 // 100 XP per achievement\n    };\n    this.loaded = true;\n    console.log('‚úÖ Loaded from localStorage:', {\n      allAchievements: this.allAchievements.length,\n      playerAchievements: this.playerAchievements.length,\n      unlockedCount: unlockedIds.length\n    });\n  }\n  async loadData(username = 'Jroc_182') {\n    try {\n      console.log('üîÑ BACKEND SERVICE: Loading data for', username);\n      const [achievements, playerAchievements, stats] = await Promise.all([apiService.getAllAchievements(), apiService.getPlayerAchievements(username), apiService.getAchievementPlayerStats(username)]);\n      console.log('üîç BACKEND SERVICE: Raw data loaded:');\n      console.log('   - achievements:', (achievements === null || achievements === void 0 ? void 0 : achievements.length) || 0);\n      console.log('   - playerAchievements:', (playerAchievements === null || playerAchievements === void 0 ? void 0 : playerAchievements.length) || 0);\n      console.log('   - stats:', stats);\n      this.allAchievements = achievements;\n      this.playerAchievements = playerAchievements;\n      this.playerStats = stats;\n      this.loaded = true;\n      console.log('‚úÖ Backend achievement data loaded for', username);\n      return {\n        achievements,\n        playerAchievements,\n        stats\n      };\n    } catch (error) {\n      console.error('‚ùå Failed to load backend achievements:', error);\n\n      // üîÑ FALLBACK: Load from localStorage\n      console.log('üîÑ BACKEND FAILED: Loading from localStorage');\n      this.loadFromLocalStorage();\n      return {\n        achievements: this.allAchievements,\n        playerAchievements: this.playerAchievements,\n        stats: this.playerStats\n      };\n    }\n  }\n  isUnlocked(achievementId) {\n    if (!this.loaded) return false;\n    const playerAch = this.playerAchievements.find(pa => pa.achievementId === achievementId);\n    return (playerAch === null || playerAch === void 0 ? void 0 : playerAch.unlocked) || false;\n  }\n  unlockAchievement(achievementId) {\n    // Find or create player achievement\n    let playerAch = this.playerAchievements.find(pa => pa.achievementId === achievementId);\n    if (!playerAch) {\n      playerAch = {\n        achievementId,\n        progress: 100,\n        unlocked: true,\n        unlockedAt: new Date().toISOString()\n      };\n      this.playerAchievements.push(playerAch);\n    } else {\n      playerAch.unlocked = true;\n      playerAch.progress = 100;\n      playerAch.unlockedAt = new Date().toISOString();\n    }\n    console.log(`üèÜ Unlocked achievement: ${achievementId}`);\n  }\n  getStats() {\n    if (!this.loaded) {\n      return {\n        total: 0,\n        unlocked: 0,\n        locked: 0,\n        inProgress: 0,\n        completionRate: 0\n      };\n    }\n    const unlockedCount = this.getUnlockedAchievements().length;\n    const totalCount = this.allAchievements.length;\n    const inProgressCount = this.getInProgressAchievements().length;\n    const lockedCount = totalCount - unlockedCount;\n    return {\n      total: totalCount,\n      unlocked: unlockedCount,\n      locked: lockedCount,\n      inProgress: inProgressCount,\n      completionRate: totalCount > 0 ? Math.round(unlockedCount / totalCount * 100) : 0\n    };\n  }\n}\n\n// Export singleton instance\nconst backendAchievementService = new BackendAchievementService();\nexport default backendAchievementService;","map":{"version":3,"names":["apiService","allAchievements","BackendAchievementService","constructor","playerAchievements","playerStats","loaded","getUnlockedAchievements","console","warn","unlockedIds","filter","pa","unlocked","map","achievementId","unlockedAchievements","achievement","includes","id","playerAch","find","unlockedAt","Date","toISOString","progress","log","getLockedAchievements","getInProgressAchievements","inProgressIds","loadFromLocalStorage","JSON","parse","localStorage","getItem","undefined","achievementData","_achievementData$achi","totalNotes","totalWords","completedAchievements","length","totalSessions","totalFocusTime","totalXp","unlockedCount","loadData","username","achievements","stats","Promise","all","getAllAchievements","getPlayerAchievements","getAchievementPlayerStats","error","isUnlocked","unlockAchievement","push","getStats","total","locked","inProgress","completionRate","totalCount","inProgressCount","lockedCount","Math","round","backendAchievementService"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/services/backendAchievementService.js"],"sourcesContent":["import apiService from './api';\nimport { allAchievements } from '../data/achievements';\n\nclass BackendAchievementService {\n  constructor() {\n    this.allAchievements = [];\n    this.playerAchievements = [];\n    this.playerStats = {};\n    this.loaded = false;\n  }\n\n  getUnlockedAchievements() {\n    if (!this.loaded) {\n      console.warn('‚ö†Ô∏è Backend achievement service not loaded yet');\n      return [];\n    }\n    \n    const unlockedIds = this.playerAchievements\n      .filter(pa => pa.unlocked)\n      .map(pa => pa.achievementId);\n    \n    const unlockedAchievements = this.allAchievements\n      .filter(achievement => unlockedIds.includes(achievement.id))\n      .map(achievement => {\n        const playerAch = this.playerAchievements.find(pa => pa.achievementId === achievement.id);\n        return {\n          ...achievement,\n          unlockedAt: playerAch?.unlockedAt || new Date().toISOString(),\n          progress: playerAch?.progress || 100\n        };\n      });\n    \n    console.log('üîç BACKEND SERVICE getUnlockedAchievements():');\n    console.log('   - unlockedIds:', unlockedIds);\n    console.log('   - unlockedAchievements:', unlockedAchievements);\n    \n    return unlockedAchievements;\n  }\n\n  getLockedAchievements() {\n    if (!this.loaded) {\n      console.warn('‚ö†Ô∏è Backend achievement service not loaded yet');\n      return [];\n    }\n    \n    const unlockedIds = this.playerAchievements\n      .filter(pa => pa.unlocked)\n      .map(pa => pa.achievementId);\n    \n    return this.allAchievements.filter(achievement => !unlockedIds.includes(achievement.id));\n  }\n\n  getInProgressAchievements() {\n    if (!this.loaded) {\n      console.warn('‚ö†Ô∏è Backend achievement service not loaded yet');\n      return [];\n    }\n    \n    const inProgressIds = this.playerAchievements\n      .filter(pa => !pa.unlocked && pa.progress > 0)\n      .map(pa => pa.achievementId);\n    \n    return this.allAchievements\n      .filter(achievement => inProgressIds.includes(achievement.id))\n      .map(achievement => {\n        const playerAch = this.playerAchievements.find(pa => pa.achievementId === achievement.id);\n        return {\n          ...achievement,\n          progress: playerAch?.progress || 0\n        };\n      });\n  }\n\n  // NEW: Load from localStorage if backend fails\n  loadFromLocalStorage() {\n    console.log('üîÑ LOADING FROM LOCALSTORAGE');\n    \n    // Use local achievements data\n    this.allAchievements = allAchievements;\n    \n    // Load unlocked achievements from localStorage and filter out nulls\n    const unlockedIds = JSON.parse(localStorage.getItem('unlockedAchievements') || '[]')\n      .filter(id => id !== null && id !== undefined); // Filter out null values\n    \n    const achievementData = JSON.parse(localStorage.getItem('achievementData') || '{}');\n    \n    console.log('üì¶ LocalStorage data:', { unlockedIds, achievementData });\n    \n    // Convert to player achievement format\n    this.playerAchievements = unlockedIds.map(achievementId => ({\n      achievementId,\n      unlocked: true,\n      progress: 100,\n      unlockedAt: achievementData[achievementId]?.unlockedAt || new Date().toISOString()\n    }));\n    \n    // Mock player stats\n    this.playerStats = {\n      totalNotes: 0,\n      totalWords: 0,\n      completedAchievements: unlockedIds.length,\n      totalSessions: 0,\n      totalFocusTime: 0,\n      totalXp: unlockedIds.length * 100 // 100 XP per achievement\n    };\n    \n    this.loaded = true;\n    \n    console.log('‚úÖ Loaded from localStorage:', {\n      allAchievements: this.allAchievements.length,\n      playerAchievements: this.playerAchievements.length,\n      unlockedCount: unlockedIds.length\n    });\n  }\n\n  async loadData(username = 'Jroc_182') {\n    try {\n      console.log('üîÑ BACKEND SERVICE: Loading data for', username);\n      \n      const [achievements, playerAchievements, stats] = await Promise.all([\n        apiService.getAllAchievements(),\n        apiService.getPlayerAchievements(username),\n        apiService.getAchievementPlayerStats(username)\n      ]);\n\n      console.log('üîç BACKEND SERVICE: Raw data loaded:');\n      console.log('   - achievements:', achievements?.length || 0);\n      console.log('   - playerAchievements:', playerAchievements?.length || 0);\n      console.log('   - stats:', stats);\n\n      this.allAchievements = achievements;\n      this.playerAchievements = playerAchievements;\n      this.playerStats = stats;\n      this.loaded = true;\n\n      console.log('‚úÖ Backend achievement data loaded for', username);\n\n      return { achievements, playerAchievements, stats };\n    } catch (error) {\n      console.error('‚ùå Failed to load backend achievements:', error);\n      \n      // üîÑ FALLBACK: Load from localStorage\n      console.log('üîÑ BACKEND FAILED: Loading from localStorage');\n      this.loadFromLocalStorage();\n      \n      return {\n        achievements: this.allAchievements,\n        playerAchievements: this.playerAchievements,\n        stats: this.playerStats\n      };\n    }\n  }\n\n  isUnlocked(achievementId) {\n    if (!this.loaded) return false;\n    \n    const playerAch = this.playerAchievements.find(pa => pa.achievementId === achievementId);\n    return playerAch?.unlocked || false;\n  }\n\n  unlockAchievement(achievementId) {\n    // Find or create player achievement\n    let playerAch = this.playerAchievements.find(pa => pa.achievementId === achievementId);\n    \n    if (!playerAch) {\n      playerAch = {\n        achievementId,\n        progress: 100,\n        unlocked: true,\n        unlockedAt: new Date().toISOString()\n      };\n      this.playerAchievements.push(playerAch);\n    } else {\n      playerAch.unlocked = true;\n      playerAch.progress = 100;\n      playerAch.unlockedAt = new Date().toISOString();\n    }\n    \n    console.log(`üèÜ Unlocked achievement: ${achievementId}`);\n  }\n\n  getStats() {\n    if (!this.loaded) {\n      return {\n        total: 0,\n        unlocked: 0,\n        locked: 0,\n        inProgress: 0,\n        completionRate: 0\n      };\n    }\n\n    const unlockedCount = this.getUnlockedAchievements().length;\n    const totalCount = this.allAchievements.length;\n    const inProgressCount = this.getInProgressAchievements().length;\n    const lockedCount = totalCount - unlockedCount;\n\n    return {\n      total: totalCount,\n      unlocked: unlockedCount,\n      locked: lockedCount,\n      inProgress: inProgressCount,\n      completionRate: totalCount > 0 ? Math.round((unlockedCount / totalCount) * 100) : 0\n    };\n  }\n}\n\n// Export singleton instance\nconst backendAchievementService = new BackendAchievementService();\nexport default backendAchievementService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}