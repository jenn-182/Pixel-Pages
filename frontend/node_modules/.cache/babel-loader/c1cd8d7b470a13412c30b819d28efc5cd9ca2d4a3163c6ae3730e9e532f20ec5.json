{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nexport const useFocusTimer = username => {\n  _s();\n  // Timer state\n  const [duration, setDuration] = useState(null); // 25, 90, or custom minutes\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [totalTimeSpent, setTotalTimeSpent] = useState(0);\n\n  // UI state\n  const [showSavePrompt, setShowSavePrompt] = useState(false);\n  const [sessionData, setSessionData] = useState(null);\n  const intervalRef = useRef(null);\n\n  // Timer logic\n  useEffect(() => {\n    if (isRunning && !isPaused && timeRemaining > 0) {\n      intervalRef.current = setInterval(() => {\n        setTimeRemaining(prev => {\n          if (prev <= 1) {\n            // Timer completed naturally\n            handleTimerComplete();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else {\n      clearInterval(intervalRef.current);\n    }\n    return () => clearInterval(intervalRef.current);\n  }, [isRunning, isPaused, timeRemaining]);\n\n  // Start timer with duration\n  const startTimer = minutes => {\n    console.log(`🎮 Starting ${minutes}-minute focus session`);\n    const seconds = minutes * 60;\n    setDuration(minutes);\n    setTimeRemaining(seconds);\n    setStartTime(new Date());\n    setIsRunning(true);\n    setIsPaused(false);\n    setTotalTimeSpent(0);\n\n    // Create session data for potential saving\n    const sessionId = Date.now();\n    setSessionData({\n      sessionId,\n      ownerUsername: username,\n      startTime: new Date(),\n      duration: minutes\n    });\n  };\n\n  // Pause timer\n  const pauseTimer = () => {\n    console.log('⏸️ Timer paused');\n    setIsPaused(true);\n  };\n\n  // Resume timer\n  const resumeTimer = () => {\n    console.log('▶️ Timer resumed');\n    setIsPaused(false);\n  };\n\n  // Stop timer manually\n  const stopTimer = () => {\n    console.log('🛑 Timer stopped manually');\n    handleTimerStop();\n  };\n\n  // Handle manual stop\n  const handleTimerStop = () => {\n    setIsRunning(false);\n    setIsPaused(false);\n\n    // Calculate time spent\n    const timeSpentMinutes = Math.ceil((duration * 60 - timeRemaining) / 60);\n    if (timeSpentMinutes > 0) {\n      // Show save prompt for partial time\n      const updatedSessionData = {\n        ...sessionData,\n        endTime: new Date(),\n        timeSpent: timeSpentMinutes,\n        completed: false,\n        notes: `Session stopped manually after ${timeSpentMinutes} minutes`\n      };\n      setSessionData(updatedSessionData);\n      setTotalTimeSpent(timeSpentMinutes);\n      setShowSavePrompt(true);\n    } else {\n      // No time to save\n      resetTimer();\n    }\n  };\n\n  // Handle natural completion\n  const handleTimerComplete = () => {\n    console.log('✅ Timer completed naturally');\n    setIsRunning(false);\n    setIsPaused(false);\n    const updatedSessionData = {\n      ...sessionData,\n      endTime: new Date(),\n      timeSpent: duration,\n      completed: true,\n      notes: `Completed ${duration}-minute focus session`\n    };\n    setSessionData(updatedSessionData);\n    setTotalTimeSpent(duration);\n    setShowSavePrompt(true);\n  };\n\n  // Save session to tracker - simplified API call\n  const saveSession = async category => {\n    try {\n      console.log(`💾 Saving ${totalTimeSpent} minutes to category: ${category}`);\n      const entryData = {\n        sessionId: sessionData.sessionId,\n        ownerUsername: username,\n        timeSpent: totalTimeSpent,\n        date: new Date().toISOString().split('T')[0],\n        startTime: sessionData.startTime.toISOString(),\n        endTime: sessionData.endTime.toISOString(),\n        completed: sessionData.completed,\n        notes: sessionData.notes,\n        category: category,\n        phase: 'work',\n        cycleNumber: 1,\n        isManualEntry: false\n      };\n\n      // Direct API call\n      const response = await fetch('http://localhost:8080/api/focus/entries', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(entryData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to save entry');\n      }\n      console.log('✅ Session saved successfully');\n\n      // Show success message\n      alert(`🎮 +${totalTimeSpent} XP added to ${category}!`);\n      resetTimer();\n    } catch (error) {\n      console.error('❌ Error saving session:', error);\n      alert('Failed to save session. Please try again.');\n    }\n  };\n\n  // Discard session\n  const discardSession = () => {\n    console.log('🗑️ Session discarded');\n    resetTimer();\n  };\n\n  // Reset timer state\n  const resetTimer = () => {\n    setDuration(null);\n    setTimeRemaining(0);\n    setIsRunning(false);\n    setIsPaused(false);\n    setStartTime(null);\n    setTotalTimeSpent(0);\n    setSessionData(null);\n    setShowSavePrompt(false);\n    clearInterval(intervalRef.current);\n  };\n\n  // Format time display\n  const formatTime = () => {\n    const minutes = Math.floor(timeRemaining / 60);\n    const seconds = timeRemaining % 60;\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  // Calculate progress percentage\n  const progress = duration && timeRemaining >= 0 ? (duration * 60 - timeRemaining) / (duration * 60) * 100 : 0;\n\n  // Check if timer is active (running or paused)\n  const isActive = duration !== null;\n  return {\n    // Timer state\n    duration,\n    timeRemaining,\n    isRunning,\n    isPaused,\n    isActive,\n    totalTimeSpent,\n    progress,\n    // UI state\n    showSavePrompt,\n    sessionData,\n    // Actions\n    startTimer,\n    pauseTimer,\n    resumeTimer,\n    stopTimer,\n    saveSession,\n    discardSession,\n    resetTimer,\n    formatTime,\n    // Cleanup\n    setShowSavePrompt\n  };\n};\n_s(useFocusTimer, \"GQgeK7KzTWYgh5fWPEzRBAp0yS4=\");","map":{"version":3,"names":["useState","useEffect","useRef","useFocusTimer","username","_s","duration","setDuration","timeRemaining","setTimeRemaining","isRunning","setIsRunning","isPaused","setIsPaused","startTime","setStartTime","totalTimeSpent","setTotalTimeSpent","showSavePrompt","setShowSavePrompt","sessionData","setSessionData","intervalRef","current","setInterval","prev","handleTimerComplete","clearInterval","startTimer","minutes","console","log","seconds","Date","sessionId","now","ownerUsername","pauseTimer","resumeTimer","stopTimer","handleTimerStop","timeSpentMinutes","Math","ceil","updatedSessionData","endTime","timeSpent","completed","notes","resetTimer","saveSession","category","entryData","date","toISOString","split","phase","cycleNumber","isManualEntry","response","fetch","method","headers","body","JSON","stringify","ok","Error","alert","error","discardSession","formatTime","floor","toString","padStart","progress","isActive"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/useFocusTimer.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nexport const useFocusTimer = (username) => {\n  // Timer state\n  const [duration, setDuration] = useState(null); // 25, 90, or custom minutes\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [totalTimeSpent, setTotalTimeSpent] = useState(0);\n  \n  // UI state\n  const [showSavePrompt, setShowSavePrompt] = useState(false);\n  const [sessionData, setSessionData] = useState(null);\n  \n  const intervalRef = useRef(null);\n\n  // Timer logic\n  useEffect(() => {\n    if (isRunning && !isPaused && timeRemaining > 0) {\n      intervalRef.current = setInterval(() => {\n        setTimeRemaining(prev => {\n          if (prev <= 1) {\n            // Timer completed naturally\n            handleTimerComplete();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else {\n      clearInterval(intervalRef.current);\n    }\n\n    return () => clearInterval(intervalRef.current);\n  }, [isRunning, isPaused, timeRemaining]);\n\n  // Start timer with duration\n  const startTimer = (minutes) => {\n    console.log(`🎮 Starting ${minutes}-minute focus session`);\n    \n    const seconds = minutes * 60;\n    setDuration(minutes);\n    setTimeRemaining(seconds);\n    setStartTime(new Date());\n    setIsRunning(true);\n    setIsPaused(false);\n    setTotalTimeSpent(0);\n    \n    // Create session data for potential saving\n    const sessionId = Date.now();\n    setSessionData({\n      sessionId,\n      ownerUsername: username,\n      startTime: new Date(),\n      duration: minutes\n    });\n  };\n\n  // Pause timer\n  const pauseTimer = () => {\n    console.log('⏸️ Timer paused');\n    setIsPaused(true);\n  };\n\n  // Resume timer\n  const resumeTimer = () => {\n    console.log('▶️ Timer resumed');\n    setIsPaused(false);\n  };\n\n  // Stop timer manually\n  const stopTimer = () => {\n    console.log('🛑 Timer stopped manually');\n    handleTimerStop();\n  };\n\n  // Handle manual stop\n  const handleTimerStop = () => {\n    setIsRunning(false);\n    setIsPaused(false);\n    \n    // Calculate time spent\n    const timeSpentMinutes = Math.ceil((duration * 60 - timeRemaining) / 60);\n    \n    if (timeSpentMinutes > 0) {\n      // Show save prompt for partial time\n      const updatedSessionData = {\n        ...sessionData,\n        endTime: new Date(),\n        timeSpent: timeSpentMinutes,\n        completed: false,\n        notes: `Session stopped manually after ${timeSpentMinutes} minutes`\n      };\n      \n      setSessionData(updatedSessionData);\n      setTotalTimeSpent(timeSpentMinutes);\n      setShowSavePrompt(true);\n    } else {\n      // No time to save\n      resetTimer();\n    }\n  };\n\n  // Handle natural completion\n  const handleTimerComplete = () => {\n    console.log('✅ Timer completed naturally');\n    setIsRunning(false);\n    setIsPaused(false);\n    \n    const updatedSessionData = {\n      ...sessionData,\n      endTime: new Date(),\n      timeSpent: duration,\n      completed: true,\n      notes: `Completed ${duration}-minute focus session`\n    };\n    \n    setSessionData(updatedSessionData);\n    setTotalTimeSpent(duration);\n    setShowSavePrompt(true);\n  };\n\n  // Save session to tracker - simplified API call\n  const saveSession = async (category) => {\n    try {\n      console.log(`💾 Saving ${totalTimeSpent} minutes to category: ${category}`);\n      \n      const entryData = {\n        sessionId: sessionData.sessionId,\n        ownerUsername: username,\n        timeSpent: totalTimeSpent,\n        date: new Date().toISOString().split('T')[0],\n        startTime: sessionData.startTime.toISOString(),\n        endTime: sessionData.endTime.toISOString(),\n        completed: sessionData.completed,\n        notes: sessionData.notes,\n        category: category,\n        phase: 'work',\n        cycleNumber: 1,\n        isManualEntry: false\n      };\n\n      // Direct API call\n      const response = await fetch('http://localhost:8080/api/focus/entries', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(entryData)\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to save entry');\n      }\n\n      console.log('✅ Session saved successfully');\n      \n      // Show success message\n      alert(`🎮 +${totalTimeSpent} XP added to ${category}!`);\n      \n      resetTimer();\n      \n    } catch (error) {\n      console.error('❌ Error saving session:', error);\n      alert('Failed to save session. Please try again.');\n    }\n  };\n\n  // Discard session\n  const discardSession = () => {\n    console.log('🗑️ Session discarded');\n    resetTimer();\n  };\n\n  // Reset timer state\n  const resetTimer = () => {\n    setDuration(null);\n    setTimeRemaining(0);\n    setIsRunning(false);\n    setIsPaused(false);\n    setStartTime(null);\n    setTotalTimeSpent(0);\n    setSessionData(null);\n    setShowSavePrompt(false);\n    clearInterval(intervalRef.current);\n  };\n\n  // Format time display\n  const formatTime = () => {\n    const minutes = Math.floor(timeRemaining / 60);\n    const seconds = timeRemaining % 60;\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  // Calculate progress percentage\n  const progress = duration && timeRemaining >= 0 ? \n    ((duration * 60 - timeRemaining) / (duration * 60)) * 100 : 0;\n\n  // Check if timer is active (running or paused)\n  const isActive = duration !== null;\n\n  return {\n    // Timer state\n    duration,\n    timeRemaining,\n    isRunning,\n    isPaused,\n    isActive,\n    totalTimeSpent,\n    progress,\n    \n    // UI state\n    showSavePrompt,\n    sessionData,\n    \n    // Actions\n    startTimer,\n    pauseTimer,\n    resumeTimer,\n    stopTimer,\n    saveSession,\n    discardSession,\n    resetTimer,\n    formatTime,\n    \n    // Cleanup\n    setShowSavePrompt\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}