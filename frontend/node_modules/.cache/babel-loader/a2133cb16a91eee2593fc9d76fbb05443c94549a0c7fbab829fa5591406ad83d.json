{"ast":null,"code":"import{useState,useEffect}from'react';const useTaskLists=()=>{const[taskLists,setTaskLists]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const API_BASE='http://localhost:8080/api/task-lists';// Fetch all task lists\nconst fetchTaskLists=async()=>{try{setLoading(true);const response=await fetch(\"\".concat(API_BASE,\"?username=user\"));if(!response.ok){throw new Error('Failed to fetch task lists');}const data=await response.json();setTaskLists(data);setError(null);}catch(err){console.error('Failed to fetch task lists:',err);setError(err.message);// set some mock data here\nsetTaskLists([]);}finally{setLoading(false);}};// Create new task list\nconst createTaskList=async taskListData=>{try{const response=await fetch(\"\".concat(API_BASE,\"?username=user\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(taskListData)});if(!response.ok){throw new Error('Failed to create task list');}const newTaskList=await response.json();setTaskLists(prevLists=>[...prevLists,newTaskList]);return newTaskList;}catch(err){console.error('Failed to create task list:',err);throw err;}};// Update task list\nconst updateTaskList=async(taskListId,updates)=>{try{const response=await fetch(\"\".concat(API_BASE,\"/\").concat(taskListId,\"?username=user\"),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(updates)});if(!response.ok){throw new Error('Failed to update task list');}const updatedTaskList=await response.json();setTaskLists(prevLists=>prevLists.map(list=>list.id===taskListId?updatedTaskList:list));return updatedTaskList;}catch(err){console.error('Failed to update task list:',err);throw err;}};// Delete task list\nconst deleteTaskList=async taskListId=>{try{const response=await fetch(\"\".concat(API_BASE,\"/\").concat(taskListId,\"?username=user\"),{method:'DELETE'});if(!response.ok){throw new Error('Failed to delete task list');}setTaskLists(prevLists=>prevLists.filter(list=>list.id!==taskListId));}catch(err){console.error('Failed to delete task list:',err);throw err;}};// Get task list by ID\nconst getTaskListById=taskListId=>{return taskLists.find(list=>list.id===taskListId);};// Fetch data on mount\nuseEffect(()=>{fetchTaskLists();},[]);return{taskLists,loading,error,createTaskList,updateTaskList,deleteTaskList,getTaskListById,fetchTaskLists,refetch:fetchTaskLists};};export default useTaskLists;","map":{"version":3,"names":["useState","useEffect","useTaskLists","taskLists","setTaskLists","loading","setLoading","error","setError","API_BASE","fetchTaskLists","response","fetch","concat","ok","Error","data","json","err","console","message","createTaskList","taskListData","method","headers","body","JSON","stringify","newTaskList","prevLists","updateTaskList","taskListId","updates","updatedTaskList","map","list","id","deleteTaskList","filter","getTaskListById","find","refetch"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/useTaskLists.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useTaskLists = () => {\n  const [taskLists, setTaskLists] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const API_BASE = 'http://localhost:8080/api/task-lists';\n\n  // Fetch all task lists\n  const fetchTaskLists = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_BASE}?username=user`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch task lists');\n      }\n      \n      const data = await response.json();\n      setTaskLists(data);\n      setError(null);\n    } catch (err) {\n      console.error('Failed to fetch task lists:', err);\n      setError(err.message);\n      // set some mock data here\n      setTaskLists([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Create new task list\n  const createTaskList = async (taskListData) => {\n    try {\n      const response = await fetch(`${API_BASE}?username=user`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(taskListData),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create task list');\n      }\n\n      const newTaskList = await response.json();\n      setTaskLists(prevLists => [...prevLists, newTaskList]);\n      return newTaskList;\n    } catch (err) {\n      console.error('Failed to create task list:', err);\n      throw err;\n    }\n  };\n\n  // Update task list\n  const updateTaskList = async (taskListId, updates) => {\n    try {\n      const response = await fetch(`${API_BASE}/${taskListId}?username=user`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updates),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update task list');\n      }\n\n      const updatedTaskList = await response.json();\n      setTaskLists(prevLists =>\n        prevLists.map(list =>\n          list.id === taskListId ? updatedTaskList : list\n        )\n      );\n      return updatedTaskList;\n    } catch (err) {\n      console.error('Failed to update task list:', err);\n      throw err;\n    }\n  };\n\n  // Delete task list\n  const deleteTaskList = async (taskListId) => {\n    try {\n      const response = await fetch(`${API_BASE}/${taskListId}?username=user`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to delete task list');\n      }\n\n      setTaskLists(prevLists => prevLists.filter(list => list.id !== taskListId));\n    } catch (err) {\n      console.error('Failed to delete task list:', err);\n      throw err;\n    }\n  };\n\n  // Get task list by ID\n  const getTaskListById = (taskListId) => {\n    return taskLists.find(list => list.id === taskListId);\n  };\n\n  // Fetch data on mount\n  useEffect(() => {\n    fetchTaskLists();\n  }, []);\n\n  return {\n    taskLists,\n    loading,\n    error,\n    createTaskList,\n    updateTaskList,\n    deleteTaskList,\n    getTaskListById,\n    fetchTaskLists,\n    refetch: fetchTaskLists\n  };\n};\n\nexport default useTaskLists;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}