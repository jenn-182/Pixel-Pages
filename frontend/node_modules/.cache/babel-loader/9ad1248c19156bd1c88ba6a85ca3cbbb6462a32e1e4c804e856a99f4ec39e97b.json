{"ast":null,"code":"// DEPRECATED - This service is being migrated to backend-only storage\n// Use backendAchievementService instead\nimport backendAchievementService from './backendAchievementService';\nconsole.warn('⚠️ achievementService is deprecated - use backendAchievementService instead');\nclass AchievementService {\n  constructor() {\n    console.warn('⚠️ This service is deprecated. Use backendAchievementService for all achievement operations.');\n    this.listeners = [];\n  }\n\n  // Redirect all methods to backend service\n  async loadUnlockedAchievements() {\n    console.warn('⚠️ Use backendAchievementService.loadData() instead');\n    return [];\n  }\n  isUnlocked(achievementId) {\n    console.warn('⚠️ Use backendAchievementService.isUnlocked() instead');\n    return backendAchievementService.isUnlocked(achievementId);\n  }\n  getUnlockedAchievements() {\n    console.warn('⚠️ Use backendAchievementService.getUnlockedAchievements() instead');\n    return backendAchievementService.getUnlockedAchievements();\n  }\n  async unlockAchievement(achievementId) {\n    console.warn('⚠️ Use backendAchievementService.unlockAchievement() instead');\n    return false;\n  }\n  getStats() {\n    console.warn('⚠️ Use backendAchievementService.getStats() instead');\n    return backendAchievementService.getStats();\n  }\n  resetAchievements() {\n    console.warn('⚠️ Use backendAchievementService.resetAchievements() instead');\n  }\n\n  // Stub methods for backward compatibility\n  checkAchievements() {\n    console.warn('⚠️ Use backendAchievementService.recalculateAchievements() instead');\n    return [];\n  }\n  async getCurrentUserStats() {\n    console.warn('⚠️ User stats now come from backend');\n    return {};\n  }\n  async recalculateAchievements() {\n    console.warn('⚠️ Use backendAchievementService.recalculateAchievements() instead');\n    return [];\n  }\n  cleanupLocalStorage() {\n    console.warn('⚠️ No longer needed - achievements are in backend database');\n  }\n  forceUnlock() {\n    console.warn('⚠️ Use backendAchievementService.unlockAchievement() instead');\n  }\n\n  // Event listeners for backward compatibility\n  addEventListener(callback) {\n    this.listeners.push(callback);\n  }\n  removeEventListener(callback) {\n    this.listeners = this.listeners.filter(listener => listener !== callback);\n  }\n  notifyListeners(achievement) {\n    this.listeners.forEach(callback => callback(achievement));\n  }\n}\n\n// Export singleton instance\nconst achievementService = new AchievementService();\nexport default achievementService;","map":{"version":3,"names":["backendAchievementService","console","warn","AchievementService","constructor","listeners","loadUnlockedAchievements","isUnlocked","achievementId","getUnlockedAchievements","unlockAchievement","getStats","resetAchievements","checkAchievements","getCurrentUserStats","recalculateAchievements","cleanupLocalStorage","forceUnlock","addEventListener","callback","push","removeEventListener","filter","listener","notifyListeners","achievement","forEach","achievementService"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/services/achievementService.js"],"sourcesContent":["// DEPRECATED - This service is being migrated to backend-only storage\n// Use backendAchievementService instead\nimport backendAchievementService from './backendAchievementService';\n\nconsole.warn('⚠️ achievementService is deprecated - use backendAchievementService instead');\n\nclass AchievementService {\n  constructor() {\n    console.warn('⚠️ This service is deprecated. Use backendAchievementService for all achievement operations.');\n    this.listeners = [];\n  }\n\n  // Redirect all methods to backend service\n  async loadUnlockedAchievements() {\n    console.warn('⚠️ Use backendAchievementService.loadData() instead');\n    return [];\n  }\n\n  isUnlocked(achievementId) {\n    console.warn('⚠️ Use backendAchievementService.isUnlocked() instead');\n    return backendAchievementService.isUnlocked(achievementId);\n  }\n\n  getUnlockedAchievements() {\n    console.warn('⚠️ Use backendAchievementService.getUnlockedAchievements() instead');\n    return backendAchievementService.getUnlockedAchievements();\n  }\n\n  async unlockAchievement(achievementId) {\n    console.warn('⚠️ Use backendAchievementService.unlockAchievement() instead');\n    return false;\n  }\n\n  getStats() {\n    console.warn('⚠️ Use backendAchievementService.getStats() instead');\n    return backendAchievementService.getStats();\n  }\n\n  resetAchievements() {\n    console.warn('⚠️ Use backendAchievementService.resetAchievements() instead');\n  }\n\n  // Stub methods for backward compatibility\n  checkAchievements() {\n    console.warn('⚠️ Use backendAchievementService.recalculateAchievements() instead');\n    return [];\n  }\n\n  async getCurrentUserStats() {\n    console.warn('⚠️ User stats now come from backend');\n    return {};\n  }\n\n  async recalculateAchievements() {\n    console.warn('⚠️ Use backendAchievementService.recalculateAchievements() instead');\n    return [];\n  }\n\n  cleanupLocalStorage() {\n    console.warn('⚠️ No longer needed - achievements are in backend database');\n  }\n\n  forceUnlock() {\n    console.warn('⚠️ Use backendAchievementService.unlockAchievement() instead');\n  }\n\n  // Event listeners for backward compatibility\n  addEventListener(callback) {\n    this.listeners.push(callback);\n  }\n\n  removeEventListener(callback) {\n    this.listeners = this.listeners.filter(listener => listener !== callback);\n  }\n\n  notifyListeners(achievement) {\n    this.listeners.forEach(callback => callback(achievement));\n  }\n}\n\n// Export singleton instance\nconst achievementService = new AchievementService();\nexport default achievementService;\n"],"mappings":"AAAA;AACA;AACA,OAAOA,yBAAyB,MAAM,6BAA6B;AAEnEC,OAAO,CAACC,IAAI,CAAC,6EAA6E,CAAC;AAE3F,MAAMC,kBAAkB,CAAC;EACvBC,WAAWA,CAAA,EAAG;IACZH,OAAO,CAACC,IAAI,CAAC,8FAA8F,CAAC;IAC5G,IAAI,CAACG,SAAS,GAAG,EAAE;EACrB;;EAEA;EACA,MAAMC,wBAAwBA,CAAA,EAAG;IAC/BL,OAAO,CAACC,IAAI,CAAC,qDAAqD,CAAC;IACnE,OAAO,EAAE;EACX;EAEAK,UAAUA,CAACC,aAAa,EAAE;IACxBP,OAAO,CAACC,IAAI,CAAC,uDAAuD,CAAC;IACrE,OAAOF,yBAAyB,CAACO,UAAU,CAACC,aAAa,CAAC;EAC5D;EAEAC,uBAAuBA,CAAA,EAAG;IACxBR,OAAO,CAACC,IAAI,CAAC,oEAAoE,CAAC;IAClF,OAAOF,yBAAyB,CAACS,uBAAuB,CAAC,CAAC;EAC5D;EAEA,MAAMC,iBAAiBA,CAACF,aAAa,EAAE;IACrCP,OAAO,CAACC,IAAI,CAAC,8DAA8D,CAAC;IAC5E,OAAO,KAAK;EACd;EAEAS,QAAQA,CAAA,EAAG;IACTV,OAAO,CAACC,IAAI,CAAC,qDAAqD,CAAC;IACnE,OAAOF,yBAAyB,CAACW,QAAQ,CAAC,CAAC;EAC7C;EAEAC,iBAAiBA,CAAA,EAAG;IAClBX,OAAO,CAACC,IAAI,CAAC,8DAA8D,CAAC;EAC9E;;EAEA;EACAW,iBAAiBA,CAAA,EAAG;IAClBZ,OAAO,CAACC,IAAI,CAAC,oEAAoE,CAAC;IAClF,OAAO,EAAE;EACX;EAEA,MAAMY,mBAAmBA,CAAA,EAAG;IAC1Bb,OAAO,CAACC,IAAI,CAAC,qCAAqC,CAAC;IACnD,OAAO,CAAC,CAAC;EACX;EAEA,MAAMa,uBAAuBA,CAAA,EAAG;IAC9Bd,OAAO,CAACC,IAAI,CAAC,oEAAoE,CAAC;IAClF,OAAO,EAAE;EACX;EAEAc,mBAAmBA,CAAA,EAAG;IACpBf,OAAO,CAACC,IAAI,CAAC,4DAA4D,CAAC;EAC5E;EAEAe,WAAWA,CAAA,EAAG;IACZhB,OAAO,CAACC,IAAI,CAAC,8DAA8D,CAAC;EAC9E;;EAEA;EACAgB,gBAAgBA,CAACC,QAAQ,EAAE;IACzB,IAAI,CAACd,SAAS,CAACe,IAAI,CAACD,QAAQ,CAAC;EAC/B;EAEAE,mBAAmBA,CAACF,QAAQ,EAAE;IAC5B,IAAI,CAACd,SAAS,GAAG,IAAI,CAACA,SAAS,CAACiB,MAAM,CAACC,QAAQ,IAAIA,QAAQ,KAAKJ,QAAQ,CAAC;EAC3E;EAEAK,eAAeA,CAACC,WAAW,EAAE;IAC3B,IAAI,CAACpB,SAAS,CAACqB,OAAO,CAACP,QAAQ,IAAIA,QAAQ,CAACM,WAAW,CAAC,CAAC;EAC3D;AACF;;AAEA;AACA,MAAME,kBAAkB,GAAG,IAAIxB,kBAAkB,CAAC,CAAC;AACnD,eAAewB,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}