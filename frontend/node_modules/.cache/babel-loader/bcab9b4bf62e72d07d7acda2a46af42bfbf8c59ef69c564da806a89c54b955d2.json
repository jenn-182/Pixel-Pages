{"ast":null,"code":"import { Code, PenTool, Palette, BookOpen, Briefcase, Target, Heart, Lightbulb } from 'lucide-react';\n\n/**\n * Service for handling profession and level title calculations\n * Matches the logic from TimeManagementMatrix and HexagonalSkillTree\n */\n\n/**\n * Calculate level from XP using the official system\n * @param {number} xp - Current XP\n * @returns {number} - Current level (1-10)\n */\nexport const getCurrentLevel = xp => {\n  const xpThresholds = [0, 1000, 3000, 6000, 10000, 15000, 21000, 28000, 36000, 45000];\n  let level = 1;\n  for (let i = xpThresholds.length - 1; i >= 0; i--) {\n    if (xp >= xpThresholds[i]) {\n      level = i + 1;\n      break;\n    }\n  }\n  return Math.min(level, 10);\n};\n\n/**\n * Get level title based on category and level\n * @param {string} categoryName - Category name (lowercase)\n * @param {number} level - Current level (1-10)\n * @returns {string} - Level title\n */\nexport const getLevelTitle = (categoryName, level) => {\n  var _titles$categoryKey;\n  const titles = {\n    scholar: ['STUDENT', 'LEARNER', 'THINKER', 'SCHOLAR', 'RESEARCHER', 'EXPERT', 'SAGE', 'PROFESSOR', 'GENIUS', 'MASTERMIND'],\n    profession: ['INTERN', 'TRAINEE', 'WORKER', 'SPECIALIST', 'VETERAN', 'ELITE', 'MANAGER', 'DIRECTOR', 'EXECUTIVE', 'LEGEND'],\n    artisan: ['DREAMER', 'ARTIST', 'MAKER', 'CREATOR', 'DESIGNER', 'INNOVATOR', 'VISIONARY', 'PIONEER', 'VIRTUOSO', 'GODLIKE'],\n    scribe: ['NOVICE', 'WRITER', 'AUTHOR', 'STORYTELLER', 'WORDSMITH', 'POET', 'NOVELIST', 'MASTER', 'LAUREATE', 'IMMORTAL'],\n    programming: ['NOOB', 'CODER', 'PROGRAMMER', 'DEVELOPER', 'ENGINEER', 'ARCHITECT', 'GURU', 'NINJA', 'WIZARD', 'HACKER'],\n    literacy: ['READER', 'BROWSER', 'BOOKWORM', 'SCHOLAR', 'CRITIC', 'ANALYST', 'EXPERT', 'CURATOR', 'SAGE', 'ORACLE'],\n    strategist: ['PLANNER', 'ORGANIZER', 'TACTICIAN', 'STRATEGIST', 'COORDINATOR', 'MASTERMIND', 'ARCHITECT', 'VISIONARY', 'COMMANDER', 'GRANDMASTER'],\n    mindfulness: ['SEEKER', 'RELAXER', 'MEDITATOR', 'PEACEFUL', 'CENTERED', 'BALANCED', 'SERENE', 'ENLIGHTENED', 'TRANSCENDENT', 'ZEN MASTER'],\n    knowledge: ['CURIOUS', 'SEARCHER', 'INVESTIGATOR', 'RESEARCHER', 'EXPLORER', 'DISCOVERER', 'SCHOLAR', 'EXPERT', 'AUTHORITY', 'OMNISCIENT']\n  };\n  const categoryKey = categoryName.toLowerCase();\n  return ((_titles$categoryKey = titles[categoryKey]) === null || _titles$categoryKey === void 0 ? void 0 : _titles$categoryKey[level - 1]) || `Level ${level}`;\n};\n\n/**\n * Get profession info for a skill\n * @param {string} skillName - Skill name (e.g., \"Programming\", \"Scholar\")\n * @param {number} level - Current level\n * @returns {object} - Profession object with icon and name\n */\nexport const getProfessionForSkill = (skillName, level) => {\n  const skillProfessions = {\n    'Programming': {\n      icon: Code,\n      name: getLevelTitle('programming', level)\n    },\n    'Scribe': {\n      icon: PenTool,\n      name: getLevelTitle('scribe', level)\n    },\n    'Artisan': {\n      icon: Palette,\n      name: getLevelTitle('artisan', level)\n    },\n    'Scholar': {\n      icon: BookOpen,\n      name: getLevelTitle('scholar', level)\n    },\n    'Profession': {\n      icon: Briefcase,\n      name: getLevelTitle('profession', level)\n    },\n    'Literacy': {\n      icon: BookOpen,\n      name: getLevelTitle('literacy', level)\n    },\n    'Strategist': {\n      icon: Target,\n      name: getLevelTitle('strategist', level)\n    },\n    'Mindfulness': {\n      icon: Heart,\n      name: getLevelTitle('mindfulness', level)\n    },\n    'Knowledge': {\n      icon: Lightbulb,\n      name: getLevelTitle('knowledge', level)\n    }\n  };\n\n  // Find the appropriate profession for the skill with case-insensitive matching\n  let profession = skillProfessions[skillName];\n\n  // If not found, try case-insensitive lookup\n  if (!profession) {\n    const skillKey = Object.keys(skillProfessions).find(key => key.toLowerCase() === skillName.toLowerCase());\n    profession = skillKey ? skillProfessions[skillKey] : null;\n  }\n\n  // Fallback to Scholar if still not found\n  if (!profession) {\n    profession = skillProfessions['Scholar'];\n  }\n  return profession;\n};\n\n/**\n * Calculate skills with levels and professions from localStorage categories\n * @param {array} categories - Categories from localStorage\n * @returns {object} - Object with skillsWithLevels array and highestSkill\n */\nexport const calculateSkillsAndProfession = categories => {\n  // Calculate level for each skill using the official system\n  const skillsWithLevels = categories.map(category => {\n    const currentXP = category.xp || 0;\n    const level = getCurrentLevel(currentXP);\n    const profession = getProfessionForSkill(category.name, level);\n\n    // Debug log the skill calculation\n    console.log(`🎯 Skill Debug - ${category.name}: XP=${currentXP}, Level=${level}, Profession=${profession.name}`);\n    return {\n      ...category,\n      level,\n      profession: {\n        name: profession.name,\n        icon: profession.icon\n      }\n    };\n  });\n\n  // Find the highest level skill\n  const highestSkill = skillsWithLevels.reduce((highest, current) => current.level > highest.level ? current : highest);\n  console.log('🏆 Highest skill determined:', {\n    name: highestSkill.name,\n    level: highestSkill.level,\n    profession: highestSkill.profession.name,\n    xp: highestSkill.xp\n  });\n  return {\n    skillsWithLevels,\n    highestSkill\n  };\n};","map":{"version":3,"names":["Code","PenTool","Palette","BookOpen","Briefcase","Target","Heart","Lightbulb","getCurrentLevel","xp","xpThresholds","level","i","length","Math","min","getLevelTitle","categoryName","_titles$categoryKey","titles","scholar","profession","artisan","scribe","programming","literacy","strategist","mindfulness","knowledge","categoryKey","toLowerCase","getProfessionForSkill","skillName","skillProfessions","icon","name","skillKey","Object","keys","find","key","calculateSkillsAndProfession","categories","skillsWithLevels","map","category","currentXP","console","log","highestSkill","reduce","highest","current"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/services/professionService.js"],"sourcesContent":["import { Code, PenTool, Palette, BookOpen, Briefcase, Target, Heart, Lightbulb } from 'lucide-react';\n\n/**\n * Service for handling profession and level title calculations\n * Matches the logic from TimeManagementMatrix and HexagonalSkillTree\n */\n\n/**\n * Calculate level from XP using the official system\n * @param {number} xp - Current XP\n * @returns {number} - Current level (1-10)\n */\nexport const getCurrentLevel = (xp) => {\n  const xpThresholds = [0, 1000, 3000, 6000, 10000, 15000, 21000, 28000, 36000, 45000];\n  let level = 1;\n  \n  for (let i = xpThresholds.length - 1; i >= 0; i--) {\n    if (xp >= xpThresholds[i]) {\n      level = i + 1;\n      break;\n    }\n  }\n  \n  return Math.min(level, 10);\n};\n\n/**\n * Get level title based on category and level\n * @param {string} categoryName - Category name (lowercase)\n * @param {number} level - Current level (1-10)\n * @returns {string} - Level title\n */\nexport const getLevelTitle = (categoryName, level) => {\n  const titles = {\n    scholar: ['STUDENT', 'LEARNER', 'THINKER', 'SCHOLAR', 'RESEARCHER', 'EXPERT', 'SAGE', 'PROFESSOR', 'GENIUS', 'MASTERMIND'],\n    profession: ['INTERN', 'TRAINEE', 'WORKER', 'SPECIALIST', 'VETERAN', 'ELITE', 'MANAGER', 'DIRECTOR', 'EXECUTIVE', 'LEGEND'],\n    artisan: ['DREAMER', 'ARTIST', 'MAKER', 'CREATOR', 'DESIGNER', 'INNOVATOR', 'VISIONARY', 'PIONEER', 'VIRTUOSO', 'GODLIKE'],\n    scribe: ['NOVICE', 'WRITER', 'AUTHOR', 'STORYTELLER', 'WORDSMITH', 'POET', 'NOVELIST', 'MASTER', 'LAUREATE', 'IMMORTAL'],\n    programming: ['NOOB', 'CODER', 'PROGRAMMER', 'DEVELOPER', 'ENGINEER', 'ARCHITECT', 'GURU', 'NINJA', 'WIZARD', 'HACKER'],\n    literacy: ['READER', 'BROWSER', 'BOOKWORM', 'SCHOLAR', 'CRITIC', 'ANALYST', 'EXPERT', 'CURATOR', 'SAGE', 'ORACLE'],\n    strategist: ['PLANNER', 'ORGANIZER', 'TACTICIAN', 'STRATEGIST', 'COORDINATOR', 'MASTERMIND', 'ARCHITECT', 'VISIONARY', 'COMMANDER', 'GRANDMASTER'],\n    mindfulness: ['SEEKER', 'RELAXER', 'MEDITATOR', 'PEACEFUL', 'CENTERED', 'BALANCED', 'SERENE', 'ENLIGHTENED', 'TRANSCENDENT', 'ZEN MASTER'],\n    knowledge: ['CURIOUS', 'SEARCHER', 'INVESTIGATOR', 'RESEARCHER', 'EXPLORER', 'DISCOVERER', 'SCHOLAR', 'EXPERT', 'AUTHORITY', 'OMNISCIENT']\n  };\n  \n  const categoryKey = categoryName.toLowerCase();\n  return titles[categoryKey]?.[level - 1] || `Level ${level}`;\n};\n\n/**\n * Get profession info for a skill\n * @param {string} skillName - Skill name (e.g., \"Programming\", \"Scholar\")\n * @param {number} level - Current level\n * @returns {object} - Profession object with icon and name\n */\nexport const getProfessionForSkill = (skillName, level) => {\n  const skillProfessions = {\n    'Programming': {\n      icon: Code,\n      name: getLevelTitle('programming', level)\n    },\n    'Scribe': {\n      icon: PenTool,\n      name: getLevelTitle('scribe', level)\n    },\n    'Artisan': {\n      icon: Palette,\n      name: getLevelTitle('artisan', level)\n    },\n    'Scholar': {\n      icon: BookOpen,\n      name: getLevelTitle('scholar', level)\n    },\n    'Profession': {\n      icon: Briefcase,\n      name: getLevelTitle('profession', level)\n    },\n    'Literacy': {\n      icon: BookOpen,\n      name: getLevelTitle('literacy', level)\n    },\n    'Strategist': {\n      icon: Target,\n      name: getLevelTitle('strategist', level)\n    },\n    'Mindfulness': {\n      icon: Heart,\n      name: getLevelTitle('mindfulness', level)\n    },\n    'Knowledge': {\n      icon: Lightbulb,\n      name: getLevelTitle('knowledge', level)\n    }\n  };\n  \n  // Find the appropriate profession for the skill with case-insensitive matching\n  let profession = skillProfessions[skillName];\n  \n  // If not found, try case-insensitive lookup\n  if (!profession) {\n    const skillKey = Object.keys(skillProfessions).find(key => \n      key.toLowerCase() === skillName.toLowerCase()\n    );\n    profession = skillKey ? skillProfessions[skillKey] : null;\n  }\n  \n  // Fallback to Scholar if still not found\n  if (!profession) {\n    profession = skillProfessions['Scholar'];\n  }\n  \n  return profession;\n};\n\n/**\n * Calculate skills with levels and professions from localStorage categories\n * @param {array} categories - Categories from localStorage\n * @returns {object} - Object with skillsWithLevels array and highestSkill\n */\nexport const calculateSkillsAndProfession = (categories) => {\n  // Calculate level for each skill using the official system\n  const skillsWithLevels = categories.map(category => {\n    const currentXP = category.xp || 0;\n    const level = getCurrentLevel(currentXP);\n    const profession = getProfessionForSkill(category.name, level);\n    \n    // Debug log the skill calculation\n    console.log(`🎯 Skill Debug - ${category.name}: XP=${currentXP}, Level=${level}, Profession=${profession.name}`);\n    \n    return {\n      ...category,\n      level,\n      profession: {\n        name: profession.name,\n        icon: profession.icon\n      }\n    };\n  });\n  \n  // Find the highest level skill\n  const highestSkill = skillsWithLevels.reduce((highest, current) => \n    current.level > highest.level ? current : highest\n  );\n  \n  console.log('🏆 Highest skill determined:', {\n    name: highestSkill.name,\n    level: highestSkill.level,\n    profession: highestSkill.profession.name,\n    xp: highestSkill.xp\n  });\n  \n  return { skillsWithLevels, highestSkill };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}