{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport achievementService from '../services/achievementService';\nconst useTasks = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [taskLists, setTaskLists] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const API_BASE = 'http://localhost:8080/api/tasks';\n  const TASK_LISTS_API = 'http://localhost:8080/api/task-lists';\n\n  // Fetch all tasks\n  const fetchTasks = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_BASE}?username=Jroc_182`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch tasks');\n      }\n      const data = await response.json();\n      setTasks(data);\n      setError(null);\n    } catch (err) {\n      console.error('Failed to fetch tasks:', err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch task lists\n  const fetchTaskLists = async () => {\n    try {\n      const response = await fetch(`${TASK_LISTS_API}?username=Jroc_182`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch task lists');\n      }\n      const data = await response.json();\n      setTaskLists(data);\n    } catch (err) {\n      console.error('Failed to fetch task lists:', err);\n    }\n  };\n\n  // Create new task\n  const createTask = async taskData => {\n    try {\n      const response = await fetch(`${API_BASE}?username=Jroc_182`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(taskData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create task');\n      }\n      const newTask = await response.json();\n      setTasks(prevTasks => [...prevTasks, newTask]);\n\n      // Check achievements after task creation\n      setTimeout(() => {\n        checkTaskAchievements();\n      }, 100);\n      return newTask;\n    } catch (err) {\n      console.error('Failed to create task:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Update task\n  const updateTask = async (taskId, updatedData) => {\n    try {\n      console.log('Updating task:', taskId, updatedData);\n\n      // ✅ FIX: Format data properly for backend\n      const requestData = {\n        title: updatedData.title,\n        description: updatedData.description,\n        priority: updatedData.priority,\n        dueDate: updatedData.dueDate,\n        // Should be YYYY-MM-DD format\n        tags: updatedData.tags,\n        taskListId: updatedData.taskListId,\n        completed: updatedData.completed\n      };\n\n      // ✅ FIX: Use API_BASE constant and 'Jroc_182' instead of currentUser\n      const response = await fetch(`${API_BASE}/${taskId}?username=Jroc_182`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestData)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Update task error response:', errorText);\n        throw new Error(`Failed to update task: ${response.status} - ${errorText}`);\n      }\n      const updated = await response.json();\n\n      // Update local state\n      setTasks(prevTasks => prevTasks.map(task => task.id === taskId ? updated : task));\n      console.log('Task updated successfully:', updated);\n      return updated;\n    } catch (error) {\n      console.error('Failed to update task:', error);\n      throw error;\n    }\n  };\n\n  // Delete task\n  const deleteTask = async taskId => {\n    try {\n      const response = await fetch(`${API_BASE}/${taskId}?username=Jroc_182`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete task');\n      }\n      setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));\n    } catch (err) {\n      console.error('Failed to delete task:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Toggle task completion\n  const toggleTask = async taskId => {\n    const task = tasks.find(t => t.id === taskId);\n    if (task) {\n      const updatedTask = {\n        ...task,\n        completed: !task.completed\n      };\n      if (updatedTask.completed) {\n        updatedTask.completedAt = new Date().toISOString();\n      }\n      await updateTask(taskId, updatedTask);\n    }\n  };\n\n  // Get overdue tasks\n  const getOverdueTasks = async () => {\n    try {\n      const response = await fetch(`${API_BASE}/overdue?username=Jroc_182`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch overdue tasks');\n      }\n      return await response.json();\n    } catch (err) {\n      console.error('Failed to fetch overdue tasks:', err);\n      return [];\n    }\n  };\n\n  // Get tasks due soon\n  const getDueSoonTasks = async () => {\n    try {\n      const response = await fetch(`${API_BASE}/due-soon?username=Jroc_182`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch tasks due soon');\n      }\n      return await response.json();\n    } catch (err) {\n      console.error('Failed to fetch tasks due soon:', err);\n      return [];\n    }\n  };\n\n  // Get tasks by list\n  const getTasksByList = taskListId => {\n    return tasks.filter(task => task.taskListId === taskListId);\n  };\n\n  // Create task list\n  const createTaskList = async taskListData => {\n    try {\n      const response = await fetch(`${TASK_LISTS_API}?username=user`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(taskListData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create task list');\n      }\n      const newTaskList = await response.json();\n      setTaskLists(prevLists => [...prevLists, newTaskList]);\n      return newTaskList;\n    } catch (err) {\n      console.error('Failed to create task list:', err);\n      throw err;\n    }\n  };\n\n  // Delete task list\n  const deleteTaskList = async taskListId => {\n    try {\n      const response = await fetch(`${TASK_LISTS_API}/${taskListId}?username=user`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete task list');\n      }\n      setTaskLists(prevLists => prevLists.filter(list => list.id !== taskListId));\n      // Refresh tasks to show moved tasks\n      await fetchTasks();\n    } catch (err) {\n      console.error('Failed to delete task list:', err);\n      throw err;\n    }\n  };\n\n  // Utility methods for task analysis\n  const getTaskStats = () => {\n    const total = tasks.length;\n    const completed = tasks.filter(t => t.completed).length;\n    const overdue = tasks.filter(t => t.overdue && !t.completed).length;\n    const dueSoon = tasks.filter(t => t.dueSoon && !t.completed).length;\n    return {\n      total,\n      completed,\n      overdue,\n      dueSoon,\n      completionRate: total > 0 ? Math.round(completed / total * 100) : 0\n    };\n  };\n\n  // Achievement checking\n  const checkTaskAchievements = () => {\n    const userStats = calculateTaskStats(tasks);\n    const newAchievements = achievementService.checkAchievements(userStats);\n    if (newAchievements.length > 0) {\n      console.log(`✅ Task achievements unlocked: ${newAchievements.map(a => a.name).join(', ')}`);\n    }\n    return newAchievements;\n  };\n\n  // Helper function for week start\n  const getWeekStart = date => {\n    const d = new Date(date);\n    const day = d.getDay();\n    const diff = d.getDate() - day;\n    return new Date(d.setDate(diff));\n  };\n\n  // Helper function for task streak calculation\n  const calculateTaskStreak = completedTasks => {\n    if (completedTasks.length === 0) return 0;\n    const dates = [...new Set(completedTasks.map(t => new Date(t.completedAt).toDateString()))].sort();\n    let streak = 1;\n    let currentStreak = 1;\n    for (let i = 1; i < dates.length; i++) {\n      const prevDate = new Date(dates[i - 1]);\n      const currentDate = new Date(dates[i]);\n      const dayDiff = (currentDate - prevDate) / (1000 * 60 * 60 * 24);\n      if (dayDiff === 1) {\n        currentStreak++;\n        streak = Math.max(streak, currentStreak);\n      } else {\n        currentStreak = 1;\n      }\n    }\n    return streak;\n  };\n  const calculateTaskStats = tasks => {\n    const now = new Date();\n    const today = now.toDateString();\n    const thisWeek = getWeekStart(now);\n    const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n    const completedTasks = tasks.filter(task => task.completed);\n    const totalTasks = completedTasks.length;\n    const tasksCreated = tasks.length;\n    const activeTasks = tasks.filter(task => !task.completed).length;\n\n    // Today's completed tasks\n    const tasksToday = completedTasks.filter(task => task.completedAt && new Date(task.completedAt).toDateString() === today).length;\n\n    // Week tasks\n    const tasksThisWeek = completedTasks.filter(task => task.completedAt && new Date(task.completedAt) >= thisWeek).length;\n\n    // Month tasks\n    const tasksThisMonth = completedTasks.filter(task => task.completedAt && new Date(task.completedAt) >= thisMonth).length;\n\n    // Priority-based tasks\n    const highPriorityTasks = completedTasks.filter(task => task.priority === 'high').length;\n    const urgentTasks = completedTasks.filter(task => task.priority === 'urgent').length;\n\n    // Early completions (completed before due date)\n    const earlyCompletions = completedTasks.filter(task => {\n      if (!task.dueDate || !task.completedAt) return false;\n      return new Date(task.completedAt) < new Date(task.dueDate);\n    }).length;\n\n    // Task categories\n    const taskCategories = new Set(tasks.map(task => task.category).filter(Boolean)).size;\n\n    // Task streak (simplified)\n    const taskStreak = calculateTaskStreak(completedTasks);\n\n    // Completion rate\n    const completionRate = tasksCreated > 0 ? totalTasks / tasksCreated : 0;\n    return {\n      totalTasks,\n      tasksCreated,\n      activeTasks,\n      completedTasks: totalTasks,\n      tasksToday,\n      tasksThisWeek,\n      tasksThisMonth,\n      highPriorityTasks,\n      urgentTasks,\n      earlyCompletions,\n      taskCategories,\n      taskStreak,\n      completionRate\n    };\n  };\n\n  // Fetch data on mount\n  useEffect(() => {\n    fetchTasks();\n    fetchTaskLists();\n  }, []);\n  return {\n    // Data\n    tasks,\n    taskLists,\n    loading,\n    error,\n    // Basic CRUD\n    createTask,\n    updateTask,\n    deleteTask,\n    toggleTask,\n    fetchTasks,\n    // Task Lists\n    createTaskList,\n    deleteTaskList,\n    fetchTaskLists,\n    // Enhanced queries\n    getOverdueTasks,\n    getDueSoonTasks,\n    getTasksByList,\n    // Utilities\n    getTaskStats\n  };\n};\n_s(useTasks, \"Z5EEqM7ZAscVytBXD8XbKodXSXA=\");\nexport default useTasks;","map":{"version":3,"names":["useState","useEffect","achievementService","useTasks","_s","tasks","setTasks","taskLists","setTaskLists","loading","setLoading","error","setError","API_BASE","TASK_LISTS_API","fetchTasks","response","fetch","ok","Error","data","json","err","console","message","fetchTaskLists","createTask","taskData","method","headers","body","JSON","stringify","newTask","prevTasks","setTimeout","checkTaskAchievements","updateTask","taskId","updatedData","log","requestData","title","description","priority","dueDate","tags","taskListId","completed","errorText","text","status","updated","map","task","id","deleteTask","filter","toggleTask","find","t","updatedTask","completedAt","Date","toISOString","getOverdueTasks","getDueSoonTasks","getTasksByList","createTaskList","taskListData","newTaskList","prevLists","deleteTaskList","list","getTaskStats","total","length","overdue","dueSoon","completionRate","Math","round","userStats","calculateTaskStats","newAchievements","checkAchievements","a","name","join","getWeekStart","date","d","day","getDay","diff","getDate","setDate","calculateTaskStreak","completedTasks","dates","Set","toDateString","sort","streak","currentStreak","i","prevDate","currentDate","dayDiff","max","now","today","thisWeek","thisMonth","getFullYear","getMonth","totalTasks","tasksCreated","activeTasks","tasksToday","tasksThisWeek","tasksThisMonth","highPriorityTasks","urgentTasks","earlyCompletions","taskCategories","category","Boolean","size","taskStreak"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/useTasks.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport achievementService from '../services/achievementService';\n\nconst useTasks = () => {\n  const [tasks, setTasks] = useState([]);\n  const [taskLists, setTaskLists] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const API_BASE = 'http://localhost:8080/api/tasks';\n  const TASK_LISTS_API = 'http://localhost:8080/api/task-lists';\n\n  // Fetch all tasks\n  const fetchTasks = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_BASE}?username=Jroc_182`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch tasks');\n      }\n      \n      const data = await response.json();\n      setTasks(data);\n      setError(null);\n    } catch (err) {\n      console.error('Failed to fetch tasks:', err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch task lists\n  const fetchTaskLists = async () => {\n    try {\n      const response = await fetch(`${TASK_LISTS_API}?username=Jroc_182`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch task lists');\n      }\n      \n      const data = await response.json();\n      setTaskLists(data);\n    } catch (err) {\n      console.error('Failed to fetch task lists:', err);\n    }\n  };\n\n  // Create new task\n  const createTask = async (taskData) => {\n    try {\n      const response = await fetch(`${API_BASE}?username=Jroc_182`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(taskData),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create task');\n      }\n\n      const newTask = await response.json();\n      setTasks(prevTasks => [...prevTasks, newTask]);\n      \n      // Check achievements after task creation\n      setTimeout(() => {\n        checkTaskAchievements();\n      }, 100);\n      \n      return newTask;\n    } catch (err) {\n      console.error('Failed to create task:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Update task\n  const updateTask = async (taskId, updatedData) => {\n    try {\n      console.log('Updating task:', taskId, updatedData);\n      \n      // ✅ FIX: Format data properly for backend\n      const requestData = {\n        title: updatedData.title,\n        description: updatedData.description,\n        priority: updatedData.priority,\n        dueDate: updatedData.dueDate, // Should be YYYY-MM-DD format\n        tags: updatedData.tags,\n        taskListId: updatedData.taskListId,\n        completed: updatedData.completed\n      };\n      \n      // ✅ FIX: Use API_BASE constant and 'Jroc_182' instead of currentUser\n      const response = await fetch(`${API_BASE}/${taskId}?username=Jroc_182`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestData),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Update task error response:', errorText);\n        throw new Error(`Failed to update task: ${response.status} - ${errorText}`);\n      }\n\n      const updated = await response.json();\n      \n      // Update local state\n      setTasks(prevTasks => \n        prevTasks.map(task => \n          task.id === taskId ? updated : task\n        )\n      );\n      \n      console.log('Task updated successfully:', updated);\n      return updated;\n    } catch (error) {\n      console.error('Failed to update task:', error);\n      throw error;\n    }\n  };\n\n  // Delete task\n  const deleteTask = async (taskId) => {\n    try {\n      const response = await fetch(`${API_BASE}/${taskId}?username=Jroc_182`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to delete task');\n      }\n\n      setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));\n    } catch (err) {\n      console.error('Failed to delete task:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Toggle task completion\n  const toggleTask = async (taskId) => {\n    const task = tasks.find(t => t.id === taskId);\n    if (task) {\n      const updatedTask = { ...task, completed: !task.completed };\n      if (updatedTask.completed) {\n        updatedTask.completedAt = new Date().toISOString();\n      }\n      await updateTask(taskId, updatedTask);\n    }\n  };\n\n  // Get overdue tasks\n  const getOverdueTasks = async () => {\n    try {\n      const response = await fetch(`${API_BASE}/overdue?username=Jroc_182`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch overdue tasks');\n      }\n      \n      return await response.json();\n    } catch (err) {\n      console.error('Failed to fetch overdue tasks:', err);\n      return [];\n    }\n  };\n\n  // Get tasks due soon\n  const getDueSoonTasks = async () => {\n    try {\n      const response = await fetch(`${API_BASE}/due-soon?username=Jroc_182`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch tasks due soon');\n      }\n      \n      return await response.json();\n    } catch (err) {\n      console.error('Failed to fetch tasks due soon:', err);\n      return [];\n    }\n  };\n\n  // Get tasks by list\n  const getTasksByList = (taskListId) => {\n    return tasks.filter(task => task.taskListId === taskListId);\n  };\n\n  // Create task list\n  const createTaskList = async (taskListData) => {\n    try {\n      const response = await fetch(`${TASK_LISTS_API}?username=user`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(taskListData),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create task list');\n      }\n\n      const newTaskList = await response.json();\n      setTaskLists(prevLists => [...prevLists, newTaskList]);\n      return newTaskList;\n    } catch (err) {\n      console.error('Failed to create task list:', err);\n      throw err;\n    }\n  };\n\n  // Delete task list\n  const deleteTaskList = async (taskListId) => {\n    try {\n      const response = await fetch(`${TASK_LISTS_API}/${taskListId}?username=user`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to delete task list');\n      }\n\n      setTaskLists(prevLists => prevLists.filter(list => list.id !== taskListId));\n      // Refresh tasks to show moved tasks\n      await fetchTasks();\n    } catch (err) {\n      console.error('Failed to delete task list:', err);\n      throw err;\n    }\n  };\n\n  // Utility methods for task analysis\n  const getTaskStats = () => {\n    const total = tasks.length;\n    const completed = tasks.filter(t => t.completed).length;\n    const overdue = tasks.filter(t => t.overdue && !t.completed).length;\n    const dueSoon = tasks.filter(t => t.dueSoon && !t.completed).length;\n    \n    return {\n      total,\n      completed,\n      overdue,\n      dueSoon,\n      completionRate: total > 0 ? Math.round((completed / total) * 100) : 0\n    };\n  };\n\n  // Achievement checking\n  const checkTaskAchievements = () => {\n    const userStats = calculateTaskStats(tasks);\n    const newAchievements = achievementService.checkAchievements(userStats);\n    \n    if (newAchievements.length > 0) {\n      console.log(`✅ Task achievements unlocked: ${newAchievements.map(a => a.name).join(', ')}`);\n    }\n    \n    return newAchievements;\n  };\n\n  // Helper function for week start\n  const getWeekStart = (date) => {\n    const d = new Date(date);\n    const day = d.getDay();\n    const diff = d.getDate() - day;\n    return new Date(d.setDate(diff));\n  };\n\n  // Helper function for task streak calculation\n  const calculateTaskStreak = (completedTasks) => {\n    if (completedTasks.length === 0) return 0;\n    \n    const dates = [...new Set(completedTasks.map(t => new Date(t.completedAt).toDateString()))].sort();\n    let streak = 1;\n    let currentStreak = 1;\n    \n    for (let i = 1; i < dates.length; i++) {\n      const prevDate = new Date(dates[i - 1]);\n      const currentDate = new Date(dates[i]);\n      const dayDiff = (currentDate - prevDate) / (1000 * 60 * 60 * 24);\n      \n      if (dayDiff === 1) {\n        currentStreak++;\n        streak = Math.max(streak, currentStreak);\n      } else {\n        currentStreak = 1;\n      }\n    }\n    \n    return streak;\n  };\n\n  const calculateTaskStats = (tasks) => {\n    const now = new Date();\n    const today = now.toDateString();\n    const thisWeek = getWeekStart(now);\n    const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n    \n    const completedTasks = tasks.filter(task => task.completed);\n    const totalTasks = completedTasks.length;\n    const tasksCreated = tasks.length;\n    const activeTasks = tasks.filter(task => !task.completed).length;\n    \n    // Today's completed tasks\n    const tasksToday = completedTasks.filter(task => \n      task.completedAt && new Date(task.completedAt).toDateString() === today\n    ).length;\n    \n    // Week tasks\n    const tasksThisWeek = completedTasks.filter(task => \n      task.completedAt && new Date(task.completedAt) >= thisWeek\n    ).length;\n    \n    // Month tasks\n    const tasksThisMonth = completedTasks.filter(task => \n      task.completedAt && new Date(task.completedAt) >= thisMonth\n    ).length;\n    \n    // Priority-based tasks\n    const highPriorityTasks = completedTasks.filter(task => \n      task.priority === 'high'\n    ).length;\n    \n    const urgentTasks = completedTasks.filter(task => \n      task.priority === 'urgent'\n    ).length;\n    \n    // Early completions (completed before due date)\n    const earlyCompletions = completedTasks.filter(task => {\n      if (!task.dueDate || !task.completedAt) return false;\n      return new Date(task.completedAt) < new Date(task.dueDate);\n    }).length;\n    \n    // Task categories\n    const taskCategories = new Set(tasks.map(task => task.category).filter(Boolean)).size;\n    \n    // Task streak (simplified)\n    const taskStreak = calculateTaskStreak(completedTasks);\n    \n    // Completion rate\n    const completionRate = tasksCreated > 0 ? totalTasks / tasksCreated : 0;\n    \n    return {\n      totalTasks,\n      tasksCreated,\n      activeTasks,\n      completedTasks: totalTasks,\n      tasksToday,\n      tasksThisWeek,\n      tasksThisMonth,\n      highPriorityTasks,\n      urgentTasks,\n      earlyCompletions,\n      taskCategories,\n      taskStreak,\n      completionRate\n    };\n  };\n\n  // Fetch data on mount\n  useEffect(() => {\n    fetchTasks();\n    fetchTaskLists();\n  }, []);\n\n  return {\n    // Data\n    tasks,\n    taskLists,\n    loading,\n    error,\n    \n    // Basic CRUD\n    createTask,\n    updateTask,\n    deleteTask,\n    toggleTask,\n    fetchTasks,\n    \n    // Task Lists\n    createTaskList,\n    deleteTaskList,\n    fetchTaskLists,\n    \n    // Enhanced queries\n    getOverdueTasks,\n    getDueSoonTasks,\n    getTasksByList,\n    \n    // Utilities\n    getTaskStats,\n  };\n};\n\nexport default useTasks;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}