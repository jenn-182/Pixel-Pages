{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport backendAchievementService from '../services/backendAchievementService';\n\n/**\n * Hook for managing profile badge state and operations\n * Handles unlocked achievements, selected badges, and badge modal state\n */\nexport const useProfileBadges = username => {\n  _s();\n  const [unlockedAchievements, setUnlockedAchievements] = useState([]);\n  const [selectedBadges, setSelectedBadges] = useState([]);\n  const [showBadgeSelector, setShowBadgeSelector] = useState(false);\n  const [achievementStats, setAchievementStats] = useState({\n    total: 0,\n    unlocked: 0\n  });\n\n  // Load unlocked achievements and badge data\n  useEffect(() => {\n    const loadAchievementData = async () => {\n      try {\n        // Get unlocked achievements from backend\n        const unlockedData = await backendAchievementService.getUnlockedAchievements(username);\n        console.log('🏆 Profile - Unlocked achievements loaded:', unlockedData.length);\n        setUnlockedAchievements(unlockedData);\n\n        // Get achievement stats\n        const stats = await backendAchievementService.getAchievementStats(username);\n        console.log('📊 Profile - Achievement stats:', stats);\n        setAchievementStats(stats);\n\n        // Load selected badges from localStorage\n        const savedBadges = localStorage.getItem(`selectedBadges_${username}`);\n        if (savedBadges) {\n          const badgeIds = JSON.parse(savedBadges);\n          // Filter to only include badges that are still unlocked\n          const validBadges = badgeIds.map(id => unlockedData.find(achievement => achievement.id === id)).filter(Boolean).slice(0, 3); // Max 3 badges\n          setSelectedBadges(validBadges);\n        }\n      } catch (error) {\n        console.error('❌ Error loading achievement data:', error);\n      }\n    };\n    if (username) {\n      loadAchievementData();\n    }\n  }, [username]);\n\n  /**\n   * Add a badge to the selected badges\n   * @param {object} achievement - Achievement to add as badge\n   */\n  const addBadge = achievement => {\n    if (selectedBadges.length >= 3) return;\n    const newBadges = [...selectedBadges, achievement];\n    setSelectedBadges(newBadges);\n\n    // Save to localStorage\n    const badgeIds = newBadges.map(badge => badge.id);\n    localStorage.setItem(`selectedBadges_${username}`, JSON.stringify(badgeIds));\n  };\n\n  /**\n   * Remove a badge from selected badges\n   * @param {string} achievementId - ID of achievement to remove\n   */\n  const removeBadge = achievementId => {\n    const newBadges = selectedBadges.filter(badge => badge.id !== achievementId);\n    setSelectedBadges(newBadges);\n\n    // Save to localStorage\n    const badgeIds = newBadges.map(badge => badge.id);\n    localStorage.setItem(`selectedBadges_${username}`, JSON.stringify(badgeIds));\n  };\n\n  /**\n   * Check if an achievement is already selected as a badge\n   * @param {string} achievementId - Achievement ID to check\n   * @returns {boolean} - True if already selected\n   */\n  const isBadgeSelected = achievementId => {\n    return selectedBadges.some(badge => badge.id === achievementId);\n  };\n\n  /**\n   * Get available achievements that can be added as badges\n   * @returns {array} - Achievements that are unlocked but not selected\n   */\n  const getAvailableAchievements = () => {\n    return unlockedAchievements.filter(achievement => !isBadgeSelected(achievement.id));\n  };\n\n  /**\n   * Open the badge selector modal\n   */\n  const openBadgeSelector = () => {\n    setShowBadgeSelector(true);\n  };\n\n  /**\n   * Close the badge selector modal\n   */\n  const closeBadgeSelector = () => {\n    setShowBadgeSelector(false);\n  };\n  return {\n    // State\n    unlockedAchievements,\n    selectedBadges,\n    showBadgeSelector,\n    achievementStats,\n    // Actions\n    addBadge,\n    removeBadge,\n    isBadgeSelected,\n    getAvailableAchievements,\n    openBadgeSelector,\n    closeBadgeSelector,\n    // Computed\n    canAddMoreBadges: selectedBadges.length < 3,\n    hasUnlockedAchievements: unlockedAchievements.length > 0\n  };\n};\n_s(useProfileBadges, \"vZTUNYynBA6Ewj6EGD1/B8568pk=\");","map":{"version":3,"names":["useState","useEffect","backendAchievementService","useProfileBadges","username","_s","unlockedAchievements","setUnlockedAchievements","selectedBadges","setSelectedBadges","showBadgeSelector","setShowBadgeSelector","achievementStats","setAchievementStats","total","unlocked","loadAchievementData","unlockedData","getUnlockedAchievements","console","log","length","stats","getAchievementStats","savedBadges","localStorage","getItem","badgeIds","JSON","parse","validBadges","map","id","find","achievement","filter","Boolean","slice","error","addBadge","newBadges","badge","setItem","stringify","removeBadge","achievementId","isBadgeSelected","some","getAvailableAchievements","openBadgeSelector","closeBadgeSelector","canAddMoreBadges","hasUnlockedAchievements"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/useProfileBadges.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport backendAchievementService from '../services/backendAchievementService';\n\n/**\n * Hook for managing profile badge state and operations\n * Handles unlocked achievements, selected badges, and badge modal state\n */\nexport const useProfileBadges = (username) => {\n  const [unlockedAchievements, setUnlockedAchievements] = useState([]);\n  const [selectedBadges, setSelectedBadges] = useState([]);\n  const [showBadgeSelector, setShowBadgeSelector] = useState(false);\n  const [achievementStats, setAchievementStats] = useState({ total: 0, unlocked: 0 });\n\n  // Load unlocked achievements and badge data\n  useEffect(() => {\n    const loadAchievementData = async () => {\n      try {\n        // Get unlocked achievements from backend\n        const unlockedData = await backendAchievementService.getUnlockedAchievements(username);\n        console.log('🏆 Profile - Unlocked achievements loaded:', unlockedData.length);\n        setUnlockedAchievements(unlockedData);\n\n        // Get achievement stats\n        const stats = await backendAchievementService.getAchievementStats(username);\n        console.log('📊 Profile - Achievement stats:', stats);\n        setAchievementStats(stats);\n\n        // Load selected badges from localStorage\n        const savedBadges = localStorage.getItem(`selectedBadges_${username}`);\n        if (savedBadges) {\n          const badgeIds = JSON.parse(savedBadges);\n          // Filter to only include badges that are still unlocked\n          const validBadges = badgeIds\n            .map(id => unlockedData.find(achievement => achievement.id === id))\n            .filter(Boolean)\n            .slice(0, 3); // Max 3 badges\n          setSelectedBadges(validBadges);\n        }\n      } catch (error) {\n        console.error('❌ Error loading achievement data:', error);\n      }\n    };\n\n    if (username) {\n      loadAchievementData();\n    }\n  }, [username]);\n\n  /**\n   * Add a badge to the selected badges\n   * @param {object} achievement - Achievement to add as badge\n   */\n  const addBadge = (achievement) => {\n    if (selectedBadges.length >= 3) return;\n    \n    const newBadges = [...selectedBadges, achievement];\n    setSelectedBadges(newBadges);\n    \n    // Save to localStorage\n    const badgeIds = newBadges.map(badge => badge.id);\n    localStorage.setItem(`selectedBadges_${username}`, JSON.stringify(badgeIds));\n  };\n\n  /**\n   * Remove a badge from selected badges\n   * @param {string} achievementId - ID of achievement to remove\n   */\n  const removeBadge = (achievementId) => {\n    const newBadges = selectedBadges.filter(badge => badge.id !== achievementId);\n    setSelectedBadges(newBadges);\n    \n    // Save to localStorage\n    const badgeIds = newBadges.map(badge => badge.id);\n    localStorage.setItem(`selectedBadges_${username}`, JSON.stringify(badgeIds));\n  };\n\n  /**\n   * Check if an achievement is already selected as a badge\n   * @param {string} achievementId - Achievement ID to check\n   * @returns {boolean} - True if already selected\n   */\n  const isBadgeSelected = (achievementId) => {\n    return selectedBadges.some(badge => badge.id === achievementId);\n  };\n\n  /**\n   * Get available achievements that can be added as badges\n   * @returns {array} - Achievements that are unlocked but not selected\n   */\n  const getAvailableAchievements = () => {\n    return unlockedAchievements.filter(achievement => !isBadgeSelected(achievement.id));\n  };\n\n  /**\n   * Open the badge selector modal\n   */\n  const openBadgeSelector = () => {\n    setShowBadgeSelector(true);\n  };\n\n  /**\n   * Close the badge selector modal\n   */\n  const closeBadgeSelector = () => {\n    setShowBadgeSelector(false);\n  };\n\n  return {\n    // State\n    unlockedAchievements,\n    selectedBadges,\n    showBadgeSelector,\n    achievementStats,\n    \n    // Actions\n    addBadge,\n    removeBadge,\n    isBadgeSelected,\n    getAvailableAchievements,\n    openBadgeSelector,\n    closeBadgeSelector,\n    \n    // Computed\n    canAddMoreBadges: selectedBadges.length < 3,\n    hasUnlockedAchievements: unlockedAchievements.length > 0\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}