{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nexport const useNavigation = () => {\n  _s();\n  const [navigationState, setNavigationState] = useState({\n    currentView: 'dashboard',\n    selectedFolder: null,\n    selectedNotebook: null,\n    selectedNote: null,\n    breadcrumbs: []\n  });\n  const navigateToFolder = useCallback((folder, onTabChange) => {\n    if (onTabChange) {\n      // Navigate to library tab with specific folder view\n      onTabChange('library', {\n        view: 'folder',\n        selectedFolder: folder,\n        folderId: folder.id,\n        breadcrumbs: [{\n          label: 'Storage Vault',\n          view: 'library'\n        }, {\n          label: folder.name,\n          view: 'folder',\n          data: folder\n        }]\n      });\n    }\n    setNavigationState(prev => ({\n      ...prev,\n      currentView: 'folder',\n      selectedFolder: folder,\n      breadcrumbs: [{\n        label: 'Storage Vault',\n        view: 'library'\n      }, {\n        label: folder.name,\n        view: 'folder',\n        data: folder\n      }]\n    }));\n  }, []);\n  const navigateToNoteView = useCallback((options = {}, onTabChange) => {\n    if (onTabChange) {\n      // Navigate to noteview tab\n      onTabChange('noteview', {\n        view: 'allNotes',\n        selectedNote: options.selectedNote || null,\n        folderId: options.folderId || null,\n        ...options\n      });\n    }\n    setNavigationState(prev => ({\n      ...prev,\n      currentView: 'noteview',\n      selectedNote: options.selectedNote || null\n    }));\n  }, []);\n  const navigateToNotebook = useCallback((notebook, onTabChange) => {\n    if (onTabChange) {\n      onTabChange('library', {\n        view: 'notebook',\n        selectedNotebook: notebook,\n        notebookId: notebook.id,\n        breadcrumbs: [{\n          label: 'Storage Vault',\n          view: 'library'\n        }, {\n          label: notebook.name,\n          view: 'notebook',\n          data: notebook\n        }]\n      });\n    }\n    setNavigationState(prev => ({\n      ...prev,\n      currentView: 'notebook',\n      selectedNotebook: notebook,\n      breadcrumbs: [{\n        label: 'Storage Vault',\n        view: 'library'\n      }, {\n        label: notebook.name,\n        view: 'notebook',\n        data: notebook\n      }]\n    }));\n  }, []);\n  const navigateBack = useCallback(onTabChange => {\n    const newBreadcrumbs = [...navigationState.breadcrumbs];\n    newBreadcrumbs.pop(); // Remove current view\n\n    const previousView = newBreadcrumbs[newBreadcrumbs.length - 1];\n    if (previousView) {\n      if (onTabChange) {\n        onTabChange('library', {\n          view: previousView.view,\n          breadcrumbs: newBreadcrumbs\n        });\n      }\n      setNavigationState(prev => ({\n        ...prev,\n        currentView: previousView.view,\n        breadcrumbs: newBreadcrumbs,\n        selectedFolder: previousView.view === 'folder' ? previousView.data : null,\n        selectedNotebook: previousView.view === 'notebook' ? previousView.data : null\n      }));\n    } else {\n      // Go back to main library view\n      if (onTabChange) {\n        onTabChange('library');\n      }\n      setNavigationState(prev => ({\n        ...prev,\n        currentView: 'library',\n        selectedFolder: null,\n        selectedNotebook: null,\n        breadcrumbs: []\n      }));\n    }\n  }, [navigationState.breadcrumbs]);\n  const resetNavigation = useCallback(() => {\n    setNavigationState({\n      currentView: 'dashboard',\n      selectedFolder: null,\n      selectedNotebook: null,\n      selectedNote: null,\n      breadcrumbs: []\n    });\n  }, []);\n  const handleAccessAllLogs = () => {\n    navigateToNoteView({\n      view: 'allNotes'\n    }, onTabChange);\n  };\n  return {\n    navigationState,\n    navigateToFolder,\n    navigateToNoteView,\n    navigateToNotebook,\n    navigateBack,\n    resetNavigation,\n    handleAccessAllLogs\n  };\n};\n_s(useNavigation, \"T9KID9Pbe7CPF8Vjyy2YKh1kx1k=\");","map":{"version":3,"names":["useState","useCallback","useNavigation","_s","navigationState","setNavigationState","currentView","selectedFolder","selectedNotebook","selectedNote","breadcrumbs","navigateToFolder","folder","onTabChange","view","folderId","id","label","name","data","prev","navigateToNoteView","options","navigateToNotebook","notebook","notebookId","navigateBack","newBreadcrumbs","pop","previousView","length","resetNavigation","handleAccessAllLogs"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/useNavigation.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\nexport const useNavigation = () => {\n  const [navigationState, setNavigationState] = useState({\n    currentView: 'dashboard',\n    selectedFolder: null,\n    selectedNotebook: null,\n    selectedNote: null,\n    breadcrumbs: []\n  });\n\n  const navigateToFolder = useCallback((folder, onTabChange) => {\n    if (onTabChange) {\n      // Navigate to library tab with specific folder view\n      onTabChange('library', { \n        view: 'folder',\n        selectedFolder: folder,\n        folderId: folder.id,\n        breadcrumbs: [\n          { label: 'Storage Vault', view: 'library' },\n          { label: folder.name, view: 'folder', data: folder }\n        ]\n      });\n    }\n    \n    setNavigationState(prev => ({\n      ...prev,\n      currentView: 'folder',\n      selectedFolder: folder,\n      breadcrumbs: [\n        { label: 'Storage Vault', view: 'library' },\n        { label: folder.name, view: 'folder', data: folder }\n      ]\n    }));\n  }, []);\n\n  const navigateToNoteView = useCallback((options = {}, onTabChange) => {\n    if (onTabChange) {\n      // Navigate to noteview tab\n      onTabChange('noteview', {\n        view: 'allNotes',\n        selectedNote: options.selectedNote || null,\n        folderId: options.folderId || null,\n        ...options\n      });\n    }\n    \n    setNavigationState(prev => ({\n      ...prev,\n      currentView: 'noteview',\n      selectedNote: options.selectedNote || null\n    }));\n  }, []);\n\n  const navigateToNotebook = useCallback((notebook, onTabChange) => {\n    if (onTabChange) {\n      onTabChange('library', { \n        view: 'notebook',\n        selectedNotebook: notebook,\n        notebookId: notebook.id,\n        breadcrumbs: [\n          { label: 'Storage Vault', view: 'library' },\n          { label: notebook.name, view: 'notebook', data: notebook }\n        ]\n      });\n    }\n    \n    setNavigationState(prev => ({\n      ...prev,\n      currentView: 'notebook',\n      selectedNotebook: notebook,\n      breadcrumbs: [\n        { label: 'Storage Vault', view: 'library' },\n        { label: notebook.name, view: 'notebook', data: notebook }\n      ]\n    }));\n  }, []);\n\n  const navigateBack = useCallback((onTabChange) => {\n    const newBreadcrumbs = [...navigationState.breadcrumbs];\n    newBreadcrumbs.pop(); // Remove current view\n    \n    const previousView = newBreadcrumbs[newBreadcrumbs.length - 1];\n    \n    if (previousView) {\n      if (onTabChange) {\n        onTabChange('library', { \n          view: previousView.view,\n          breadcrumbs: newBreadcrumbs\n        });\n      }\n      \n      setNavigationState(prev => ({\n        ...prev,\n        currentView: previousView.view,\n        breadcrumbs: newBreadcrumbs,\n        selectedFolder: previousView.view === 'folder' ? previousView.data : null,\n        selectedNotebook: previousView.view === 'notebook' ? previousView.data : null\n      }));\n    } else {\n      // Go back to main library view\n      if (onTabChange) {\n        onTabChange('library');\n      }\n      \n      setNavigationState(prev => ({\n        ...prev,\n        currentView: 'library',\n        selectedFolder: null,\n        selectedNotebook: null,\n        breadcrumbs: []\n      }));\n    }\n  }, [navigationState.breadcrumbs]);\n\n  const resetNavigation = useCallback(() => {\n    setNavigationState({\n      currentView: 'dashboard',\n      selectedFolder: null,\n      selectedNotebook: null,\n      selectedNote: null,\n      breadcrumbs: []\n    });\n  }, []);\n\n  const handleAccessAllLogs = () => {\n    navigateToNoteView({ view: 'allNotes' }, onTabChange);\n  };\n\n  return {\n    navigationState,\n    navigateToFolder,\n    navigateToNoteView,\n    navigateToNotebook,\n    navigateBack,\n    resetNavigation,\n    handleAccessAllLogs\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}