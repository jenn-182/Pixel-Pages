{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useFolders = () => {\n  _s();\n  const [folders, setFolders] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Fetch folders on component mount\n  useEffect(() => {\n    fetchFolders();\n  }, []);\n  const fetchFolders = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/folders');\n      if (response.ok) {\n        const data = await response.json();\n        setFolders(data);\n      } else {\n        console.error('Failed to fetch folders:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error fetching folders:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // CREATE FOLDER - This is where your fetch call goes\n  const createFolder = async folderData => {\n    try {\n      const response = await fetch('/api/folders/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: folderData.name,\n          description: folderData.description,\n          colorCode: folderData.colorCode,\n          parentFolderId: folderData.parentFolderId || null\n        })\n      });\n      if (response.ok) {\n        const newFolder = await response.json();\n        // Add the new folder to the state\n        setFolders(prevFolders => [...prevFolders, newFolder]);\n        return newFolder;\n      } else {\n        const errorText = await response.text();\n        console.error('Failed to create folder:', response.status, errorText);\n        throw new Error(`Failed to create folder: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error creating folder:', error);\n      throw error;\n    }\n  };\n  return {\n    folders,\n    loading,\n    createFolder,\n    refreshFolders: fetchFolders\n  };\n};\n_s(useFolders, \"bRkRflkM/jfTDyZAYUQxxPr37VE=\");\nexport default useFolders;","map":{"version":3,"names":["useState","useEffect","useFolders","_s","folders","setFolders","loading","setLoading","fetchFolders","response","fetch","ok","data","json","console","error","statusText","createFolder","folderData","method","headers","body","JSON","stringify","name","description","colorCode","parentFolderId","newFolder","prevFolders","errorText","text","status","Error","refreshFolders"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/useFolders.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useFolders = () => {\n  const [folders, setFolders] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Fetch folders on component mount\n  useEffect(() => {\n    fetchFolders();\n  }, []);\n\n  const fetchFolders = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/folders');\n      if (response.ok) {\n        const data = await response.json();\n        setFolders(data);\n      } else {\n        console.error('Failed to fetch folders:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error fetching folders:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // CREATE FOLDER - This is where your fetch call goes\n  const createFolder = async (folderData) => {\n    try {\n      const response = await fetch('/api/folders/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: folderData.name,\n          description: folderData.description,\n          colorCode: folderData.colorCode,\n          parentFolderId: folderData.parentFolderId || null\n        })\n      });\n\n      if (response.ok) {\n        const newFolder = await response.json();\n        // Add the new folder to the state\n        setFolders(prevFolders => [...prevFolders, newFolder]);\n        return newFolder;\n      } else {\n        const errorText = await response.text();\n        console.error('Failed to create folder:', response.status, errorText);\n        throw new Error(`Failed to create folder: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error creating folder:', error);\n      throw error;\n    }\n  };\n\n  return {\n    folders,\n    loading,\n    createFolder,\n    refreshFolders: fetchFolders\n  };\n};\n\nexport default useFolders;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACdO,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACFD,UAAU,CAAC,IAAI,CAAC;MAChB,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,cAAc,CAAC;MAC5C,IAAID,QAAQ,CAACE,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClCR,UAAU,CAACO,IAAI,CAAC;MAClB,CAAC,MAAM;QACLE,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEN,QAAQ,CAACO,UAAU,CAAC;MAChE;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD,CAAC,SAAS;MACRR,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMU,YAAY,GAAG,MAAOC,UAAU,IAAK;IACzC,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,qBAAqB,EAAE;QAClDS,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,IAAI,EAAEN,UAAU,CAACM,IAAI;UACrBC,WAAW,EAAEP,UAAU,CAACO,WAAW;UACnCC,SAAS,EAAER,UAAU,CAACQ,SAAS;UAC/BC,cAAc,EAAET,UAAU,CAACS,cAAc,IAAI;QAC/C,CAAC;MACH,CAAC,CAAC;MAEF,IAAIlB,QAAQ,CAACE,EAAE,EAAE;QACf,MAAMiB,SAAS,GAAG,MAAMnB,QAAQ,CAACI,IAAI,CAAC,CAAC;QACvC;QACAR,UAAU,CAACwB,WAAW,IAAI,CAAC,GAAGA,WAAW,EAAED,SAAS,CAAC,CAAC;QACtD,OAAOA,SAAS;MAClB,CAAC,MAAM;QACL,MAAME,SAAS,GAAG,MAAMrB,QAAQ,CAACsB,IAAI,CAAC,CAAC;QACvCjB,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEN,QAAQ,CAACuB,MAAM,EAAEF,SAAS,CAAC;QACrE,MAAM,IAAIG,KAAK,CAAC,4BAA4BxB,QAAQ,CAACuB,MAAM,EAAE,CAAC;MAChE;IACF,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF,CAAC;EAED,OAAO;IACLX,OAAO;IACPE,OAAO;IACPW,YAAY;IACZiB,cAAc,EAAE1B;EAClB,CAAC;AACH,CAAC;AAACL,EAAA,CAhEID,UAAU;AAkEhB,eAAeA,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}