{"ast":null,"code":"import apiService from './api';\nclass BackendAchievementService {\n  constructor() {\n    this.allAchievements = [];\n    this.playerAchievements = [];\n    this.playerStats = {};\n    this.loaded = false;\n  }\n  async loadData(username = 'testuser') {\n    try {\n      const [achievements, playerAchievements, stats] = await Promise.all([apiService.getAllAchievements(), apiService.getPlayerAchievements(username), apiService.getAchievementPlayerStats(username)]);\n      this.allAchievements = achievements;\n      this.playerAchievements = playerAchievements;\n      this.playerStats = stats;\n      this.loaded = true;\n      console.log('✅ Backend achievement data loaded:', {\n        achievements: achievements.length,\n        playerProgress: playerAchievements.length,\n        stats\n      });\n      return {\n        achievements,\n        playerAchievements,\n        stats\n      };\n    } catch (error) {\n      console.error('❌ Failed to load backend achievements:', error);\n      throw error;\n    }\n  }\n  isUnlocked(achievementId) {\n    const achievement = this.playerAchievements.find(a => a.id === achievementId);\n    return (achievement === null || achievement === void 0 ? void 0 : achievement.completed) || false;\n  }\n  getAchievementProgress(achievementId, userStats) {\n    const achievement = this.playerAchievements.find(a => a.id === achievementId);\n    if (achievement !== null && achievement !== void 0 && achievement.completed) return 1;\n    return ((achievement === null || achievement === void 0 ? void 0 : achievement.progress) || 0) / 100; // Convert percentage to decimal\n  }\n  getUnlockedAchievements() {\n    return this.playerAchievements.filter(a => a.completed).map(a => this.allAchievements.find(all => all.id === a.id)).filter(Boolean);\n  }\n  getLockedAchievements() {\n    return this.allAchievements.filter(a => !this.isUnlocked(a.id));\n  }\n  getInProgressAchievements() {\n    return this.playerAchievements.filter(a => !a.completed && a.progress > 0).map(a => ({\n      ...this.allAchievements.find(all => all.id === a.id),\n      progress: a.progress\n    })).filter(Boolean);\n  }\n  getStats() {\n    const unlocked = this.getUnlockedAchievements();\n    const total = this.allAchievements.length;\n    return {\n      total,\n      unlocked: unlocked.length,\n      percentage: total > 0 ? Math.round(unlocked.length / total * 100) : 0,\n      totalXP: this.playerStats.totalXp || 0,\n      byTier: {\n        common: unlocked.filter(a => a.tier === 'common').length,\n        uncommon: unlocked.filter(a => a.tier === 'uncommon').length,\n        rare: unlocked.filter(a => a.tier === 'rare').length,\n        legendary: unlocked.filter(a => a.tier === 'legendary').length\n      }\n    };\n  }\n}\nexport default new BackendAchievementService();","map":{"version":3,"names":["apiService","BackendAchievementService","constructor","allAchievements","playerAchievements","playerStats","loaded","loadData","username","achievements","stats","Promise","all","getAllAchievements","getPlayerAchievements","getAchievementPlayerStats","console","log","length","playerProgress","error","isUnlocked","achievementId","achievement","find","a","id","completed","getAchievementProgress","userStats","progress","getUnlockedAchievements","filter","map","Boolean","getLockedAchievements","getInProgressAchievements","getStats","unlocked","total","percentage","Math","round","totalXP","totalXp","byTier","common","tier","uncommon","rare","legendary"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/services/backendAchievementService.js"],"sourcesContent":["import apiService from './api';\n\nclass BackendAchievementService {\n  constructor() {\n    this.allAchievements = [];\n    this.playerAchievements = [];\n    this.playerStats = {};\n    this.loaded = false;\n  }\n\n  async loadData(username = 'testuser') {\n    try {\n      const [achievements, playerAchievements, stats] = await Promise.all([\n        apiService.getAllAchievements(),\n        apiService.getPlayerAchievements(username),\n        apiService.getAchievementPlayerStats(username)\n      ]);\n\n      this.allAchievements = achievements;\n      this.playerAchievements = playerAchievements;\n      this.playerStats = stats;\n      this.loaded = true;\n\n      console.log('✅ Backend achievement data loaded:', {\n        achievements: achievements.length,\n        playerProgress: playerAchievements.length,\n        stats\n      });\n\n      return { achievements, playerAchievements, stats };\n    } catch (error) {\n      console.error('❌ Failed to load backend achievements:', error);\n      throw error;\n    }\n  }\n\n  isUnlocked(achievementId) {\n    const achievement = this.playerAchievements.find(a => a.id === achievementId);\n    return achievement?.completed || false;\n  }\n\n  getAchievementProgress(achievementId, userStats) {\n    const achievement = this.playerAchievements.find(a => a.id === achievementId);\n    if (achievement?.completed) return 1;\n    \n    return (achievement?.progress || 0) / 100; // Convert percentage to decimal\n  }\n\n  getUnlockedAchievements() {\n    return this.playerAchievements\n      .filter(a => a.completed)\n      .map(a => this.allAchievements.find(all => all.id === a.id))\n      .filter(Boolean);\n  }\n\n  getLockedAchievements() {\n    return this.allAchievements.filter(a => !this.isUnlocked(a.id));\n  }\n\n  getInProgressAchievements() {\n    return this.playerAchievements\n      .filter(a => !a.completed && a.progress > 0)\n      .map(a => ({\n        ...this.allAchievements.find(all => all.id === a.id),\n        progress: a.progress\n      }))\n      .filter(Boolean);\n  }\n\n  getStats() {\n    const unlocked = this.getUnlockedAchievements();\n    const total = this.allAchievements.length;\n    \n    return {\n      total,\n      unlocked: unlocked.length,\n      percentage: total > 0 ? Math.round((unlocked.length / total) * 100) : 0,\n      totalXP: this.playerStats.totalXp || 0,\n      byTier: {\n        common: unlocked.filter(a => a.tier === 'common').length,\n        uncommon: unlocked.filter(a => a.tier === 'uncommon').length,\n        rare: unlocked.filter(a => a.tier === 'rare').length,\n        legendary: unlocked.filter(a => a.tier === 'legendary').length\n      }\n    };\n  }\n}\n\nexport default new BackendAchievementService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}