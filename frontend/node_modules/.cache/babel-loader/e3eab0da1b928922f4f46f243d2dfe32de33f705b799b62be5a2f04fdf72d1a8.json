{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useTasks = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const API_BASE = 'http://localhost:8080/api/tasks';\n\n  // Fetch all tasks\n  const fetchTasks = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_BASE}?username=user`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch tasks');\n      }\n      const data = await response.json();\n      setTasks(data);\n      setError(null);\n    } catch (err) {\n      console.error('Failed to fetch tasks:', err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Create new task\n  const createTask = async taskData => {\n    try {\n      const response = await fetch(`${API_BASE}?username=user`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(taskData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create task');\n      }\n      const newTask = await response.json();\n      setTasks(prevTasks => [...prevTasks, newTask]);\n      return newTask;\n    } catch (err) {\n      console.error('Failed to create task:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Update task (mainly for toggling completion)\n  const updateTask = async (taskId, updates) => {\n    try {\n      const response = await fetch(`${API_BASE}/${taskId}?username=user`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updates)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update task');\n      }\n      const updatedTask = await response.json();\n      setTasks(prevTasks => prevTasks.map(task => task.id === taskId ? updatedTask : task));\n      return updatedTask;\n    } catch (err) {\n      console.error('Failed to update task:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Delete task\n  const deleteTask = async taskId => {\n    try {\n      const response = await fetch(`${API_BASE}/${taskId}?username=user`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete task');\n      }\n      setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));\n    } catch (err) {\n      console.error('Failed to delete task:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Toggle task completion\n  const toggleTask = async taskId => {\n    const task = tasks.find(t => t.id === taskId);\n    if (task) {\n      await updateTask(taskId, {\n        ...task,\n        completed: !task.completed\n      });\n    }\n  };\n\n  // Fetch tasks on mount\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n  return {\n    tasks,\n    loading,\n    error,\n    createTask,\n    updateTask,\n    deleteTask,\n    toggleTask,\n    fetchTasks\n  };\n};\n_s(useTasks, \"qwRs5Xd4E7WtXCZK9zh6nomhOw4=\");\nexport default useTasks;","map":{"version":3,"names":["useState","useEffect","useTasks","_s","tasks","setTasks","loading","setLoading","error","setError","API_BASE","fetchTasks","response","fetch","ok","Error","data","json","err","console","message","createTask","taskData","method","headers","body","JSON","stringify","newTask","prevTasks","updateTask","taskId","updates","updatedTask","map","task","id","deleteTask","filter","toggleTask","find","t","completed"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/useTasks.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useTasks = () => {\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const API_BASE = 'http://localhost:8080/api/tasks';\n\n  // Fetch all tasks\n  const fetchTasks = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_BASE}?username=user`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch tasks');\n      }\n      \n      const data = await response.json();\n      setTasks(data);\n      setError(null);\n    } catch (err) {\n      console.error('Failed to fetch tasks:', err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Create new task\n  const createTask = async (taskData) => {\n    try {\n      const response = await fetch(`${API_BASE}?username=user`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(taskData),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create task');\n      }\n\n      const newTask = await response.json();\n      setTasks(prevTasks => [...prevTasks, newTask]);\n      return newTask;\n    } catch (err) {\n      console.error('Failed to create task:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Update task (mainly for toggling completion)\n  const updateTask = async (taskId, updates) => {\n    try {\n      const response = await fetch(`${API_BASE}/${taskId}?username=user`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updates),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update task');\n      }\n\n      const updatedTask = await response.json();\n      setTasks(prevTasks =>\n        prevTasks.map(task =>\n          task.id === taskId ? updatedTask : task\n        )\n      );\n      return updatedTask;\n    } catch (err) {\n      console.error('Failed to update task:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Delete task\n  const deleteTask = async (taskId) => {\n    try {\n      const response = await fetch(`${API_BASE}/${taskId}?username=user`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to delete task');\n      }\n\n      setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));\n    } catch (err) {\n      console.error('Failed to delete task:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Toggle task completion\n  const toggleTask = async (taskId) => {\n    const task = tasks.find(t => t.id === taskId);\n    if (task) {\n      await updateTask(taskId, { ...task, completed: !task.completed });\n    }\n  };\n\n  // Fetch tasks on mount\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  return {\n    tasks,\n    loading,\n    error,\n    createTask,\n    updateTask,\n    deleteTask,\n    toggleTask,\n    fetchTasks,\n  };\n};\n\nexport default useTasks;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}