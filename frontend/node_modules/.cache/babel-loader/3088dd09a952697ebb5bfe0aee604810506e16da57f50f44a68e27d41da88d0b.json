{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useNotes.js\nimport { useState, useEffect, useCallback } from 'react';\nimport apiService from '../services/api';\nexport const useNotes = () => {\n  _s();\n  const [notes, setNotes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchNotes = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await apiService.fetchNotes();\n      setNotes(data);\n    } catch (err) {\n      setError('Failed to fetch notes');\n      console.error('Error fetching notes:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const createNote = useCallback(async noteData => {\n    try {\n      setError(null);\n      const response = await apiService.createNote(noteData);\n      // Handle gaming response format from your backend\n      const newNote = response.data || response;\n      setNotes(prevNotes => [newNote, ...prevNotes]);\n      return newNote;\n    } catch (err) {\n      setError('Failed to create note');\n      throw err;\n    }\n  }, []);\n  const updateNote = useCallback(async (id, noteData) => {\n    try {\n      setError(null);\n      const response = await apiService.updateNote(id, noteData);\n      // Handle gaming response format from your backend\n      const updatedNote = response.data || response;\n      setNotes(prevNotes => prevNotes.map(note => note.id === id ? updatedNote : note));\n      return updatedNote;\n    } catch (err) {\n      setError('Failed to update note');\n      throw err;\n    }\n  }, []);\n  const deleteNote = useCallback(async id => {\n    try {\n      setError(null);\n      await apiService.deleteNote(id);\n      setNotes(prevNotes => prevNotes.filter(note => note.id !== id));\n    } catch (err) {\n      setError('Failed to delete note');\n      throw err;\n    }\n  }, []);\n  const searchNotes = useCallback(async query => {\n    try {\n      setLoading(true);\n      setError(null);\n      const results = await apiService.searchNotes(query);\n      setNotes(results);\n    } catch (err) {\n      setError('Failed to search notes');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    fetchNotes();\n  }, [fetchNotes]);\n  return {\n    notes,\n    loading,\n    error,\n    createNote,\n    updateNote,\n    deleteNote,\n    searchNotes,\n    refreshNotes: fetchNotes\n  };\n};\n_s(useNotes, \"KmB33CnzZqKGpgrbkmbZzMShUq4=\");","map":{"version":3,"names":["useState","useEffect","useCallback","apiService","useNotes","_s","notes","setNotes","loading","setLoading","error","setError","fetchNotes","data","err","console","createNote","noteData","response","newNote","prevNotes","updateNote","id","updatedNote","map","note","deleteNote","filter","searchNotes","query","results","refreshNotes"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/useNotes.js"],"sourcesContent":["// src/hooks/useNotes.js\nimport { useState, useEffect, useCallback } from 'react';\nimport apiService from '../services/api';\n\nexport const useNotes = () => {\n  const [notes, setNotes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const fetchNotes = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await apiService.fetchNotes();\n      setNotes(data);\n    } catch (err) {\n      setError('Failed to fetch notes');\n      console.error('Error fetching notes:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const createNote = useCallback(async (noteData) => {\n    try {\n      setError(null);\n      const response = await apiService.createNote(noteData);\n      // Handle gaming response format from your backend\n      const newNote = response.data || response;\n      setNotes(prevNotes => [newNote, ...prevNotes]);\n      return newNote;\n    } catch (err) {\n      setError('Failed to create note');\n      throw err;\n    }\n  }, []);\n\n  const updateNote = useCallback(async (id, noteData) => {\n    try {\n      setError(null);\n      const response = await apiService.updateNote(id, noteData);\n      // Handle gaming response format from your backend\n      const updatedNote = response.data || response;\n      setNotes(prevNotes => \n        prevNotes.map(note => \n          note.id === id ? updatedNote : note\n        )\n      );\n      return updatedNote;\n    } catch (err) {\n      setError('Failed to update note');\n      throw err;\n    }\n  }, []);\n\n  const deleteNote = useCallback(async (id) => {\n    try {\n      setError(null);\n      await apiService.deleteNote(id);\n      setNotes(prevNotes => \n        prevNotes.filter(note => note.id !== id)\n      );\n    } catch (err) {\n      setError('Failed to delete note');\n      throw err;\n    }\n  }, []);\n\n  const searchNotes = useCallback(async (query) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const results = await apiService.searchNotes(query);\n      setNotes(results);\n    } catch (err) {\n      setError('Failed to search notes');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchNotes();\n  }, [fetchNotes]);\n\n  return {\n    notes,\n    loading,\n    error,\n    createNote,\n    updateNote,\n    deleteNote,\n    searchNotes,\n    refreshNotes: fetchNotes,\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}