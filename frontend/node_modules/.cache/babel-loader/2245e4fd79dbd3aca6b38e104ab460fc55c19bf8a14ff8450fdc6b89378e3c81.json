{"ast":null,"code":"// src/services/api.js\nconst API_BASE = 'http://localhost:8080/api';\nconst apiService = {\n  // Notes API calls\n  async fetchNotes() {\n    const response = await fetch(`${API_BASE}/notes`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  async createNote(noteData) {\n    const response = await fetch(`${API_BASE}/notes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(noteData)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  async updateNote(id, noteData) {\n    const response = await fetch(`${API_BASE}/notes/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(noteData)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  async deleteNote(id) {\n    const response = await fetch(`${API_BASE}/notes/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return true;\n  },\n  async searchNotes(query) {\n    const response = await fetch(`${API_BASE}/notes/search?query=${encodeURIComponent(query)}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  // // Player API calls\n  // async getPlayerStats(username) {\n  //   const response = await fetch(`${API_BASE}/players/${username}`);\n  //   if (!response.ok) {\n  //     throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n  //   }\n  //   return response.json();\n  // },\n\n  async getTasks(username) {\n    const response = await fetch(`${API_BASE}/tasks?username=${username}`);\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    return response.json();\n  },\n  async getTaskLists(username) {\n    const response = await fetch(`${API_BASE}/task-lists?username=${username}`);\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    return response.json();\n  },\n  // =================== FOCUS SESSIONS API ===================\n\n  // Get focus sessions\n  async getFocusSessions(username, options = {}) {\n    const params = new URLSearchParams({\n      username\n    });\n    if (options.category) params.append('category', options.category);\n    if (options.activeOnly !== undefined) params.append('activeOnly', options.activeOnly);\n    const response = await fetch(`${API_BASE}/focus/sessions?${params}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  // Get single focus session\n  async getFocusSession(sessionId) {\n    const response = await fetch(`${API_BASE}/focus/sessions/${sessionId}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  // Create focus session\n  async createFocusSession(sessionData) {\n    const response = await fetch(`${API_BASE}/focus/sessions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(sessionData)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  // Update focus session\n  async updateFocusSession(sessionId, sessionData) {\n    const response = await fetch(`${API_BASE}/focus/sessions/${sessionId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(sessionData)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  // Delete focus session (deactivate)\n  async deleteFocusSession(sessionId) {\n    const response = await fetch(`${API_BASE}/focus/sessions/${sessionId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  // Get session stats\n  async getFocusSessionStats(username) {\n    const response = await fetch(`${API_BASE}/focus/sessions/stats?username=${username}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  // =================== FOCUS ENTRIES API ===================\n\n  // Get focus entries\n  async getFocusEntries(username, options = {}) {\n    const params = new URLSearchParams({\n      username\n    });\n    if (options.sessionId) params.append('sessionId', options.sessionId);\n    if (options.date) params.append('date', options.date);\n    if (options.startDate) params.append('startDate', options.startDate);\n    if (options.endDate) params.append('endDate', options.endDate);\n    const response = await fetch(`${API_BASE}/focus/entries?${params}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  // Create focus entry\n  async createFocusEntry(entryData) {\n    const response = await fetch(`${API_BASE}/focus/entries`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(entryData)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  // Update focus entry\n  async updateFocusEntry(entryId, entryData) {\n    const response = await fetch(`${API_BASE}/focus/entries/${entryId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(entryData)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  // Delete focus entry\n  async deleteFocusEntry(entryId) {\n    const response = await fetch(`${API_BASE}/focus/entries/${entryId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  // Get entry stats\n  async getFocusEntryStats(username, date = null) {\n    const params = new URLSearchParams({\n      username\n    });\n    if (date) params.append('date', date);\n    const response = await fetch(`${API_BASE}/focus/entries/stats?${params}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  // =================== FOCUS TRACKER API ===================\n\n  // Get focus tracker analytics\n  async getFocusTracker(username, period = 'week') {\n    const response = await fetch(`${API_BASE}/focus/tracker?username=${username}&period=${period}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  // Get daily focus tracker\n  async getDailyFocusTracker(username, date = null) {\n    const params = new URLSearchParams({\n      username\n    });\n    if (date) params.append('date', date);\n    const response = await fetch(`${API_BASE}/focus/tracker/daily?${params}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  // Get focus tracker range\n  async getFocusTrackerRange(username, startDate, endDate) {\n    const params = new URLSearchParams({\n      username,\n      startDate,\n      endDate\n    });\n    const response = await fetch(`${API_BASE}/focus/tracker/range?${params}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  // Get recent focus tracker\n  async getRecentFocusTracker(username, days = 7) {\n    const response = await fetch(`${API_BASE}/focus/tracker/recent?username=${username}&days=${days}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  // Get focus analytics\n  async getFocusAnalytics(username, period = 'week') {\n    const response = await fetch(`${API_BASE}/focus/tracker/analytics?username=${username}&period=${period}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  // Generate daily stats\n  async generateDailyFocusStats(username, date = null) {\n    const params = new URLSearchParams({\n      username\n    });\n    if (date) params.append('date', date);\n    const response = await fetch(`${API_BASE}/focus/tracker/generate?${params}`, {\n      method: 'POST'\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  // Update daily goal\n  async updateDailyGoal(username, date, goalMet) {\n    const params = new URLSearchParams({\n      username,\n      date,\n      goalMet\n    });\n    const response = await fetch(`${API_BASE}/focus/tracker/goal?${params}`, {\n      method: 'PUT'\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  // Get streak data\n  async getFocusStreaks(username) {\n    const response = await fetch(`${API_BASE}/focus/tracker/streaks?username=${username}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  // Get dashboard data\n  async getFocusDashboard(username) {\n    const response = await fetch(`${API_BASE}/focus/tracker/dashboard?username=${username}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  // Add this method:\n  async getAchievements(username) {\n    try {\n      const response = await fetch(`${API_BASE}/achievements?username=${username || 'user'}`);\n      if (!response.ok) {\n        // Return mock data if API fails\n        return {\n          achievements: [],\n          summary: {\n            completed: 0,\n            inProgress: 0,\n            locked: 0\n          }\n        };\n      }\n      return response.json();\n    } catch (error) {\n      console.warn('Achievements API not available, using mock data');\n      return {\n        achievements: [],\n        summary: {\n          completed: 0,\n          inProgress: 0,\n          locked: 0\n        }\n      };\n    }\n  },\n  // Fix this method:\n  async getPlayerStats(username) {\n    if (!username || username === 'undefined') {\n      console.warn('No username provided for player stats');\n      return {\n        level: 1,\n        xp: 0,\n        totalNotes: 0,\n        totalTasks: 0\n      };\n    }\n    try {\n      const response = await fetch(`${API_BASE}/players/${username}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          return {\n            level: 1,\n            xp: 0,\n            totalNotes: 0,\n            totalTasks: 0\n          };\n        }\n        throw new Error('Failed to fetch player stats');\n      }\n      return response.json();\n    } catch (error) {\n      console.warn('Player stats API not available, using defaults');\n      return {\n        level: 1,\n        xp: 0,\n        totalNotes: 0,\n        totalTasks: 0\n      };\n    }\n  },\n  // =================== FOCUS CATEGORIES API ===================\n\n  // Save focus session with category\n  async saveFocusSessionWithCategory(sessionData) {\n    const response = await fetch(`${API_BASE}/focus/sessions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        ...sessionData,\n        // Ensure category is included in the session data\n        category: sessionData.category || 'OTHER'\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  // Get categories with XP totals\n  async getFocusCategories(username) {\n    try {\n      // First try to get from backend\n      const response = await fetch(`${API_BASE}/focus/sessions/stats?username=${username}`);\n      if (!response.ok) {\n        throw new Error('Backend not available');\n      }\n      const stats = await response.json();\n\n      // Convert backend stats to category format\n      const categories = [];\n      if (stats.categoryBreakdown) {\n        Object.entries(stats.categoryBreakdown).forEach(([categoryName, minutes]) => {\n          categories.push({\n            id: categoryName.toLowerCase(),\n            name: categoryName,\n            xp: minutes,\n            iconName: this.getCategoryIcon(categoryName)\n          });\n        });\n      }\n      return categories;\n    } catch (error) {\n      console.warn('Using localStorage categories as fallback');\n      // Fallback to localStorage\n      const saved = localStorage.getItem('focusCategories');\n      return saved ? JSON.parse(saved) : [];\n    }\n  },\n  // Helper method to get icon for category\n  getCategoryIcon(categoryName) {\n    const iconMap = {\n      'WORK': 'Briefcase',\n      'STUDY': 'BookOpen',\n      'LEARNING': 'BookOpen',\n      'CODE': 'Code',\n      'CREATE': 'Palette',\n      'CREATIVE': 'Palette',\n      'PERSONAL': 'User',\n      'HEALTH': 'User',\n      'OTHER': 'User'\n    };\n    return iconMap[categoryName.toUpperCase()] || 'User';\n  }\n};\nexport default apiService;\n\n// // In your frontend api.js, make sure this method has proper error handling:\n// export const getPlayerStats = async (username) => {\n//   if (!username) {\n//     console.log(\"No username provided for player stats\");\n//     return {\n//       completedAchievements: 0,\n//       totalAchievements: 0,\n//       totalXp: 0,\n//       completionPercentage: 0.0\n//     };\n//   }\n\n//   try {\n//     const response = await fetch(`${API_BASE}/achievements/player/${username}/stats`);  // CHANGED: API_BASE_URL to API_BASE\n//     if (!response.ok) throw new Error('Failed to fetch player stats');\n//     return await response.json();\n//   } catch (error) {\n//     console.error('Error fetching player stats:', error);\n//     return {\n//       completedAchievements: 0,\n//       totalAchievements: 0,\n//       totalXp: 0,\n//       completionPercentage: 0.0\n//     };\n//   }\n// };","map":{"version":3,"names":["API_BASE","apiService","fetchNotes","response","fetch","ok","Error","status","json","createNote","noteData","method","headers","body","JSON","stringify","updateNote","id","deleteNote","searchNotes","query","encodeURIComponent","getTasks","username","statusText","getTaskLists","getFocusSessions","options","params","URLSearchParams","category","append","activeOnly","undefined","getFocusSession","sessionId","createFocusSession","sessionData","updateFocusSession","deleteFocusSession","getFocusSessionStats","getFocusEntries","date","startDate","endDate","createFocusEntry","entryData","updateFocusEntry","entryId","deleteFocusEntry","getFocusEntryStats","getFocusTracker","period","getDailyFocusTracker","getFocusTrackerRange","getRecentFocusTracker","days","getFocusAnalytics","generateDailyFocusStats","updateDailyGoal","goalMet","getFocusStreaks","getFocusDashboard","getAchievements","achievements","summary","completed","inProgress","locked","error","console","warn","getPlayerStats","level","xp","totalNotes","totalTasks","saveFocusSessionWithCategory","getFocusCategories","stats","categories","categoryBreakdown","Object","entries","forEach","categoryName","minutes","push","toLowerCase","name","iconName","getCategoryIcon","saved","localStorage","getItem","parse","iconMap","toUpperCase"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\nconst API_BASE = 'http://localhost:8080/api';\n\nconst apiService = {\n  // Notes API calls\n  async fetchNotes() {\n    const response = await fetch(`${API_BASE}/notes`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  async createNote(noteData) {\n    const response = await fetch(`${API_BASE}/notes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(noteData),\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  async updateNote(id, noteData) {\n    const response = await fetch(`${API_BASE}/notes/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(noteData),\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  async deleteNote(id) {\n    const response = await fetch(`${API_BASE}/notes/${id}`, {\n      method: 'DELETE',\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return true;\n  },\n\n  async searchNotes(query) {\n    const response = await fetch(\n      `${API_BASE}/notes/search?query=${encodeURIComponent(query)}`\n    );\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // // Player API calls\n  // async getPlayerStats(username) {\n  //   const response = await fetch(`${API_BASE}/players/${username}`);\n  //   if (!response.ok) {\n  //     throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n  //   }\n  //   return response.json();\n  // },\n\n  async getTasks(username) {\n    const response = await fetch(`${API_BASE}/tasks?username=${username}`);\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    return response.json();\n  },\n\n  async getTaskLists(username) {\n    const response = await fetch(\n      `${API_BASE}/task-lists?username=${username}`\n    );\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    return response.json();\n  },\n\n  // =================== FOCUS SESSIONS API ===================\n  \n  // Get focus sessions\n  async getFocusSessions(username, options = {}) {\n    const params = new URLSearchParams({ username });\n    if (options.category) params.append('category', options.category);\n    if (options.activeOnly !== undefined) params.append('activeOnly', options.activeOnly);\n    \n    const response = await fetch(`${API_BASE}/focus/sessions?${params}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Get single focus session\n  async getFocusSession(sessionId) {\n    const response = await fetch(`${API_BASE}/focus/sessions/${sessionId}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Create focus session\n  async createFocusSession(sessionData) {\n    const response = await fetch(`${API_BASE}/focus/sessions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(sessionData),\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Update focus session\n  async updateFocusSession(sessionId, sessionData) {\n    const response = await fetch(`${API_BASE}/focus/sessions/${sessionId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(sessionData),\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Delete focus session (deactivate)\n  async deleteFocusSession(sessionId) {\n    const response = await fetch(`${API_BASE}/focus/sessions/${sessionId}`, {\n      method: 'DELETE',\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Get session stats\n  async getFocusSessionStats(username) {\n    const response = await fetch(`${API_BASE}/focus/sessions/stats?username=${username}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // =================== FOCUS ENTRIES API ===================\n\n  // Get focus entries\n  async getFocusEntries(username, options = {}) {\n    const params = new URLSearchParams({ username });\n    if (options.sessionId) params.append('sessionId', options.sessionId);\n    if (options.date) params.append('date', options.date);\n    if (options.startDate) params.append('startDate', options.startDate);\n    if (options.endDate) params.append('endDate', options.endDate);\n    \n    const response = await fetch(`${API_BASE}/focus/entries?${params}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Create focus entry\n  async createFocusEntry(entryData) {\n    const response = await fetch(`${API_BASE}/focus/entries`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(entryData),\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Update focus entry\n  async updateFocusEntry(entryId, entryData) {\n    const response = await fetch(`${API_BASE}/focus/entries/${entryId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(entryData),\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Delete focus entry\n  async deleteFocusEntry(entryId) {\n    const response = await fetch(`${API_BASE}/focus/entries/${entryId}`, {\n      method: 'DELETE',\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Get entry stats\n  async getFocusEntryStats(username, date = null) {\n    const params = new URLSearchParams({ username });\n    if (date) params.append('date', date);\n    \n    const response = await fetch(`${API_BASE}/focus/entries/stats?${params}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // =================== FOCUS TRACKER API ===================\n\n  // Get focus tracker analytics\n  async getFocusTracker(username, period = 'week') {\n    const response = await fetch(`${API_BASE}/focus/tracker?username=${username}&period=${period}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Get daily focus tracker\n  async getDailyFocusTracker(username, date = null) {\n    const params = new URLSearchParams({ username });\n    if (date) params.append('date', date);\n    \n    const response = await fetch(`${API_BASE}/focus/tracker/daily?${params}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Get focus tracker range\n  async getFocusTrackerRange(username, startDate, endDate) {\n    const params = new URLSearchParams({ username, startDate, endDate });\n    \n    const response = await fetch(`${API_BASE}/focus/tracker/range?${params}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Get recent focus tracker\n  async getRecentFocusTracker(username, days = 7) {\n    const response = await fetch(`${API_BASE}/focus/tracker/recent?username=${username}&days=${days}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Get focus analytics\n  async getFocusAnalytics(username, period = 'week') {\n    const response = await fetch(`${API_BASE}/focus/tracker/analytics?username=${username}&period=${period}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Generate daily stats\n  async generateDailyFocusStats(username, date = null) {\n    const params = new URLSearchParams({ username });\n    if (date) params.append('date', date);\n    \n    const response = await fetch(`${API_BASE}/focus/tracker/generate?${params}`, {\n      method: 'POST',\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Update daily goal\n  async updateDailyGoal(username, date, goalMet) {\n    const params = new URLSearchParams({ username, date, goalMet });\n    \n    const response = await fetch(`${API_BASE}/focus/tracker/goal?${params}`, {\n      method: 'PUT',\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Get streak data\n  async getFocusStreaks(username) {\n    const response = await fetch(`${API_BASE}/focus/tracker/streaks?username=${username}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Get dashboard data\n  async getFocusDashboard(username) {\n    const response = await fetch(`${API_BASE}/focus/tracker/dashboard?username=${username}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Add this method:\n  async getAchievements(username) {\n    try {\n      const response = await fetch(`${API_BASE}/achievements?username=${username || 'user'}`);\n      if (!response.ok) {\n        // Return mock data if API fails\n        return {\n          achievements: [],\n          summary: { completed: 0, inProgress: 0, locked: 0 }\n        };\n      }\n      return response.json();\n    } catch (error) {\n      console.warn('Achievements API not available, using mock data');\n      return {\n        achievements: [],\n        summary: { completed: 0, inProgress: 0, locked: 0 }\n      };\n    }\n  },\n\n  // Fix this method:\n  async getPlayerStats(username) {\n    if (!username || username === 'undefined') {\n      console.warn('No username provided for player stats');\n      return { level: 1, xp: 0, totalNotes: 0, totalTasks: 0 };\n    }\n    \n    try {\n      const response = await fetch(`${API_BASE}/players/${username}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          return { level: 1, xp: 0, totalNotes: 0, totalTasks: 0 };\n        }\n        throw new Error('Failed to fetch player stats');\n      }\n      return response.json();\n    } catch (error) {\n      console.warn('Player stats API not available, using defaults');\n      return { level: 1, xp: 0, totalNotes: 0, totalTasks: 0 };\n    }\n  },\n\n  // =================== FOCUS CATEGORIES API ===================\n  \n  // Save focus session with category\n  async saveFocusSessionWithCategory(sessionData) {\n    const response = await fetch(`${API_BASE}/focus/sessions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        ...sessionData,\n        // Ensure category is included in the session data\n        category: sessionData.category || 'OTHER'\n      }),\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Get categories with XP totals\n  async getFocusCategories(username) {\n    try {\n      // First try to get from backend\n      const response = await fetch(`${API_BASE}/focus/sessions/stats?username=${username}`);\n      if (!response.ok) {\n        throw new Error('Backend not available');\n      }\n      \n      const stats = await response.json();\n      \n      // Convert backend stats to category format\n      const categories = [];\n      if (stats.categoryBreakdown) {\n        Object.entries(stats.categoryBreakdown).forEach(([categoryName, minutes]) => {\n          categories.push({\n            id: categoryName.toLowerCase(),\n            name: categoryName,\n            xp: minutes,\n            iconName: this.getCategoryIcon(categoryName)\n          });\n        });\n      }\n      \n      return categories;\n    } catch (error) {\n      console.warn('Using localStorage categories as fallback');\n      // Fallback to localStorage\n      const saved = localStorage.getItem('focusCategories');\n      return saved ? JSON.parse(saved) : [];\n    }\n  },\n\n  // Helper method to get icon for category\n  getCategoryIcon(categoryName) {\n    const iconMap = {\n      'WORK': 'Briefcase',\n      'STUDY': 'BookOpen',\n      'LEARNING': 'BookOpen',\n      'CODE': 'Code',\n      'CREATE': 'Palette',\n      'CREATIVE': 'Palette',\n      'PERSONAL': 'User',\n      'HEALTH': 'User',\n      'OTHER': 'User'\n    };\n    return iconMap[categoryName.toUpperCase()] || 'User';\n  },\n};\n\nexport default apiService;\n\n// // In your frontend api.js, make sure this method has proper error handling:\n// export const getPlayerStats = async (username) => {\n//   if (!username) {\n//     console.log(\"No username provided for player stats\");\n//     return {\n//       completedAchievements: 0,\n//       totalAchievements: 0,\n//       totalXp: 0,\n//       completionPercentage: 0.0\n//     };\n//   }\n  \n//   try {\n//     const response = await fetch(`${API_BASE}/achievements/player/${username}/stats`);  // CHANGED: API_BASE_URL to API_BASE\n//     if (!response.ok) throw new Error('Failed to fetch player stats');\n//     return await response.json();\n//   } catch (error) {\n//     console.error('Error fetching player stats:', error);\n//     return {\n//       completedAchievements: 0,\n//       totalAchievements: 0,\n//       totalXp: 0,\n//       completionPercentage: 0.0\n//     };\n//   }\n// };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}