{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import apiService from'../services/api';export const useFocusTracker=username=>{const[trackerData,setTrackerData]=useState(null);const[analytics,setAnalytics]=useState(null);const[streaks,setStreaks]=useState({currentStreak:0,bestStreak:0});const[loading,setLoading]=useState(false);const[error,setError]=useState(null);// Load today's tracker data\nconst loadTodayTracker=useCallback(async()=>{if(!username)return;setLoading(true);setError(null);try{const today=new Date().toISOString().split('T')[0];const data=await apiService.getDailyFocusTracker(username,today);setTrackerData(data);}catch(err){setError(err.message);console.error('Error loading today tracker:',err);}finally{setLoading(false);}},[username]);// Load analytics for a period\nconst loadAnalytics=useCallback(async function(){let period=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'week';if(!username)return;setLoading(true);setError(null);try{const data=await apiService.getFocusAnalytics(username,period);setAnalytics(data);}catch(err){setError(err.message);console.error('Error loading analytics:',err);}finally{setLoading(false);}},[username]);// Load streak data\nconst loadStreaks=useCallback(async()=>{if(!username)return;try{const data=await apiService.getFocusStreaks(username);setStreaks(data);}catch(err){console.error('Error loading streaks:',err);}},[username]);// Load dashboard data (combines multiple data sources)\nconst loadDashboard=useCallback(async()=>{if(!username)return;setLoading(true);setError(null);try{const data=await apiService.getFocusDashboard(username);setTrackerData(data.today);setAnalytics(data.weekAnalytics);setStreaks({currentStreak:data.currentStreak,bestStreak:data.bestStreak});}catch(err){setError(err.message);console.error('Error loading dashboard:',err);}finally{setLoading(false);}},[username]);// Generate daily stats\nconst generateDailyStats=useCallback(async function(){let date=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;if(!username)return;try{const data=await apiService.generateDailyFocusStats(username,date);if(!date||date===new Date().toISOString().split('T')[0]){setTrackerData(data);}return data;}catch(err){console.error('Error generating daily stats:',err);throw err;}},[username]);// Update daily goal\nconst updateDailyGoal=useCallback(async(date,goalMet)=>{if(!username)return;try{await apiService.updateDailyGoal(username,date,goalMet);// Refresh today's data if updating today\nif(date===new Date().toISOString().split('T')[0]){await loadTodayTracker();}}catch(err){console.error('Error updating daily goal:',err);throw err;}},[username,loadTodayTracker]);// Get tracker range\nconst getTrackerRange=useCallback(async(startDate,endDate)=>{if(!username)return[];try{return await apiService.getFocusTrackerRange(username,startDate,endDate);}catch(err){console.error('Error getting tracker range:',err);return[];}},[username]);// Get recent tracker data\nconst getRecentTracker=useCallback(async function(){let days=arguments.length>0&&arguments[0]!==undefined?arguments[0]:7;if(!username)return[];try{return await apiService.getRecentFocusTracker(username,days);}catch(err){console.error('Error getting recent tracker:',err);return[];}},[username]);// Auto-refresh today's stats when focus entries are created\nconst refreshTodayStats=useCallback(()=>{generateDailyStats();},[generateDailyStats]);// Load initial data\nuseEffect(()=>{if(username){loadDashboard();}},[username,loadDashboard]);return{trackerData,analytics,streaks,loading,error,loadTodayTracker,loadAnalytics,loadStreaks,loadDashboard,generateDailyStats,updateDailyGoal,getTrackerRange,getRecentTracker,refreshTodayStats};};// Add default export for backward compatibility\nexport default useFocusTracker;","map":{"version":3,"names":["useState","useEffect","useCallback","apiService","useFocusTracker","username","trackerData","setTrackerData","analytics","setAnalytics","streaks","setStreaks","currentStreak","bestStreak","loading","setLoading","error","setError","loadTodayTracker","today","Date","toISOString","split","data","getDailyFocusTracker","err","message","console","loadAnalytics","period","arguments","length","undefined","getFocusAnalytics","loadStreaks","getFocusStreaks","loadDashboard","getFocusDashboard","weekAnalytics","generateDailyStats","date","generateDailyFocusStats","updateDailyGoal","goalMet","getTrackerRange","startDate","endDate","getFocusTrackerRange","getRecentTracker","days","getRecentFocusTracker","refreshTodayStats"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/useFocusTracker.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport apiService from '../services/api';\n\nexport const useFocusTracker = (username) => {\n  const [trackerData, setTrackerData] = useState(null);\n  const [analytics, setAnalytics] = useState(null);\n  const [streaks, setStreaks] = useState({ currentStreak: 0, bestStreak: 0 });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Load today's tracker data\n  const loadTodayTracker = useCallback(async () => {\n    if (!username) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const today = new Date().toISOString().split('T')[0];\n      const data = await apiService.getDailyFocusTracker(username, today);\n      setTrackerData(data);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error loading today tracker:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [username]);\n\n  // Load analytics for a period\n  const loadAnalytics = useCallback(async (period = 'week') => {\n    if (!username) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const data = await apiService.getFocusAnalytics(username, period);\n      setAnalytics(data);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error loading analytics:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [username]);\n\n  // Load streak data\n  const loadStreaks = useCallback(async () => {\n    if (!username) return;\n    \n    try {\n      const data = await apiService.getFocusStreaks(username);\n      setStreaks(data);\n    } catch (err) {\n      console.error('Error loading streaks:', err);\n    }\n  }, [username]);\n\n  // Load dashboard data (combines multiple data sources)\n  const loadDashboard = useCallback(async () => {\n    if (!username) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const data = await apiService.getFocusDashboard(username);\n      setTrackerData(data.today);\n      setAnalytics(data.weekAnalytics);\n      setStreaks({\n        currentStreak: data.currentStreak,\n        bestStreak: data.bestStreak\n      });\n    } catch (err) {\n      setError(err.message);\n      console.error('Error loading dashboard:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [username]);\n\n  // Generate daily stats\n  const generateDailyStats = useCallback(async (date = null) => {\n    if (!username) return;\n    \n    try {\n      const data = await apiService.generateDailyFocusStats(username, date);\n      if (!date || date === new Date().toISOString().split('T')[0]) {\n        setTrackerData(data);\n      }\n      return data;\n    } catch (err) {\n      console.error('Error generating daily stats:', err);\n      throw err;\n    }\n  }, [username]);\n\n  // Update daily goal\n  const updateDailyGoal = useCallback(async (date, goalMet) => {\n    if (!username) return;\n    \n    try {\n      await apiService.updateDailyGoal(username, date, goalMet);\n      // Refresh today's data if updating today\n      if (date === new Date().toISOString().split('T')[0]) {\n        await loadTodayTracker();\n      }\n    } catch (err) {\n      console.error('Error updating daily goal:', err);\n      throw err;\n    }\n  }, [username, loadTodayTracker]);\n\n  // Get tracker range\n  const getTrackerRange = useCallback(async (startDate, endDate) => {\n    if (!username) return [];\n    \n    try {\n      return await apiService.getFocusTrackerRange(username, startDate, endDate);\n    } catch (err) {\n      console.error('Error getting tracker range:', err);\n      return [];\n    }\n  }, [username]);\n\n  // Get recent tracker data\n  const getRecentTracker = useCallback(async (days = 7) => {\n    if (!username) return [];\n    \n    try {\n      return await apiService.getRecentFocusTracker(username, days);\n    } catch (err) {\n      console.error('Error getting recent tracker:', err);\n      return [];\n    }\n  }, [username]);\n\n  // Auto-refresh today's stats when focus entries are created\n  const refreshTodayStats = useCallback(() => {\n    generateDailyStats();\n  }, [generateDailyStats]);\n\n  // Load initial data\n  useEffect(() => {\n    if (username) {\n      loadDashboard();\n    }\n  }, [username, loadDashboard]);\n\n  return {\n    trackerData,\n    analytics,\n    streaks,\n    loading,\n    error,\n    loadTodayTracker,\n    loadAnalytics,\n    loadStreaks,\n    loadDashboard,\n    generateDailyStats,\n    updateDailyGoal,\n    getTrackerRange,\n    getRecentTracker,\n    refreshTodayStats\n  };\n};\n\n// Add default export for backward compatibility\nexport default useFocusTracker;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}