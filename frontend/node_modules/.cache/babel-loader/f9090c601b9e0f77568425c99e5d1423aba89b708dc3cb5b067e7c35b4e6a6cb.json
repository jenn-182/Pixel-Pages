{"ast":null,"code":"import apiService from './api';\nimport { allAchievements } from '../data/achievements';\nclass BackendAchievementService {\n  constructor() {\n    this.allAchievements = [];\n    this.playerAchievements = [];\n    this.playerStats = {};\n    this.loaded = false;\n  }\n  getUnlockedAchievements() {\n    if (!this.loaded) {\n      console.warn('‚ö†Ô∏è Backend achievement service not loaded yet');\n      return [];\n    }\n    console.log('üîç DEBUG: Total playerAchievements:', this.playerAchievements.length);\n    console.log('üîç DEBUG: Sample achievement:', this.playerAchievements[0]);\n\n    // API returns achievements with 'completed' field and 'id' field\n    const unlockedAchievements = this.playerAchievements.filter(achievement => achievement.completed === true).map(achievement => ({\n      ...achievement,\n      unlockedAt: achievement.unlockedAt || new Date().toISOString()\n    }));\n    console.log('üîì Found unlocked achievements:', unlockedAchievements.length);\n    console.log('üîì Unlocked IDs:', unlockedAchievements.map(a => a.id));\n    return unlockedAchievements;\n  }\n  getLockedAchievements() {\n    if (!this.loaded) {\n      console.warn('‚ö†Ô∏è Backend achievement service not loaded yet');\n      return [];\n    }\n\n    // API returns all achievements, filter out the completed ones\n    return this.playerAchievements.filter(achievement => achievement.completed !== true);\n  }\n  getInProgressAchievements() {\n    if (!this.loaded) {\n      console.warn('‚ö†Ô∏è Backend achievement service not loaded yet');\n      return [];\n    }\n\n    // API returns achievements - filter for ones with progress > 0 but not completed\n    const inProgressAchievements = this.playerAchievements.filter(achievement => achievement.progress > 0 && achievement.completed !== true);\n    console.log('üìà Found in-progress achievements:', inProgressAchievements.length);\n    console.log('üìà In-progress sample:', inProgressAchievements.slice(0, 3).map(a => ({\n      id: a.id,\n      progress: a.progress,\n      maxProgress: a.maxProgress,\n      completed: a.completed\n    })));\n    return inProgressAchievements;\n  }\n\n  // Load player data from localStorage\n  loadPlayerDataFromLocalStorage() {\n    console.log('üîÑ LOADING PLAYER DATA FROM LOCALSTORAGE');\n\n    // Load unlocked achievements from localStorage and filter out nulls\n    const unlockedIds = JSON.parse(localStorage.getItem('unlockedAchievements') || '[]').filter(id => id !== null && id !== undefined);\n    const achievementData = JSON.parse(localStorage.getItem('achievementData') || '{}');\n    console.log('üì¶ LocalStorage player data:', {\n      unlockedIds,\n      achievementData\n    });\n\n    // üîç DEBUG: Check if the achievement IDs from localStorage actually exist\n    unlockedIds.forEach(id => {\n      const exists = this.allAchievements.find(a => a.id === id);\n      if (!exists) {\n        console.warn(`‚ö†Ô∏è Achievement ${id} from localStorage not found in allAchievements`);\n        console.log('Available achievement IDs starting with FIRST:', this.allAchievements.filter(a => a.id.includes('FIRST')).map(a => a.id));\n      }\n    });\n\n    // Convert to player achievement format\n    this.playerAchievements = unlockedIds.map(achievementId => {\n      var _achievementData$achi;\n      return {\n        achievementId,\n        unlocked: true,\n        progress: 100,\n        unlockedAt: ((_achievementData$achi = achievementData[achievementId]) === null || _achievementData$achi === void 0 ? void 0 : _achievementData$achi.unlockedAt) || new Date().toISOString()\n      };\n    });\n\n    // Mock player stats\n    this.playerStats = {\n      totalNotes: 0,\n      totalWords: 0,\n      completedAchievements: unlockedIds.length,\n      totalSessions: 0,\n      totalFocusTime: 0,\n      totalXp: unlockedIds.length * 100 // 100 XP per achievement\n    };\n    console.log('‚úÖ Loaded player data from localStorage:', {\n      playerAchievements: this.playerAchievements.length,\n      unlockedCount: unlockedIds.length\n    });\n  }\n\n  // NEW: Load from localStorage if backend fails completely\n  loadFromLocalStorage() {\n    console.log('üîÑ LOADING EVERYTHING FROM LOCALSTORAGE');\n\n    // Use local achievements data\n    this.allAchievements = allAchievements;\n\n    // Load player data\n    this.loadPlayerDataFromLocalStorage();\n    this.loaded = true;\n    console.log('‚úÖ Loaded everything from localStorage:', {\n      allAchievements: this.allAchievements.length,\n      playerAchievements: this.playerAchievements.length\n    });\n  }\n  async loadData(username = 'Jroc_182') {\n    console.log('üöÄ BACKEND SERVICE: Starting loadData for', username);\n    try {\n      var _this$allAchievements, _this$playerAchieveme;\n      console.log('üîÑ BACKEND SERVICE: Loading data for', username);\n\n      // Try to load achievements from API\n      let achievements = [];\n      try {\n        var _achievements;\n        achievements = await apiService.getAllAchievements();\n        console.log('‚úÖ Loaded achievements from API:', ((_achievements = achievements) === null || _achievements === void 0 ? void 0 : _achievements.length) || 0);\n      } catch (error) {\n        console.warn('‚ö†Ô∏è Failed to load achievements from API, using local data');\n        achievements = allAchievements;\n      }\n\n      // Try to load player data from API\n      let playerAchievements = [];\n      let stats = {};\n      try {\n        console.log('üì° Fetching player achievements and stats from API...');\n        const [playerAchievementsData, statsData] = await Promise.all([apiService.getPlayerAchievements(username), apiService.getAchievementPlayerStats(username)]);\n        playerAchievements = playerAchievementsData || [];\n        stats = statsData || {};\n        console.log('‚úÖ Loaded player data from API:', {\n          playerAchievementsCount: playerAchievements.length,\n          completedCount: playerAchievements.filter(a => a.completed).length,\n          stats\n        });\n      } catch (error) {\n        console.warn('‚ö†Ô∏è Failed to load player data from API, using localStorage');\n        console.error('API Error:', error);\n        // Don't load from localStorage here yet - we'll do it below\n      }\n\n      // Set the achievements data (either from API or local)\n      this.allAchievements = achievements;\n\n      // Check if we got meaningful player data from API\n      const hasCompletedAchievements = playerAchievements.some(a => a.completed === true);\n      const hasValidStats = Object.keys(stats).length > 0 && stats.completedAchievements > 0;\n      console.log('üîç CONDITION CHECK:', {\n        playerAchievementsLength: playerAchievements.length,\n        hasCompletedAchievements,\n        completedCount: playerAchievements.filter(a => a.completed).length,\n        hasValidStats,\n        statsKeys: Object.keys(stats),\n        statsCompletedAchievements: stats.completedAchievements\n      });\n      if (hasCompletedAchievements || hasValidStats) {\n        console.log('üì° Using API player data - found completed achievements or valid stats');\n        console.log('   - completed achievements:', playerAchievements.filter(a => a.completed).length);\n        console.log('   - stats:', stats);\n        this.playerAchievements = playerAchievements;\n        this.playerStats = stats;\n      } else {\n        console.log('üíæ No meaningful API player data found, loading from localStorage');\n        console.log('   - Reason: hasCompletedAchievements =', hasCompletedAchievements, ', hasValidStats =', hasValidStats);\n        this.loadPlayerDataFromLocalStorage();\n      }\n      this.loaded = true;\n      console.log('üîç BACKEND SERVICE: Final data loaded:');\n      console.log('   - achievements:', ((_this$allAchievements = this.allAchievements) === null || _this$allAchievements === void 0 ? void 0 : _this$allAchievements.length) || 0);\n      console.log('   - playerAchievements:', ((_this$playerAchieveme = this.playerAchievements) === null || _this$playerAchieveme === void 0 ? void 0 : _this$playerAchieveme.length) || 0);\n      console.log('   - stats:', this.playerStats);\n      console.log('‚úÖ Backend achievement data loaded for', username);\n      return {\n        achievements: this.allAchievements,\n        playerAchievements: this.playerAchievements,\n        stats: this.playerStats\n      };\n    } catch (error) {\n      console.error('‚ùå Failed to load backend achievements:', error);\n\n      // üîÑ COMPLETE FALLBACK: Load everything from localStorage\n      console.log('üîÑ COMPLETE BACKEND FAILURE: Loading everything from localStorage');\n      this.loadFromLocalStorage();\n      return {\n        achievements: this.allAchievements,\n        playerAchievements: this.playerAchievements,\n        stats: this.playerStats\n      };\n    }\n  }\n  isUnlocked(achievementId) {\n    if (!this.loaded) return false;\n    const achievement = this.playerAchievements.find(a => a.id === achievementId);\n    return (achievement === null || achievement === void 0 ? void 0 : achievement.completed) || false;\n  }\n  unlockAchievement(achievementId) {\n    // Find or create player achievement\n    let playerAch = this.playerAchievements.find(pa => pa.achievementId === achievementId);\n    if (!playerAch) {\n      playerAch = {\n        achievementId,\n        progress: 100,\n        unlocked: true,\n        unlockedAt: new Date().toISOString()\n      };\n      this.playerAchievements.push(playerAch);\n    } else {\n      playerAch.unlocked = true;\n      playerAch.progress = 100;\n      playerAch.unlockedAt = new Date().toISOString();\n    }\n    console.log(`üèÜ Unlocked achievement: ${achievementId}`);\n  }\n  getStats() {\n    if (!this.loaded) {\n      return {\n        total: 0,\n        unlocked: 0,\n        locked: 0,\n        inProgress: 0,\n        completionRate: 0\n      };\n    }\n    const unlockedCount = this.getUnlockedAchievements().length;\n    const totalCount = this.allAchievements.length;\n    const inProgressCount = this.getInProgressAchievements().length;\n    const lockedCount = totalCount - unlockedCount;\n    return {\n      total: totalCount,\n      unlocked: unlockedCount,\n      locked: lockedCount,\n      inProgress: inProgressCount,\n      completionRate: totalCount > 0 ? Math.round(unlockedCount / totalCount * 100) : 0\n    };\n  }\n}\n\n// Export singleton instance\nconst backendAchievementService = new BackendAchievementService();\nexport default backendAchievementService;","map":{"version":3,"names":["apiService","allAchievements","BackendAchievementService","constructor","playerAchievements","playerStats","loaded","getUnlockedAchievements","console","warn","log","length","unlockedAchievements","filter","achievement","completed","map","unlockedAt","Date","toISOString","a","id","getLockedAchievements","getInProgressAchievements","inProgressAchievements","progress","slice","maxProgress","loadPlayerDataFromLocalStorage","unlockedIds","JSON","parse","localStorage","getItem","undefined","achievementData","forEach","exists","find","includes","achievementId","_achievementData$achi","unlocked","totalNotes","totalWords","completedAchievements","totalSessions","totalFocusTime","totalXp","unlockedCount","loadFromLocalStorage","loadData","username","_this$allAchievements","_this$playerAchieveme","achievements","_achievements","getAllAchievements","error","stats","playerAchievementsData","statsData","Promise","all","getPlayerAchievements","getAchievementPlayerStats","playerAchievementsCount","completedCount","hasCompletedAchievements","some","hasValidStats","Object","keys","playerAchievementsLength","statsKeys","statsCompletedAchievements","isUnlocked","unlockAchievement","playerAch","pa","push","getStats","total","locked","inProgress","completionRate","totalCount","inProgressCount","lockedCount","Math","round","backendAchievementService"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/services/backendAchievementService.js"],"sourcesContent":["import apiService from './api';\nimport { allAchievements } from '../data/achievements';\n\nclass BackendAchievementService {\n  constructor() {\n    this.allAchievements = [];\n    this.playerAchievements = [];\n    this.playerStats = {};\n    this.loaded = false;\n  }\n\n  getUnlockedAchievements() {\n    if (!this.loaded) {\n      console.warn('‚ö†Ô∏è Backend achievement service not loaded yet');\n      return [];\n    }\n    \n    console.log('üîç DEBUG: Total playerAchievements:', this.playerAchievements.length);\n    console.log('üîç DEBUG: Sample achievement:', this.playerAchievements[0]);\n    \n    // API returns achievements with 'completed' field and 'id' field\n    const unlockedAchievements = this.playerAchievements\n      .filter(achievement => achievement.completed === true)\n      .map(achievement => ({\n        ...achievement,\n        unlockedAt: achievement.unlockedAt || new Date().toISOString()\n      }));\n    \n    console.log('üîì Found unlocked achievements:', unlockedAchievements.length);\n    console.log('üîì Unlocked IDs:', unlockedAchievements.map(a => a.id));\n    return unlockedAchievements;\n  }\n\n  getLockedAchievements() {\n    if (!this.loaded) {\n      console.warn('‚ö†Ô∏è Backend achievement service not loaded yet');\n      return [];\n    }\n    \n    // API returns all achievements, filter out the completed ones\n    return this.playerAchievements.filter(achievement => achievement.completed !== true);\n  }\n\n  getInProgressAchievements() {\n    if (!this.loaded) {\n      console.warn('‚ö†Ô∏è Backend achievement service not loaded yet');\n      return [];\n    }\n    \n    // API returns achievements - filter for ones with progress > 0 but not completed\n    const inProgressAchievements = this.playerAchievements.filter(achievement => \n      achievement.progress > 0 && achievement.completed !== true\n    );\n    \n    console.log('üìà Found in-progress achievements:', inProgressAchievements.length);\n    console.log('üìà In-progress sample:', inProgressAchievements.slice(0, 3).map(a => ({\n      id: a.id, \n      progress: a.progress, \n      maxProgress: a.maxProgress, \n      completed: a.completed\n    })));\n    \n    return inProgressAchievements;\n  }\n\n  // Load player data from localStorage\n  loadPlayerDataFromLocalStorage() {\n    console.log('üîÑ LOADING PLAYER DATA FROM LOCALSTORAGE');\n    \n    // Load unlocked achievements from localStorage and filter out nulls\n    const unlockedIds = JSON.parse(localStorage.getItem('unlockedAchievements') || '[]')\n      .filter(id => id !== null && id !== undefined);\n    \n    const achievementData = JSON.parse(localStorage.getItem('achievementData') || '{}');\n    \n    console.log('üì¶ LocalStorage player data:', { unlockedIds, achievementData });\n    \n    // üîç DEBUG: Check if the achievement IDs from localStorage actually exist\n    unlockedIds.forEach(id => {\n      const exists = this.allAchievements.find(a => a.id === id);\n      if (!exists) {\n        console.warn(`‚ö†Ô∏è Achievement ${id} from localStorage not found in allAchievements`);\n        console.log('Available achievement IDs starting with FIRST:', \n          this.allAchievements.filter(a => a.id.includes('FIRST')).map(a => a.id)\n        );\n      }\n    });\n    \n    // Convert to player achievement format\n    this.playerAchievements = unlockedIds.map(achievementId => ({\n      achievementId,\n      unlocked: true,\n      progress: 100,\n      unlockedAt: achievementData[achievementId]?.unlockedAt || new Date().toISOString()\n    }));\n    \n    // Mock player stats\n    this.playerStats = {\n      totalNotes: 0,\n      totalWords: 0,\n      completedAchievements: unlockedIds.length,\n      totalSessions: 0,\n      totalFocusTime: 0,\n      totalXp: unlockedIds.length * 100 // 100 XP per achievement\n    };\n    \n    console.log('‚úÖ Loaded player data from localStorage:', {\n      playerAchievements: this.playerAchievements.length,\n      unlockedCount: unlockedIds.length\n    });\n  }\n\n  // NEW: Load from localStorage if backend fails completely\n  loadFromLocalStorage() {\n    console.log('üîÑ LOADING EVERYTHING FROM LOCALSTORAGE');\n    \n    // Use local achievements data\n    this.allAchievements = allAchievements;\n    \n    // Load player data\n    this.loadPlayerDataFromLocalStorage();\n    \n    this.loaded = true;\n    \n    console.log('‚úÖ Loaded everything from localStorage:', {\n      allAchievements: this.allAchievements.length,\n      playerAchievements: this.playerAchievements.length\n    });\n  }\n\n  async loadData(username = 'Jroc_182') {\n    console.log('üöÄ BACKEND SERVICE: Starting loadData for', username);\n    try {\n      console.log('üîÑ BACKEND SERVICE: Loading data for', username);\n      \n      // Try to load achievements from API\n      let achievements = [];\n      try {\n        achievements = await apiService.getAllAchievements();\n        console.log('‚úÖ Loaded achievements from API:', achievements?.length || 0);\n      } catch (error) {\n        console.warn('‚ö†Ô∏è Failed to load achievements from API, using local data');\n        achievements = allAchievements;\n      }\n\n      // Try to load player data from API\n      let playerAchievements = [];\n      let stats = {};\n      \n      try {\n        console.log('üì° Fetching player achievements and stats from API...');\n        const [playerAchievementsData, statsData] = await Promise.all([\n          apiService.getPlayerAchievements(username),\n          apiService.getAchievementPlayerStats(username)\n        ]);\n        playerAchievements = playerAchievementsData || [];\n        stats = statsData || {};\n        console.log('‚úÖ Loaded player data from API:', {\n          playerAchievementsCount: playerAchievements.length,\n          completedCount: playerAchievements.filter(a => a.completed).length,\n          stats\n        });\n      } catch (error) {\n        console.warn('‚ö†Ô∏è Failed to load player data from API, using localStorage');\n        console.error('API Error:', error);\n        // Don't load from localStorage here yet - we'll do it below\n      }\n\n      // Set the achievements data (either from API or local)\n      this.allAchievements = achievements;\n\n      // Check if we got meaningful player data from API\n      const hasCompletedAchievements = playerAchievements.some(a => a.completed === true);\n      const hasValidStats = Object.keys(stats).length > 0 && stats.completedAchievements > 0;\n      \n      console.log('üîç CONDITION CHECK:', {\n        playerAchievementsLength: playerAchievements.length,\n        hasCompletedAchievements,\n        completedCount: playerAchievements.filter(a => a.completed).length,\n        hasValidStats,\n        statsKeys: Object.keys(stats),\n        statsCompletedAchievements: stats.completedAchievements\n      });\n      \n      if (hasCompletedAchievements || hasValidStats) {\n        console.log('üì° Using API player data - found completed achievements or valid stats');\n        console.log('   - completed achievements:', playerAchievements.filter(a => a.completed).length);\n        console.log('   - stats:', stats);\n        this.playerAchievements = playerAchievements;\n        this.playerStats = stats;\n      } else {\n        console.log('üíæ No meaningful API player data found, loading from localStorage');\n        console.log('   - Reason: hasCompletedAchievements =', hasCompletedAchievements, ', hasValidStats =', hasValidStats);\n        this.loadPlayerDataFromLocalStorage();\n      }\n\n      this.loaded = true;\n\n      console.log('üîç BACKEND SERVICE: Final data loaded:');\n      console.log('   - achievements:', this.allAchievements?.length || 0);\n      console.log('   - playerAchievements:', this.playerAchievements?.length || 0);\n      console.log('   - stats:', this.playerStats);\n      console.log('‚úÖ Backend achievement data loaded for', username);\n\n      return { \n        achievements: this.allAchievements, \n        playerAchievements: this.playerAchievements, \n        stats: this.playerStats \n      };\n    } catch (error) {\n      console.error('‚ùå Failed to load backend achievements:', error);\n      \n      // üîÑ COMPLETE FALLBACK: Load everything from localStorage\n      console.log('üîÑ COMPLETE BACKEND FAILURE: Loading everything from localStorage');\n      this.loadFromLocalStorage();\n      \n      return {\n        achievements: this.allAchievements,\n        playerAchievements: this.playerAchievements,\n        stats: this.playerStats\n      };\n    }\n  }\n\n  isUnlocked(achievementId) {\n    if (!this.loaded) return false;\n    \n    const achievement = this.playerAchievements.find(a => a.id === achievementId);\n    return achievement?.completed || false;\n  }\n\n  unlockAchievement(achievementId) {\n    // Find or create player achievement\n    let playerAch = this.playerAchievements.find(pa => pa.achievementId === achievementId);\n    \n    if (!playerAch) {\n      playerAch = {\n        achievementId,\n        progress: 100,\n        unlocked: true,\n        unlockedAt: new Date().toISOString()\n      };\n      this.playerAchievements.push(playerAch);\n    } else {\n      playerAch.unlocked = true;\n      playerAch.progress = 100;\n      playerAch.unlockedAt = new Date().toISOString();\n    }\n    \n    console.log(`üèÜ Unlocked achievement: ${achievementId}`);\n  }\n\n  getStats() {\n    if (!this.loaded) {\n      return {\n        total: 0,\n        unlocked: 0,\n        locked: 0,\n        inProgress: 0,\n        completionRate: 0\n      };\n    }\n\n    const unlockedCount = this.getUnlockedAchievements().length;\n    const totalCount = this.allAchievements.length;\n    const inProgressCount = this.getInProgressAchievements().length;\n    const lockedCount = totalCount - unlockedCount;\n\n    return {\n      total: totalCount,\n      unlocked: unlockedCount,\n      locked: lockedCount,\n      inProgress: inProgressCount,\n      completionRate: totalCount > 0 ? Math.round((unlockedCount / totalCount) * 100) : 0\n    };\n  }\n}\n\n// Export singleton instance\nconst backendAchievementService = new BackendAchievementService();\nexport default backendAchievementService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}