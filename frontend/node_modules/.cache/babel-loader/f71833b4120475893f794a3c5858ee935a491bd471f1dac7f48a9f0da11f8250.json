{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useNotes.js\nimport { useState, useEffect } from 'react';\nconst useNotes = () => {\n  _s();\n  const [notes, setNotes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetchNotes();\n  }, []);\n  const fetchNotes = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/notes');\n      if (response.ok) {\n        const data = await response.json();\n        setNotes(data);\n      } else {\n        console.error('Failed to fetch notes:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error fetching notes:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const createNote = async noteData => {\n    try {\n      console.log('useNotes: Creating note with data:', noteData); // Debug log\n\n      // Convert tags string to array for the backend\n      const dataToSend = {\n        ...noteData,\n        tags: noteData.tags ? noteData.tags.split(',').map(tag => tag.trim()) : [],\n        username: 'user' // Add default username\n      };\n      console.log('useNotes: Data being sent to backend:', dataToSend); // Debug log\n\n      const response = await fetch('/api/notes/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(dataToSend)\n      });\n      console.log('useNotes: Response status:', response.status); // Debug log\n\n      if (response.ok) {\n        const newNote = await response.json();\n        console.log('useNotes: Note created successfully:', newNote); // Debug log\n        setNotes(prevNotes => [newNote, ...prevNotes]);\n        return newNote;\n      } else {\n        const errorText = await response.text();\n        console.error('useNotes: Backend error:', errorText); // Debug log\n        throw new Error(`Failed to create note: ${response.status} - ${errorText}`);\n      }\n    } catch (error) {\n      console.error('useNotes: Error creating note:', error);\n      throw error;\n    }\n  };\n  const updateNote = async (id, noteData) => {\n    try {\n      console.log('Original noteData:', noteData); // Debug log\n\n      // Convert tags array to string if needed\n      const dataToSend = {\n        ...noteData,\n        tags: Array.isArray(noteData.tags) ? noteData.tags.join(',') : noteData.tags\n      };\n      console.log('Data being sent to backend:', dataToSend); // Debug log\n      console.log('Updating note with ID:', id); // Debug log\n\n      const response = await fetch(`/api/notes/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(dataToSend)\n      });\n      console.log('Response status:', response.status); // Debug log\n      console.log('Response ok:', response.ok); // Debug log\n\n      if (response.ok) {\n        const updatedNote = await response.json();\n        console.log('Updated note received:', updatedNote); // Debug log\n\n        setNotes(prevNotes => prevNotes.map(note => note.id === id ? updatedNote : note));\n        return updatedNote;\n      } else {\n        const errorText = await response.text();\n        console.error('Backend error response:', errorText); // Debug log\n        throw new Error(`Failed to update note: ${response.status} - ${errorText}`);\n      }\n    } catch (error) {\n      console.error('Error updating note:', error);\n      throw error;\n    }\n  };\n  const deleteNote = async id => {\n    try {\n      const response = await fetch(`/api/notes/${id}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        setNotes(prevNotes => prevNotes.filter(note => note.id !== id));\n      } else {\n        throw new Error(`Failed to delete note: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error deleting note:', error);\n      throw error;\n    }\n  };\n  return {\n    notes,\n    loading,\n    createNote,\n    updateNote,\n    deleteNote,\n    refreshNotes: fetchNotes\n  };\n};\n_s(useNotes, \"I4K4w9oJpuKUIeK96G/eoa0AU7g=\");\nexport default useNotes;","map":{"version":3,"names":["useState","useEffect","useNotes","_s","notes","setNotes","loading","setLoading","fetchNotes","response","fetch","ok","data","json","console","error","statusText","createNote","noteData","log","dataToSend","tags","split","map","tag","trim","username","method","headers","body","JSON","stringify","status","newNote","prevNotes","errorText","text","Error","updateNote","id","Array","isArray","join","updatedNote","note","deleteNote","filter","refreshNotes"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/useNotes.js"],"sourcesContent":["// src/hooks/useNotes.js\nimport { useState, useEffect } from 'react';\n\nconst useNotes = () => {\n  const [notes, setNotes] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchNotes();\n  }, []);\n\n  const fetchNotes = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/notes');\n      if (response.ok) {\n        const data = await response.json();\n        setNotes(data);\n      } else {\n        console.error('Failed to fetch notes:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error fetching notes:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createNote = async (noteData) => {\n    try {\n      console.log('useNotes: Creating note with data:', noteData); // Debug log\n      \n      // Convert tags string to array for the backend\n      const dataToSend = {\n        ...noteData,\n        tags: noteData.tags ? noteData.tags.split(',').map(tag => tag.trim()) : [],\n        username: 'user' // Add default username\n      };\n      \n      console.log('useNotes: Data being sent to backend:', dataToSend); // Debug log\n\n      const response = await fetch('/api/notes/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(dataToSend)\n      });\n\n      console.log('useNotes: Response status:', response.status); // Debug log\n\n      if (response.ok) {\n        const newNote = await response.json();\n        console.log('useNotes: Note created successfully:', newNote); // Debug log\n        setNotes(prevNotes => [newNote, ...prevNotes]);\n        return newNote;\n      } else {\n        const errorText = await response.text();\n        console.error('useNotes: Backend error:', errorText); // Debug log\n        throw new Error(`Failed to create note: ${response.status} - ${errorText}`);\n      }\n    } catch (error) {\n      console.error('useNotes: Error creating note:', error);\n      throw error;\n    }\n  };\n\n  const updateNote = async (id, noteData) => {\n    try {\n      console.log('Original noteData:', noteData); // Debug log\n      \n      // Convert tags array to string if needed\n      const dataToSend = {\n        ...noteData,\n        tags: Array.isArray(noteData.tags) \n          ? noteData.tags.join(',') \n          : noteData.tags\n      };\n\n      console.log('Data being sent to backend:', dataToSend); // Debug log\n      console.log('Updating note with ID:', id); // Debug log\n\n      const response = await fetch(`/api/notes/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(dataToSend)\n      });\n\n      console.log('Response status:', response.status); // Debug log\n      console.log('Response ok:', response.ok); // Debug log\n\n      if (response.ok) {\n        const updatedNote = await response.json();\n        console.log('Updated note received:', updatedNote); // Debug log\n        \n        setNotes(prevNotes => \n          prevNotes.map(note => note.id === id ? updatedNote : note)\n        );\n        return updatedNote;\n      } else {\n        const errorText = await response.text();\n        console.error('Backend error response:', errorText); // Debug log\n        throw new Error(`Failed to update note: ${response.status} - ${errorText}`);\n      }\n    } catch (error) {\n      console.error('Error updating note:', error);\n      throw error;\n    }\n  };\n\n  const deleteNote = async (id) => {\n    try {\n      const response = await fetch(`/api/notes/${id}`, {\n        method: 'DELETE'\n      });\n\n      if (response.ok) {\n        setNotes(prevNotes => prevNotes.filter(note => note.id !== id));\n      } else {\n        throw new Error(`Failed to delete note: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error deleting note:', error);\n      throw error;\n    }\n  };\n\n  return {\n    notes,\n    loading,\n    createNote,\n    updateNote,\n    deleteNote,\n    refreshNotes: fetchNotes\n  };\n};\n\nexport default useNotes;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}