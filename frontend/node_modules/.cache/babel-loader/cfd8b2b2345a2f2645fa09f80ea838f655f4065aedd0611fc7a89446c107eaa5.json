{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useFolders = () => {\n  _s();\n  const [folders, setFolders] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Fetch folders on component mount\n  useEffect(() => {\n    fetchFolders();\n  }, []);\n  const fetchFolders = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/folders');\n      if (response.ok) {\n        const data = await response.json();\n        setFolders(data);\n      } else {\n        console.error('Failed to fetch folders:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error fetching folders:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // CREATE FOLDER - This is where your fetch call goes\n  const createFolder = async folderData => {\n    try {\n      const response = await fetch('/api/folders/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(folderData)\n      });\n      if (response.ok) {\n        const newFolder = await response.json();\n        // Add the new folder to the state\n        setFolders(prevFolders => [...prevFolders, newFolder]);\n        return newFolder;\n      } else {\n        throw new Error(`Failed to create folder: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error creating folder:', error);\n      throw error;\n    }\n  };\n\n  // UPDATE FOLDER\n  const updateFolder = async (id, folderData) => {\n    try {\n      const response = await fetch(`/api/folders/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(folderData)\n      });\n      if (response.ok) {\n        const updatedFolder = await response.json();\n        setFolders(prevFolders => prevFolders.map(folder => folder.id === id ? updatedFolder : folder));\n        return updatedFolder;\n      } else {\n        throw new Error(`Failed to update folder: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error updating folder:', error);\n      throw error;\n    }\n  };\n  const deleteFolder = async id => {\n    try {\n      const response = await fetch(`/api/folders/${id}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        setFolders(prevFolders => prevFolders.filter(folder => folder.id !== id));\n      } else {\n        throw new Error(`Failed to delete folder: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error deleting folder:', error);\n      throw error;\n    }\n  };\n  return {\n    folders,\n    loading,\n    createFolder,\n    updateFolder,\n    deleteFolder,\n    // ✅ Export delete function\n    refreshFolders: fetchFolders\n  };\n};\n_s(useFolders, \"bRkRflkM/jfTDyZAYUQxxPr37VE=\");\nexport default useFolders;","map":{"version":3,"names":["useState","useEffect","useFolders","_s","folders","setFolders","loading","setLoading","fetchFolders","response","fetch","ok","data","json","console","error","statusText","createFolder","folderData","method","headers","body","JSON","stringify","newFolder","prevFolders","Error","status","updateFolder","id","updatedFolder","map","folder","deleteFolder","filter","refreshFolders"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/useFolders.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useFolders = () => {\n  const [folders, setFolders] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Fetch folders on component mount\n  useEffect(() => {\n    fetchFolders();\n  }, []);\n\n  const fetchFolders = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/folders');\n      if (response.ok) {\n        const data = await response.json();\n        setFolders(data);\n      } else {\n        console.error('Failed to fetch folders:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error fetching folders:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // CREATE FOLDER - This is where your fetch call goes\n  const createFolder = async (folderData) => {\n    try {\n      const response = await fetch('/api/folders/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(folderData)\n      });\n\n      if (response.ok) {\n        const newFolder = await response.json();\n        // Add the new folder to the state\n        setFolders(prevFolders => [...prevFolders, newFolder]);\n        return newFolder;\n      } else {\n        throw new Error(`Failed to create folder: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error creating folder:', error);\n      throw error;\n    }\n  };\n\n  // UPDATE FOLDER\n  const updateFolder = async (id, folderData) => {\n    try {\n      const response = await fetch(`/api/folders/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(folderData)\n      });\n\n      if (response.ok) {\n        const updatedFolder = await response.json();\n        setFolders(prevFolders => \n          prevFolders.map(folder => folder.id === id ? updatedFolder : folder)\n        );\n        return updatedFolder;\n      } else {\n        throw new Error(`Failed to update folder: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error updating folder:', error);\n      throw error;\n    }\n  };\n\n  const deleteFolder = async (id) => {\n    try {\n      const response = await fetch(`/api/folders/${id}`, {\n        method: 'DELETE'\n      });\n\n      if (response.ok) {\n        setFolders(prevFolders => prevFolders.filter(folder => folder.id !== id));\n      } else {\n        throw new Error(`Failed to delete folder: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error deleting folder:', error);\n      throw error;\n    }\n  };\n\n  return {\n    folders,\n    loading,\n    createFolder,\n    updateFolder,\n    deleteFolder, // ✅ Export delete function\n    refreshFolders: fetchFolders\n  };\n};\n\nexport default useFolders;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}