{"ast":null,"code":"import _objectSpread from\"/Users/jenn/Projects/Pixel-Pages/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// src/hooks/useNotes.js\nimport{useState,useEffect}from'react';import achievementService from'../services/achievementService';const useNotes=()=>{const[notes,setNotes]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);// ✅ ADD THIS MISSING STATE\n// ✅ ADD MISSING API_BASE CONSTANT\nconst API_BASE='http://localhost:8080/api/notes';useEffect(()=>{fetchNotes();},[]);const fetchNotes=async()=>{try{setLoading(true);// ✅ FIX: Use consistent API endpoint\nconst response=await fetch(\"\".concat(API_BASE,\"?username=user\"));if(response.ok){const data=await response.json();setNotes(data);setError(null);// ✅ Clear error on success\n}else{console.error('Failed to fetch notes:',response.statusText);setError('Failed to fetch notes');}}catch(error){console.error('Error fetching notes:',error);setError(error.message);}finally{setLoading(false);}};// REPLACE the createNote method:\nconst createNote=async noteData=>{try{console.log('useNotes: Creating note with data:',noteData);// ✅ FIX: Ensure proper tags format\nconst noteWithTimestamp=_objectSpread(_objectSpread({},noteData),{},{// ✅ Convert empty/null tags to empty array, not empty string\ntags:noteData.tags?Array.isArray(noteData.tags)?noteData.tags:noteData.tags.split(',').map(t=>t.trim()).filter(t=>t):[],createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()});console.log('📝 Note with timestamp and fixed tags:',noteWithTimestamp);const response=await fetch(\"\".concat(API_BASE,\"?username=user\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(noteWithTimestamp)});if(!response.ok){const errorText=await response.text();console.error('❌ Backend error response:',errorText);console.error('❌ Response status:',response.status);throw new Error(\"Failed to create note: \".concat(response.status,\" - \").concat(errorText));}const newNote=await response.json();console.log('📝 Backend returned note:',newNote);// ✅ DEBUG LOG\n// ✅ FIX: Ensure the returned note has proper timestamp\nconst noteWithProperTimestamp=_objectSpread(_objectSpread({},newNote),{},{createdAt:newNote.createdAt||new Date().toISOString(),updatedAt:newNote.updatedAt||new Date().toISOString()});console.log('📝 Final note for state:',noteWithProperTimestamp);// ✅ DEBUG LOG\nsetNotes(prevNotes=>[...prevNotes,noteWithProperTimestamp]);setError(null);// Check for achievements after a short delay to ensure state is updated\nsetTimeout(()=>{checkNoteAchievements();},100);return noteWithProperTimestamp;}catch(err){console.error('useNotes: Error creating note:',err);setError(err.message);throw err;}};const updateNote=async(id,noteData)=>{try{console.log('useNotes: Updating note with ID:',id,'Data:',noteData);const dataToSend=_objectSpread(_objectSpread({},noteData),{},{tags:Array.isArray(noteData.tags)?noteData.tags:typeof noteData.tags==='string'?noteData.tags.split(',').map(t=>t.trim()).filter(t=>t):[],updatedAt:new Date().toISOString()// ✅ ADD TIMESTAMP\n});// ✅ FIX: Use consistent API endpoint\nconst response=await fetch(\"\".concat(API_BASE,\"/\").concat(id,\"?username=user\"),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(dataToSend)});if(response.ok){const updatedNote=await response.json();setNotes(prevNotes=>prevNotes.map(note=>note.id===id||note.filename===id?updatedNote:note));setError(null);// ✅ Clear error on success\n// Check achievements after note update\nsetTimeout(()=>{checkNoteAchievements();},100);return updatedNote;}else{const errorText=await response.text();throw new Error(\"Failed to update note: \".concat(response.status,\" \").concat(errorText));}}catch(error){console.error('Error updating note:',error);setError(error.message);// ✅ Set error state\nthrow error;}};const deleteNote=async id=>{try{console.log('useNotes: Deleting note with ID:',id);// ✅ FIX: Use consistent API endpoint\nconst response=await fetch(\"\".concat(API_BASE,\"/\").concat(id,\"?username=user\"),{method:'DELETE'});if(response.ok){setNotes(prevNotes=>prevNotes.filter(note=>note.id!==id));setError(null);// ✅ Clear error on success\n}else{throw new Error(\"Failed to delete note: \".concat(response.status));}}catch(error){console.error('Error deleting note:',error);setError(error.message);// ✅ Set error state\nthrow error;}};// Helper function for week start\nconst getWeekStart=date=>{const d=new Date(date);const day=d.getDay();const diff=d.getDate()-day;return new Date(d.setDate(diff));};// Helper function for note streak calculation\nconst calculateNoteStreak=notes=>{if(notes.length===0)return 0;const dates=[...new Set(notes.map(n=>new Date(n.createdAt).toDateString()))].sort();let streak=1;let currentStreak=1;for(let i=1;i<dates.length;i++){const prevDate=new Date(dates[i-1]);const currentDate=new Date(dates[i]);const dayDiff=(currentDate-prevDate)/(1000*60*60*24);if(dayDiff===1){currentStreak++;streak=Math.max(streak,currentStreak);}else{currentStreak=1;}}return streak;};const checkNoteAchievements=()=>{const userStats=calculateNoteStats(notes);const newAchievements=achievementService.checkAchievements(userStats);if(newAchievements.length>0){console.log(\"\\uD83D\\uDCDD Note achievements unlocked: \".concat(newAchievements.map(a=>a.name).join(', ')));}return newAchievements;};const calculateNoteStats=notes=>{const now=new Date();const today=now.toDateString();const thisWeek=getWeekStart(now);console.log(\"\\uD83D\\uDCC5 Today is: \".concat(today));// ✅ DEBUG LOG\n// Calculate note statistics\nconst totalNotes=notes.length;const totalWords=notes.reduce((sum,note)=>{var _note$content;return sum+(((_note$content=note.content)===null||_note$content===void 0?void 0:_note$content.split(' ').length)||0);},0);// ✅ FIX: Get all unique tags properly\nconst allTags=new Set();notes.forEach(note=>{// Handle both array and string tags\nif(Array.isArray(note.tags)){note.tags.forEach(tag=>allTags.add(tag.toLowerCase().trim()));}else if(typeof note.tags==='string'&&note.tags.trim()){note.tags.split(',').forEach(tag=>{const cleanTag=tag.toLowerCase().trim();if(cleanTag)allTags.add(cleanTag);});}// Also check tagsString field\nif(note.tagsString&&typeof note.tagsString==='string'){note.tagsString.split(',').forEach(tag=>{const cleanTag=tag.toLowerCase().trim();if(cleanTag)allTags.add(cleanTag);});}});const uniqueTags=allTags.size;// ✅ FIX: Today's notes with better debugging\nconst notesToday=notes.filter(note=>{if(!note.createdAt){console.warn('❌ Note missing createdAt:',note);return false;}// Parse both dates consistently\nconst noteDate=new Date(note.createdAt);const todayDate=new Date();// Compare dates only (ignore time)\nconst noteDateString=noteDate.toDateString();const todayDateString=todayDate.toDateString();const isToday=noteDateString===todayDateString;if(isToday){console.log(\"\\u2705 TODAY's note found: \\\"\".concat(note.title,\"\\\" created \").concat(note.createdAt));}else{console.log(\"\\uD83D\\uDCC5 Note \\\"\".concat(note.title,\"\\\": created \").concat(note.createdAt,\" -> \").concat(noteDateString,\" | Today: \").concat(todayDateString,\" | Match: \").concat(isToday));}return isToday;}).length;console.log(\"\\uD83D\\uDCCA Notes today: \".concat(notesToday,\" out of \").concat(notes.length,\" total\"));// Week notes\nconst notesThisWeek=notes.filter(note=>note.createdAt&&new Date(note.createdAt)>=thisWeek).length;// Weekend notes\nconst weekendNotes=notes.filter(note=>{if(!note.createdAt)return false;const day=new Date(note.createdAt).getDay();return day===0||day===6;// Sunday or Saturday\n}).length;// Max words in a single note\nconst maxWordsInNote=Math.max(...notes.map(note=>{var _note$content2;return((_note$content2=note.content)===null||_note$content2===void 0?void 0:_note$content2.split(' ').length)||0;}),0);// Max tags in a single note\nconst maxTagsInNote=Math.max(...notes.map(note=>{if(Array.isArray(note.tags))return note.tags.length;if(typeof note.tags==='string'&&note.tags.trim()){return note.tags.split(',').length;}return 0;}),0);// Note streak (simplified)\nconst noteStreak=calculateNoteStreak(notes);const totalEdits=notes.reduce((sum,note)=>sum+(note.editCount||1),0);return{totalNotes,totalWords,uniqueTags,notesToday,// ✅ NOW PROPERLY CALCULATED\nnotesThisWeek,weekendNotes,maxWordsInNote,maxTagsInNote,noteStreak,totalEdits,maxEditsOnNote:Math.max(...notes.map(note=>note.editCount||1),0)};};return{notes,loading,error,// ✅ ADD ERROR TO RETURN\ncreateNote,updateNote,deleteNote,refreshNotes:fetchNotes};};export default useNotes;","map":{"version":3,"names":["useState","useEffect","achievementService","useNotes","notes","setNotes","loading","setLoading","error","setError","API_BASE","fetchNotes","response","fetch","concat","ok","data","json","console","statusText","message","createNote","noteData","log","noteWithTimestamp","_objectSpread","tags","Array","isArray","split","map","t","trim","filter","createdAt","Date","toISOString","updatedAt","method","headers","body","JSON","stringify","errorText","text","status","Error","newNote","noteWithProperTimestamp","prevNotes","setTimeout","checkNoteAchievements","err","updateNote","id","dataToSend","updatedNote","note","filename","deleteNote","getWeekStart","date","d","day","getDay","diff","getDate","setDate","calculateNoteStreak","length","dates","Set","n","toDateString","sort","streak","currentStreak","i","prevDate","currentDate","dayDiff","Math","max","userStats","calculateNoteStats","newAchievements","checkAchievements","a","name","join","now","today","thisWeek","totalNotes","totalWords","reduce","sum","_note$content","content","allTags","forEach","tag","add","toLowerCase","cleanTag","tagsString","uniqueTags","size","notesToday","warn","noteDate","todayDate","noteDateString","todayDateString","isToday","title","notesThisWeek","weekendNotes","maxWordsInNote","_note$content2","maxTagsInNote","noteStreak","totalEdits","editCount","maxEditsOnNote","refreshNotes"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/useNotes.js"],"sourcesContent":["// src/hooks/useNotes.js\nimport { useState, useEffect } from 'react';\nimport achievementService from '../services/achievementService';\n\nconst useNotes = () => {\n  const [notes, setNotes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);  // ✅ ADD THIS MISSING STATE\n\n  // ✅ ADD MISSING API_BASE CONSTANT\n  const API_BASE = 'http://localhost:8080/api/notes';\n\n  useEffect(() => {\n    fetchNotes();\n  }, []);\n\n  const fetchNotes = async () => {\n    try {\n      setLoading(true);\n      // ✅ FIX: Use consistent API endpoint\n      const response = await fetch(`${API_BASE}?username=user`);\n      if (response.ok) {\n        const data = await response.json();\n        setNotes(data);\n        setError(null);  // ✅ Clear error on success\n      } else {\n        console.error('Failed to fetch notes:', response.statusText);\n        setError('Failed to fetch notes');\n      }\n    } catch (error) {\n      console.error('Error fetching notes:', error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // REPLACE the createNote method:\n  const createNote = async (noteData) => {\n    try {\n      console.log('useNotes: Creating note with data:', noteData);\n      \n      // ✅ FIX: Ensure proper tags format\n      const noteWithTimestamp = {\n        ...noteData,\n        // ✅ Convert empty/null tags to empty array, not empty string\n        tags: noteData.tags ? \n          (Array.isArray(noteData.tags) ? noteData.tags : \n           noteData.tags.split(',').map(t => t.trim()).filter(t => t)) : [],\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      console.log('📝 Note with timestamp and fixed tags:', noteWithTimestamp);\n      \n      const response = await fetch(`${API_BASE}?username=user`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(noteWithTimestamp),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('❌ Backend error response:', errorText);\n        console.error('❌ Response status:', response.status);\n        throw new Error(`Failed to create note: ${response.status} - ${errorText}`);\n      }\n\n      const newNote = await response.json();\n      console.log('📝 Backend returned note:', newNote);  // ✅ DEBUG LOG\n      \n      // ✅ FIX: Ensure the returned note has proper timestamp\n      const noteWithProperTimestamp = {\n        ...newNote,\n        createdAt: newNote.createdAt || new Date().toISOString(),\n        updatedAt: newNote.updatedAt || new Date().toISOString()\n      };\n      \n      console.log('📝 Final note for state:', noteWithProperTimestamp);  // ✅ DEBUG LOG\n      \n      setNotes(prevNotes => [...prevNotes, noteWithProperTimestamp]);\n      setError(null);\n\n      // Check for achievements after a short delay to ensure state is updated\n      setTimeout(() => {\n        checkNoteAchievements();\n      }, 100);\n\n      return noteWithProperTimestamp;\n    } catch (err) {\n      console.error('useNotes: Error creating note:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  const updateNote = async (id, noteData) => {\n    try {\n      console.log('useNotes: Updating note with ID:', id, 'Data:', noteData);\n      \n      const dataToSend = {\n        ...noteData,\n        tags: Array.isArray(noteData.tags) ? noteData.tags : \n              typeof noteData.tags === 'string' ? noteData.tags.split(',').map(t => t.trim()).filter(t => t) : [],\n        updatedAt: new Date().toISOString()  // ✅ ADD TIMESTAMP\n      };\n\n      // ✅ FIX: Use consistent API endpoint\n      const response = await fetch(`${API_BASE}/${id}?username=user`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(dataToSend),\n      });\n\n      if (response.ok) {\n        const updatedNote = await response.json();\n        setNotes(prevNotes => \n          prevNotes.map(note => \n            (note.id === id || note.filename === id) ? updatedNote : note\n          )\n        );\n        \n        setError(null);  // ✅ Clear error on success\n        \n        // Check achievements after note update\n        setTimeout(() => {\n          checkNoteAchievements();\n        }, 100);\n        \n        return updatedNote;\n      } else {\n        const errorText = await response.text();\n        throw new Error(`Failed to update note: ${response.status} ${errorText}`);\n      }\n    } catch (error) {\n      console.error('Error updating note:', error);\n      setError(error.message);  // ✅ Set error state\n      throw error;\n    }\n  };\n\n  const deleteNote = async (id) => {\n    try {\n      console.log('useNotes: Deleting note with ID:', id);\n      \n      // ✅ FIX: Use consistent API endpoint\n      const response = await fetch(`${API_BASE}/${id}?username=user`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        setNotes(prevNotes => prevNotes.filter(note => note.id !== id));\n        setError(null);  // ✅ Clear error on success\n      } else {\n        throw new Error(`Failed to delete note: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error deleting note:', error);\n      setError(error.message);  // ✅ Set error state\n      throw error;\n    }\n  };\n\n  // Helper function for week start\n  const getWeekStart = (date) => {\n    const d = new Date(date);\n    const day = d.getDay();\n    const diff = d.getDate() - day;\n    return new Date(d.setDate(diff));\n  };\n\n  // Helper function for note streak calculation\n  const calculateNoteStreak = (notes) => {\n    if (notes.length === 0) return 0;\n    \n    const dates = [...new Set(notes.map(n => new Date(n.createdAt).toDateString()))].sort();\n    let streak = 1;\n    let currentStreak = 1;\n    \n    for (let i = 1; i < dates.length; i++) {\n      const prevDate = new Date(dates[i - 1]);\n      const currentDate = new Date(dates[i]);\n      const dayDiff = (currentDate - prevDate) / (1000 * 60 * 60 * 24);\n      \n      if (dayDiff === 1) {\n        currentStreak++;\n        streak = Math.max(streak, currentStreak);\n      } else {\n        currentStreak = 1;\n      }\n    }\n    \n    return streak;\n  };\n\n  const checkNoteAchievements = () => {\n    const userStats = calculateNoteStats(notes);\n    const newAchievements = achievementService.checkAchievements(userStats);\n    \n    if (newAchievements.length > 0) {\n      console.log(`📝 Note achievements unlocked: ${newAchievements.map(a => a.name).join(', ')}`);\n    }\n    \n    return newAchievements;\n  };\n\n  const calculateNoteStats = (notes) => {\n    const now = new Date();\n    const today = now.toDateString();\n    const thisWeek = getWeekStart(now);\n    \n    console.log(`📅 Today is: ${today}`); // ✅ DEBUG LOG\n    \n    // Calculate note statistics\n    const totalNotes = notes.length;\n    const totalWords = notes.reduce((sum, note) => sum + (note.content?.split(' ').length || 0), 0);\n    \n    // ✅ FIX: Get all unique tags properly\n    const allTags = new Set();\n    notes.forEach(note => {\n      // Handle both array and string tags\n      if (Array.isArray(note.tags)) {\n        note.tags.forEach(tag => allTags.add(tag.toLowerCase().trim()));\n      } else if (typeof note.tags === 'string' && note.tags.trim()) {\n        note.tags.split(',').forEach(tag => {\n          const cleanTag = tag.toLowerCase().trim();\n          if (cleanTag) allTags.add(cleanTag);\n        });\n      }\n      // Also check tagsString field\n      if (note.tagsString && typeof note.tagsString === 'string') {\n        note.tagsString.split(',').forEach(tag => {\n          const cleanTag = tag.toLowerCase().trim();\n          if (cleanTag) allTags.add(cleanTag);\n        });\n      }\n    });\n    const uniqueTags = allTags.size;\n    \n    // ✅ FIX: Today's notes with better debugging\n    const notesToday = notes.filter(note => {\n      if (!note.createdAt) {\n        console.warn('❌ Note missing createdAt:', note);\n        return false;\n      }\n      \n      // Parse both dates consistently\n      const noteDate = new Date(note.createdAt);\n      const todayDate = new Date();\n      \n      // Compare dates only (ignore time)\n      const noteDateString = noteDate.toDateString();\n      const todayDateString = todayDate.toDateString();\n      \n      const isToday = noteDateString === todayDateString;\n      \n      if (isToday) {\n        console.log(`✅ TODAY's note found: \"${note.title}\" created ${note.createdAt}`);\n      } else {\n        console.log(`📅 Note \"${note.title}\": created ${note.createdAt} -> ${noteDateString} | Today: ${todayDateString} | Match: ${isToday}`);\n      }\n      \n      return isToday;\n    }).length;\n\n    console.log(`📊 Notes today: ${notesToday} out of ${notes.length} total`);\n    \n    // Week notes\n    const notesThisWeek = notes.filter(note => \n      note.createdAt && new Date(note.createdAt) >= thisWeek\n    ).length;\n    \n    // Weekend notes\n    const weekendNotes = notes.filter(note => {\n      if (!note.createdAt) return false;\n      const day = new Date(note.createdAt).getDay();\n      return day === 0 || day === 6; // Sunday or Saturday\n    }).length;\n    \n    // Max words in a single note\n    const maxWordsInNote = Math.max(...notes.map(note => \n      note.content?.split(' ').length || 0\n    ), 0);\n    \n    // Max tags in a single note\n    const maxTagsInNote = Math.max(...notes.map(note => {\n      if (Array.isArray(note.tags)) return note.tags.length;\n      if (typeof note.tags === 'string' && note.tags.trim()) {\n        return note.tags.split(',').length;\n      }\n      return 0;\n    }), 0);\n    \n    // Note streak (simplified)\n    const noteStreak = calculateNoteStreak(notes);\n    const totalEdits = notes.reduce((sum, note) => sum + (note.editCount || 1), 0);\n\n    return {\n      totalNotes,\n      totalWords,\n      uniqueTags,\n      notesToday,        // ✅ NOW PROPERLY CALCULATED\n      notesThisWeek,\n      weekendNotes,\n      maxWordsInNote,\n      maxTagsInNote,\n      noteStreak,\n      totalEdits,\n      maxEditsOnNote: Math.max(...notes.map(note => note.editCount || 1), 0)\n    };\n  };\n\n  return {\n    notes,\n    loading,\n    error,           // ✅ ADD ERROR TO RETURN\n    createNote,\n    updateNote,\n    deleteNote,\n    refreshNotes: fetchNotes\n  };\n};\n\nexport default useNotes;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}