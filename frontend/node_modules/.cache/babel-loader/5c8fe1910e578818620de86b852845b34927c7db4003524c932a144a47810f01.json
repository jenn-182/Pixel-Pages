{"ast":null,"code":"// src/services/api.js\nconst API_BASE='http://localhost:8080/api';const apiService={// Notes API calls\nasync fetchNotes(){const response=await fetch(\"\".concat(API_BASE,\"/notes\"));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},async createNote(noteData){const response=await fetch(\"\".concat(API_BASE,\"/notes\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(noteData)});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},async updateNote(id,noteData){const response=await fetch(\"\".concat(API_BASE,\"/notes/\").concat(id),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(noteData)});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},async deleteNote(id){const response=await fetch(\"\".concat(API_BASE,\"/notes/\").concat(id),{method:'DELETE'});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return true;},async searchNotes(query){const response=await fetch(\"\".concat(API_BASE,\"/notes/search?query=\").concat(encodeURIComponent(query)));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},// // Player API calls\n// async getPlayerStats(username) {\n//   const response = await fetch(`${API_BASE}/players/${username}`);\n//   if (!response.ok) {\n//     throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n//   }\n//   return response.json();\n// },\nasync getTasks(username){const response=await fetch(\"\".concat(API_BASE,\"/tasks?username=\").concat(username));if(!response.ok){throw new Error(\"HTTP \".concat(response.status,\": \").concat(response.statusText));}return response.json();},async getTaskLists(username){const response=await fetch(\"\".concat(API_BASE,\"/task-lists?username=\").concat(username));if(!response.ok){throw new Error(\"HTTP \".concat(response.status,\": \").concat(response.statusText));}return response.json();},// =================== FOCUS SESSIONS API ===================\n// Get focus sessions\nasync getFocusSessions(username){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const params=new URLSearchParams({username});if(options.category)params.append('category',options.category);if(options.activeOnly!==undefined)params.append('activeOnly',options.activeOnly);const response=await fetch(\"\".concat(API_BASE,\"/focus/sessions?\").concat(params));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},// Get single focus session\nasync getFocusSession(sessionId){const response=await fetch(\"\".concat(API_BASE,\"/focus/sessions/\").concat(sessionId));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},// Create focus session\nasync createFocusSession(sessionData){const response=await fetch(\"\".concat(API_BASE,\"/focus/sessions\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(sessionData)});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},// Update focus session\nasync updateFocusSession(sessionId,sessionData){const response=await fetch(\"\".concat(API_BASE,\"/focus/sessions/\").concat(sessionId),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(sessionData)});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},// Delete focus session (deactivate)\nasync deleteFocusSession(sessionId){const response=await fetch(\"\".concat(API_BASE,\"/focus/sessions/\").concat(sessionId),{method:'DELETE'});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},// Get session stats\nasync getFocusSessionStats(username){const response=await fetch(\"\".concat(API_BASE,\"/focus/sessions/stats?username=\").concat(username));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},// =================== FOCUS ENTRIES API ===================\n// Get focus entries\nasync getFocusEntries(username){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const params=new URLSearchParams({username});if(options.sessionId)params.append('sessionId',options.sessionId);if(options.date)params.append('date',options.date);if(options.startDate)params.append('startDate',options.startDate);if(options.endDate)params.append('endDate',options.endDate);const response=await fetch(\"\".concat(API_BASE,\"/focus/entries?\").concat(params));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},// Create focus entry\nasync createFocusEntry(entryData){const response=await fetch(\"\".concat(API_BASE,\"/focus/entries\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(entryData)});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},// Update focus entry\nasync updateFocusEntry(entryId,entryData){const response=await fetch(\"\".concat(API_BASE,\"/focus/entries/\").concat(entryId),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(entryData)});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},// Delete focus entry\nasync deleteFocusEntry(entryId){const response=await fetch(\"\".concat(API_BASE,\"/focus/entries/\").concat(entryId),{method:'DELETE'});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},// Get entry stats\nasync getFocusEntryStats(username){let date=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;const params=new URLSearchParams({username});if(date)params.append('date',date);const response=await fetch(\"\".concat(API_BASE,\"/focus/entries/stats?\").concat(params));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},// =================== FOCUS TRACKER API ===================\n// Get focus tracker analytics\nasync getFocusTracker(username){let period=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'week';const response=await fetch(\"\".concat(API_BASE,\"/focus/tracker?username=\").concat(username,\"&period=\").concat(period));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},// Get daily focus tracker\nasync getDailyFocusTracker(username){let date=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;const params=new URLSearchParams({username});if(date)params.append('date',date);const response=await fetch(\"\".concat(API_BASE,\"/focus/tracker/daily?\").concat(params));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},// Get focus tracker range\nasync getFocusTrackerRange(username,startDate,endDate){const params=new URLSearchParams({username,startDate,endDate});const response=await fetch(\"\".concat(API_BASE,\"/focus/tracker/range?\").concat(params));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},// Get recent focus tracker\nasync getRecentFocusTracker(username){let days=arguments.length>1&&arguments[1]!==undefined?arguments[1]:7;const response=await fetch(\"\".concat(API_BASE,\"/focus/tracker/recent?username=\").concat(username,\"&days=\").concat(days));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},// Get focus analytics\nasync getFocusAnalytics(username){let period=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'week';const response=await fetch(\"\".concat(API_BASE,\"/focus/tracker/analytics?username=\").concat(username,\"&period=\").concat(period));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},// Generate daily stats\nasync generateDailyFocusStats(username){let date=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;const params=new URLSearchParams({username});if(date)params.append('date',date);const response=await fetch(\"\".concat(API_BASE,\"/focus/tracker/generate?\").concat(params),{method:'POST'});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},// Update daily goal\nasync updateDailyGoal(username,date,goalMet){const params=new URLSearchParams({username,date,goalMet});const response=await fetch(\"\".concat(API_BASE,\"/focus/tracker/goal?\").concat(params),{method:'PUT'});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},// Get streak data\nasync getFocusStreaks(username){const response=await fetch(\"\".concat(API_BASE,\"/focus/tracker/streaks?username=\").concat(username));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},// Get dashboard data\nasync getFocusDashboard(username){const response=await fetch(\"\".concat(API_BASE,\"/focus/tracker/dashboard?username=\").concat(username));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();},// Achievement-related methods\nasync getAchievements(username){try{const response=await fetch(\"\".concat(API_BASE,\"/achievements?username=\").concat(username||'user'));if(!response.ok){// Return mock data if API fails\nreturn{achievements:[],summary:{completed:0,inProgress:0,locked:0}};}return response.json();}catch(error){console.warn('Achievements API not available, using mock data');return{achievements:[],summary:{completed:0,inProgress:0,locked:0}};}},async getAllAchievements(){try{const response=await fetch(\"\".concat(API_BASE,\"/achievements\"));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error('Failed to fetch all achievements:',error);// Return empty array as fallback\nreturn[];}},async getPlayerAchievements(){let username=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'Jroc_182';try{const response=await fetch(\"\".concat(API_BASE,\"/players/\").concat(username,\"/achievements\"));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error('Failed to fetch player achievements:',error);// Return empty array as fallback\nreturn[];}},async getAchievementPlayerStats(){let username=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'Jroc_182';try{const response=await fetch(\"\".concat(API_BASE,\"/players/\").concat(username,\"/achievement-stats\"));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error('Failed to fetch achievement player stats:',error);// Return empty object as fallback\nreturn{};}},// UPDATE the getPlayerStats function:\nasync getPlayerStats(){let username=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'Jroc_182';// Changed default\ntry{if(!username){console.warn('No username provided for player stats, using default');username='Jroc_182';// Changed default\n}const response=await fetch(\"\".concat(API_BASE,\"/players/\").concat(username));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error('Failed to fetch player stats:',error);throw error;}},async updateTask(taskId,taskData){let username=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'Jroc_182';// Changed default\nconst requestData={title:taskData.title,description:taskData.description,priority:taskData.priority,dueDate:taskData.dueDate,tags:taskData.tags,taskListId:taskData.taskListId,completed:taskData.completed};const response=await fetch(\"\".concat(API_BASE,\"/tasks/\").concat(taskId,\"?username=\").concat(username),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(requestData)});if(!response.ok){const errorText=await response.text();console.error('Update task error:',errorText);throw new Error(\"Failed to update task: \".concat(response.status,\" - \").concat(errorText));}return await response.json();}};export default apiService;","map":{"version":3,"names":["API_BASE","apiService","fetchNotes","response","fetch","concat","ok","Error","status","json","createNote","noteData","method","headers","body","JSON","stringify","updateNote","id","deleteNote","searchNotes","query","encodeURIComponent","getTasks","username","statusText","getTaskLists","getFocusSessions","options","arguments","length","undefined","params","URLSearchParams","category","append","activeOnly","getFocusSession","sessionId","createFocusSession","sessionData","updateFocusSession","deleteFocusSession","getFocusSessionStats","getFocusEntries","date","startDate","endDate","createFocusEntry","entryData","updateFocusEntry","entryId","deleteFocusEntry","getFocusEntryStats","getFocusTracker","period","getDailyFocusTracker","getFocusTrackerRange","getRecentFocusTracker","days","getFocusAnalytics","generateDailyFocusStats","updateDailyGoal","goalMet","getFocusStreaks","getFocusDashboard","getAchievements","achievements","summary","completed","inProgress","locked","error","console","warn","getAllAchievements","getPlayerAchievements","getAchievementPlayerStats","getPlayerStats","updateTask","taskId","taskData","requestData","title","description","priority","dueDate","tags","taskListId","errorText","text"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\nconst API_BASE = 'http://localhost:8080/api';\n\nconst apiService = {\n  // Notes API calls\n  async fetchNotes() {\n    const response = await fetch(`${API_BASE}/notes`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  async createNote(noteData) {\n    const response = await fetch(`${API_BASE}/notes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(noteData),\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  async updateNote(id, noteData) {\n    const response = await fetch(`${API_BASE}/notes/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(noteData),\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  async deleteNote(id) {\n    const response = await fetch(`${API_BASE}/notes/${id}`, {\n      method: 'DELETE',\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return true;\n  },\n\n  async searchNotes(query) {\n    const response = await fetch(\n      `${API_BASE}/notes/search?query=${encodeURIComponent(query)}`\n    );\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // // Player API calls\n  // async getPlayerStats(username) {\n  //   const response = await fetch(`${API_BASE}/players/${username}`);\n  //   if (!response.ok) {\n  //     throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n  //   }\n  //   return response.json();\n  // },\n\n  async getTasks(username) {\n    const response = await fetch(`${API_BASE}/tasks?username=${username}`);\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    return response.json();\n  },\n\n  async getTaskLists(username) {\n    const response = await fetch(\n      `${API_BASE}/task-lists?username=${username}`\n    );\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    return response.json();\n  },\n\n  // =================== FOCUS SESSIONS API ===================\n  \n  // Get focus sessions\n  async getFocusSessions(username, options = {}) {\n    const params = new URLSearchParams({ username });\n    if (options.category) params.append('category', options.category);\n    if (options.activeOnly !== undefined) params.append('activeOnly', options.activeOnly);\n    \n    const response = await fetch(`${API_BASE}/focus/sessions?${params}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Get single focus session\n  async getFocusSession(sessionId) {\n    const response = await fetch(`${API_BASE}/focus/sessions/${sessionId}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Create focus session\n  async createFocusSession(sessionData) {\n    const response = await fetch(`${API_BASE}/focus/sessions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(sessionData),\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Update focus session\n  async updateFocusSession(sessionId, sessionData) {\n    const response = await fetch(`${API_BASE}/focus/sessions/${sessionId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(sessionData),\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Delete focus session (deactivate)\n  async deleteFocusSession(sessionId) {\n    const response = await fetch(`${API_BASE}/focus/sessions/${sessionId}`, {\n      method: 'DELETE',\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Get session stats\n  async getFocusSessionStats(username) {\n    const response = await fetch(`${API_BASE}/focus/sessions/stats?username=${username}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // =================== FOCUS ENTRIES API ===================\n\n  // Get focus entries\n  async getFocusEntries(username, options = {}) {\n    const params = new URLSearchParams({ username });\n    if (options.sessionId) params.append('sessionId', options.sessionId);\n    if (options.date) params.append('date', options.date);\n    if (options.startDate) params.append('startDate', options.startDate);\n    if (options.endDate) params.append('endDate', options.endDate);\n    \n    const response = await fetch(`${API_BASE}/focus/entries?${params}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Create focus entry\n  async createFocusEntry(entryData) {\n    const response = await fetch(`${API_BASE}/focus/entries`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(entryData),\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Update focus entry\n  async updateFocusEntry(entryId, entryData) {\n    const response = await fetch(`${API_BASE}/focus/entries/${entryId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(entryData),\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Delete focus entry\n  async deleteFocusEntry(entryId) {\n    const response = await fetch(`${API_BASE}/focus/entries/${entryId}`, {\n      method: 'DELETE',\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Get entry stats\n  async getFocusEntryStats(username, date = null) {\n    const params = new URLSearchParams({ username });\n    if (date) params.append('date', date);\n    \n    const response = await fetch(`${API_BASE}/focus/entries/stats?${params}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // =================== FOCUS TRACKER API ===================\n\n  // Get focus tracker analytics\n  async getFocusTracker(username, period = 'week') {\n    const response = await fetch(`${API_BASE}/focus/tracker?username=${username}&period=${period}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Get daily focus tracker\n  async getDailyFocusTracker(username, date = null) {\n    const params = new URLSearchParams({ username });\n    if (date) params.append('date', date);\n    \n    const response = await fetch(`${API_BASE}/focus/tracker/daily?${params}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Get focus tracker range\n  async getFocusTrackerRange(username, startDate, endDate) {\n    const params = new URLSearchParams({ username, startDate, endDate });\n    \n    const response = await fetch(`${API_BASE}/focus/tracker/range?${params}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Get recent focus tracker\n  async getRecentFocusTracker(username, days = 7) {\n    const response = await fetch(`${API_BASE}/focus/tracker/recent?username=${username}&days=${days}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Get focus analytics\n  async getFocusAnalytics(username, period = 'week') {\n    const response = await fetch(`${API_BASE}/focus/tracker/analytics?username=${username}&period=${period}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Generate daily stats\n  async generateDailyFocusStats(username, date = null) {\n    const params = new URLSearchParams({ username });\n    if (date) params.append('date', date);\n    \n    const response = await fetch(`${API_BASE}/focus/tracker/generate?${params}`, {\n      method: 'POST',\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Update daily goal\n  async updateDailyGoal(username, date, goalMet) {\n    const params = new URLSearchParams({ username, date, goalMet });\n    \n    const response = await fetch(`${API_BASE}/focus/tracker/goal?${params}`, {\n      method: 'PUT',\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Get streak data\n  async getFocusStreaks(username) {\n    const response = await fetch(`${API_BASE}/focus/tracker/streaks?username=${username}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Get dashboard data\n  async getFocusDashboard(username) {\n    const response = await fetch(`${API_BASE}/focus/tracker/dashboard?username=${username}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Achievement-related methods\n  async getAchievements(username) {\n    try {\n      const response = await fetch(`${API_BASE}/achievements?username=${username || 'user'}`);\n      if (!response.ok) {\n        // Return mock data if API fails\n        return {\n          achievements: [],\n          summary: { completed: 0, inProgress: 0, locked: 0 }\n        };\n      }\n      return response.json();\n    } catch (error) {\n      console.warn('Achievements API not available, using mock data');\n      return {\n        achievements: [],\n        summary: { completed: 0, inProgress: 0, locked: 0 }\n      };\n    }\n  },\n\n  async getAllAchievements() {\n    try {\n      const response = await fetch(`${API_BASE}/achievements`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to fetch all achievements:', error);\n      // Return empty array as fallback\n      return [];\n    }\n  },\n\n  async getPlayerAchievements(username = 'Jroc_182') {\n    try {\n      const response = await fetch(`${API_BASE}/players/${username}/achievements`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to fetch player achievements:', error);\n      // Return empty array as fallback\n      return [];\n    }\n  },\n\n  async getAchievementPlayerStats(username = 'Jroc_182') {\n    try {\n      const response = await fetch(`${API_BASE}/players/${username}/achievement-stats`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to fetch achievement player stats:', error);\n      // Return empty object as fallback\n      return {};\n    }\n  },\n\n  // UPDATE the getPlayerStats function:\n  async getPlayerStats(username = 'Jroc_182') { // Changed default\n    try {\n      if (!username) {\n        console.warn('No username provided for player stats, using default');\n        username = 'Jroc_182'; // Changed default\n      }\n      \n      const response = await fetch(`${API_BASE}/players/${username}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to fetch player stats:', error);\n      throw error;\n    }\n  },\n\n  async updateTask(taskId, taskData, username = 'Jroc_182') { // Changed default\n    const requestData = {\n      title: taskData.title,\n      description: taskData.description,\n      priority: taskData.priority,\n      dueDate: taskData.dueDate,\n      tags: taskData.tags,\n      taskListId: taskData.taskListId,\n      completed: taskData.completed\n    };\n\n    const response = await fetch(`${API_BASE}/tasks/${taskId}?username=${username}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(requestData),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Update task error:', errorText);\n      throw new Error(`Failed to update task: ${response.status} - ${errorText}`);\n    }\n\n    return await response.json();\n  },\n};\n\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}