{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport apiService from '../services/api';\nexport const usePlayer = () => {\n  _s();\n  const [playerStats, setPlayerStats] = useState({\n    username: 'PixelAdventurer',\n    level: 1,\n    experience: 0,\n    experienceToNext: 100,\n    totalNotes: 0,\n    totalWords: 0,\n    uniqueTags: 0,\n    achievementsUnlocked: 0\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchPlayerStats = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await apiService.getPlayerStats();\n\n      // Handle gaming response format\n      const stats = response.data || response;\n      setPlayerStats(prevStats => ({\n        ...prevStats,\n        ...stats\n      }));\n    } catch (err) {\n      setError('Failed to fetch player stats');\n      console.error('Error fetching player stats:', err);\n\n      // Use default stats if API fails\n      setPlayerStats(prevStats => ({\n        ...prevStats\n        // Keep existing stats or use defaults\n      }));\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const updatePlayerStats = useCallback(newStats => {\n    setPlayerStats(prevStats => ({\n      ...prevStats,\n      ...newStats\n    }));\n  }, []);\n  useEffect(() => {\n    fetchPlayerStats();\n  }, [fetchPlayerStats]);\n  return {\n    playerStats,\n    setPlayerStats: updatePlayerStats,\n    loading,\n    error,\n    refreshStats: fetchPlayerStats\n  };\n};\n_s(usePlayer, \"N6W+R+vYmPkb44qv7GC7yltsSSk=\");","map":{"version":3,"names":["useState","useEffect","useCallback","apiService","usePlayer","_s","playerStats","setPlayerStats","username","level","experience","experienceToNext","totalNotes","totalWords","uniqueTags","achievementsUnlocked","loading","setLoading","error","setError","fetchPlayerStats","response","getPlayerStats","stats","data","prevStats","err","console","updatePlayerStats","newStats","refreshStats"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/usePlayer.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport  apiService  from '../services/api';\n\nexport const usePlayer = () => {\n  const [playerStats, setPlayerStats] = useState({\n    username: 'PixelAdventurer',\n    level: 1,\n    experience: 0,\n    experienceToNext: 100,\n    totalNotes: 0,\n    totalWords: 0,\n    uniqueTags: 0,\n    achievementsUnlocked: 0\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const fetchPlayerStats = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await apiService.getPlayerStats();\n      \n      // Handle gaming response format\n      const stats = response.data || response;\n      setPlayerStats(prevStats => ({\n        ...prevStats,\n        ...stats\n      }));\n    } catch (err) {\n      setError('Failed to fetch player stats');\n      console.error('Error fetching player stats:', err);\n      \n      // Use default stats if API fails\n      setPlayerStats(prevStats => ({\n        ...prevStats,\n        // Keep existing stats or use defaults\n      }));\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const updatePlayerStats = useCallback((newStats) => {\n    setPlayerStats(prevStats => ({\n      ...prevStats,\n      ...newStats\n    }));\n  }, []);\n\n  useEffect(() => {\n    fetchPlayerStats();\n  }, [fetchPlayerStats]);\n\n  return {\n    playerStats,\n    setPlayerStats: updatePlayerStats,\n    loading,\n    error,\n    refreshStats: fetchPlayerStats,\n  };\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,OAAQC,UAAU,MAAO,iBAAiB;AAE1C,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC;IAC7CQ,QAAQ,EAAE,iBAAiB;IAC3BC,KAAK,EAAE,CAAC;IACRC,UAAU,EAAE,CAAC;IACbC,gBAAgB,EAAE,GAAG;IACrBC,UAAU,EAAE,CAAC;IACbC,UAAU,EAAE,CAAC;IACbC,UAAU,EAAE,CAAC;IACbC,oBAAoB,EAAE;EACxB,CAAC,CAAC;EACF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMoB,gBAAgB,GAAGlB,WAAW,CAAC,YAAY;IAC/C,IAAI;MACFe,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,MAAME,QAAQ,GAAG,MAAMlB,UAAU,CAACmB,cAAc,CAAC,CAAC;;MAElD;MACA,MAAMC,KAAK,GAAGF,QAAQ,CAACG,IAAI,IAAIH,QAAQ;MACvCd,cAAc,CAACkB,SAAS,KAAK;QAC3B,GAAGA,SAAS;QACZ,GAAGF;MACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZP,QAAQ,CAAC,8BAA8B,CAAC;MACxCQ,OAAO,CAACT,KAAK,CAAC,8BAA8B,EAAEQ,GAAG,CAAC;;MAElD;MACAnB,cAAc,CAACkB,SAAS,KAAK;QAC3B,GAAGA;QACH;MACF,CAAC,CAAC,CAAC;IACL,CAAC,SAAS;MACRR,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMW,iBAAiB,GAAG1B,WAAW,CAAE2B,QAAQ,IAAK;IAClDtB,cAAc,CAACkB,SAAS,KAAK;MAC3B,GAAGA,SAAS;MACZ,GAAGI;IACL,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN5B,SAAS,CAAC,MAAM;IACdmB,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,CAACA,gBAAgB,CAAC,CAAC;EAEtB,OAAO;IACLd,WAAW;IACXC,cAAc,EAAEqB,iBAAiB;IACjCZ,OAAO;IACPE,KAAK;IACLY,YAAY,EAAEV;EAChB,CAAC;AACH,CAAC;AAACf,EAAA,CA1DWD,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}