{"ast":null,"code":"import apiService from './api';\nimport { allAchievements } from '../data/achievements';\nclass BackendAchievementService {\n  constructor() {\n    this.allAchievements = [];\n    this.playerAchievements = [];\n    this.playerStats = {};\n    this.loaded = false;\n  }\n  getUnlockedAchievements() {\n    if (!this.loaded) {\n      console.warn('⚠️ Backend achievement service not loaded yet');\n      return [];\n    }\n    const unlockedIds = this.playerAchievements.filter(pa => pa.unlocked).map(pa => pa.achievementId);\n    const unlockedAchievements = this.allAchievements.filter(achievement => unlockedIds.includes(achievement.id)).map(achievement => {\n      const playerAch = this.playerAchievements.find(pa => pa.achievementId === achievement.id);\n      return {\n        ...achievement,\n        unlockedAt: (playerAch === null || playerAch === void 0 ? void 0 : playerAch.unlockedAt) || new Date().toISOString(),\n        progress: (playerAch === null || playerAch === void 0 ? void 0 : playerAch.progress) || 100\n      };\n    });\n    return unlockedAchievements;\n  }\n  getLockedAchievements() {\n    if (!this.loaded) {\n      console.warn('⚠️ Backend achievement service not loaded yet');\n      return [];\n    }\n    const unlockedIds = this.playerAchievements.filter(pa => pa.unlocked).map(pa => pa.achievementId);\n    return this.allAchievements.filter(achievement => !unlockedIds.includes(achievement.id));\n  }\n  getInProgressAchievements() {\n    if (!this.loaded) {\n      console.warn('⚠️ Backend achievement service not loaded yet');\n      return [];\n    }\n    const inProgressIds = this.playerAchievements.filter(pa => !pa.unlocked && pa.progress > 0).map(pa => pa.achievementId);\n    return this.allAchievements.filter(achievement => inProgressIds.includes(achievement.id)).map(achievement => {\n      const playerAch = this.playerAchievements.find(pa => pa.achievementId === achievement.id);\n      return {\n        ...achievement,\n        progress: (playerAch === null || playerAch === void 0 ? void 0 : playerAch.progress) || 0\n      };\n    });\n  }\n\n  // Load player data from localStorage\n  loadPlayerDataFromLocalStorage() {\n    console.log('🔄 LOADING PLAYER DATA FROM LOCALSTORAGE');\n\n    // Load unlocked achievements from localStorage and filter out nulls\n    const unlockedIds = JSON.parse(localStorage.getItem('unlockedAchievements') || '[]').filter(id => id !== null && id !== undefined);\n    const achievementData = JSON.parse(localStorage.getItem('achievementData') || '{}');\n    console.log('📦 LocalStorage player data:', {\n      unlockedIds,\n      achievementData\n    });\n\n    // 🔍 DEBUG: Check if the achievement IDs from localStorage actually exist\n    unlockedIds.forEach(id => {\n      const exists = this.allAchievements.find(a => a.id === id);\n      if (!exists) {\n        console.warn(`⚠️ Achievement ${id} from localStorage not found in allAchievements`);\n        console.log('Available achievement IDs starting with FIRST:', this.allAchievements.filter(a => a.id.includes('FIRST')).map(a => a.id));\n      }\n    });\n\n    // Convert to player achievement format\n    this.playerAchievements = unlockedIds.map(achievementId => {\n      var _achievementData$achi;\n      return {\n        achievementId,\n        unlocked: true,\n        progress: 100,\n        unlockedAt: ((_achievementData$achi = achievementData[achievementId]) === null || _achievementData$achi === void 0 ? void 0 : _achievementData$achi.unlockedAt) || new Date().toISOString()\n      };\n    });\n\n    // Mock player stats\n    this.playerStats = {\n      totalNotes: 0,\n      totalWords: 0,\n      completedAchievements: unlockedIds.length,\n      totalSessions: 0,\n      totalFocusTime: 0,\n      totalXp: unlockedIds.length * 100 // 100 XP per achievement\n    };\n    console.log('✅ Loaded player data from localStorage:', {\n      playerAchievements: this.playerAchievements.length,\n      unlockedCount: unlockedIds.length\n    });\n  }\n\n  // NEW: Load from localStorage if backend fails completely\n  loadFromLocalStorage() {\n    console.log('🔄 LOADING EVERYTHING FROM LOCALSTORAGE');\n\n    // Use local achievements data\n    this.allAchievements = allAchievements;\n\n    // Load player data\n    this.loadPlayerDataFromLocalStorage();\n    this.loaded = true;\n    console.log('✅ Loaded everything from localStorage:', {\n      allAchievements: this.allAchievements.length,\n      playerAchievements: this.playerAchievements.length\n    });\n  }\n  async loadData(username = 'Jroc_182') {\n    try {\n      var _this$allAchievements, _this$playerAchieveme;\n      console.log('🔄 BACKEND SERVICE: Loading data for', username);\n\n      // Try to load achievements from API\n      let achievements = [];\n      try {\n        var _achievements;\n        achievements = await apiService.getAllAchievements();\n        console.log('✅ Loaded achievements from API:', ((_achievements = achievements) === null || _achievements === void 0 ? void 0 : _achievements.length) || 0);\n      } catch (error) {\n        console.warn('⚠️ Failed to load achievements from API, using local data');\n        achievements = allAchievements;\n      }\n\n      // Try to load player data from API\n      let playerAchievements = [];\n      let stats = {};\n      try {\n        const [playerAchievementsData, statsData] = await Promise.all([apiService.getPlayerAchievements(username), apiService.getAchievementPlayerStats(username)]);\n        playerAchievements = playerAchievementsData || [];\n        stats = statsData || {};\n        console.log('✅ Loaded player data from API');\n      } catch (error) {\n        console.warn('⚠️ Failed to load player data from API, using localStorage');\n        // Don't load from localStorage here yet - we'll do it below\n      }\n\n      // Set the achievements data (either from API or local)\n      this.allAchievements = achievements;\n\n      // If we got player data from API, use it. Otherwise, load from localStorage\n      if (playerAchievements.length > 0 || Object.keys(stats).length > 0) {\n        console.log('📡 Using API player data');\n        this.playerAchievements = playerAchievements;\n        this.playerStats = stats;\n      } else {\n        console.log('💾 No API player data found, loading from localStorage');\n        this.loadPlayerDataFromLocalStorage();\n      }\n      this.loaded = true;\n      console.log('🔍 BACKEND SERVICE: Final data loaded:');\n      console.log('   - achievements:', ((_this$allAchievements = this.allAchievements) === null || _this$allAchievements === void 0 ? void 0 : _this$allAchievements.length) || 0);\n      console.log('   - playerAchievements:', ((_this$playerAchieveme = this.playerAchievements) === null || _this$playerAchieveme === void 0 ? void 0 : _this$playerAchieveme.length) || 0);\n      console.log('   - stats:', this.playerStats);\n      console.log('✅ Backend achievement data loaded for', username);\n      return {\n        achievements: this.allAchievements,\n        playerAchievements: this.playerAchievements,\n        stats: this.playerStats\n      };\n    } catch (error) {\n      console.error('❌ Failed to load backend achievements:', error);\n\n      // 🔄 COMPLETE FALLBACK: Load everything from localStorage\n      console.log('🔄 COMPLETE BACKEND FAILURE: Loading everything from localStorage');\n      this.loadFromLocalStorage();\n      return {\n        achievements: this.allAchievements,\n        playerAchievements: this.playerAchievements,\n        stats: this.playerStats\n      };\n    }\n  }\n  isUnlocked(achievementId) {\n    if (!this.loaded) return false;\n    const playerAch = this.playerAchievements.find(pa => pa.achievementId === achievementId);\n    return (playerAch === null || playerAch === void 0 ? void 0 : playerAch.unlocked) || false;\n  }\n  unlockAchievement(achievementId) {\n    // Find or create player achievement\n    let playerAch = this.playerAchievements.find(pa => pa.achievementId === achievementId);\n    if (!playerAch) {\n      playerAch = {\n        achievementId,\n        progress: 100,\n        unlocked: true,\n        unlockedAt: new Date().toISOString()\n      };\n      this.playerAchievements.push(playerAch);\n    } else {\n      playerAch.unlocked = true;\n      playerAch.progress = 100;\n      playerAch.unlockedAt = new Date().toISOString();\n    }\n    console.log(`🏆 Unlocked achievement: ${achievementId}`);\n  }\n  getStats() {\n    if (!this.loaded) {\n      return {\n        total: 0,\n        unlocked: 0,\n        locked: 0,\n        inProgress: 0,\n        completionRate: 0\n      };\n    }\n    const unlockedCount = this.getUnlockedAchievements().length;\n    const totalCount = this.allAchievements.length;\n    const inProgressCount = this.getInProgressAchievements().length;\n    const lockedCount = totalCount - unlockedCount;\n    return {\n      total: totalCount,\n      unlocked: unlockedCount,\n      locked: lockedCount,\n      inProgress: inProgressCount,\n      completionRate: totalCount > 0 ? Math.round(unlockedCount / totalCount * 100) : 0\n    };\n  }\n}\n\n// Export singleton instance\nconst backendAchievementService = new BackendAchievementService();\nexport default backendAchievementService;","map":{"version":3,"names":["apiService","allAchievements","BackendAchievementService","constructor","playerAchievements","playerStats","loaded","getUnlockedAchievements","console","warn","unlockedIds","filter","pa","unlocked","map","achievementId","unlockedAchievements","achievement","includes","id","playerAch","find","unlockedAt","Date","toISOString","progress","getLockedAchievements","getInProgressAchievements","inProgressIds","loadPlayerDataFromLocalStorage","log","JSON","parse","localStorage","getItem","undefined","achievementData","forEach","exists","a","_achievementData$achi","totalNotes","totalWords","completedAchievements","length","totalSessions","totalFocusTime","totalXp","unlockedCount","loadFromLocalStorage","loadData","username","_this$allAchievements","_this$playerAchieveme","achievements","_achievements","getAllAchievements","error","stats","playerAchievementsData","statsData","Promise","all","getPlayerAchievements","getAchievementPlayerStats","Object","keys","isUnlocked","unlockAchievement","push","getStats","total","locked","inProgress","completionRate","totalCount","inProgressCount","lockedCount","Math","round","backendAchievementService"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/services/backendAchievementService.js"],"sourcesContent":["import apiService from './api';\nimport { allAchievements } from '../data/achievements';\n\nclass BackendAchievementService {\n  constructor() {\n    this.allAchievements = [];\n    this.playerAchievements = [];\n    this.playerStats = {};\n    this.loaded = false;\n  }\n\n  getUnlockedAchievements() {\n    if (!this.loaded) {\n      console.warn('⚠️ Backend achievement service not loaded yet');\n      return [];\n    }\n    \n    const unlockedIds = this.playerAchievements\n      .filter(pa => pa.unlocked)\n      .map(pa => pa.achievementId);\n    \n    const unlockedAchievements = this.allAchievements\n      .filter(achievement => unlockedIds.includes(achievement.id))\n      .map(achievement => {\n        const playerAch = this.playerAchievements.find(pa => pa.achievementId === achievement.id);\n        return {\n          ...achievement,\n          unlockedAt: playerAch?.unlockedAt || new Date().toISOString(),\n          progress: playerAch?.progress || 100\n        };\n      });\n    \n    return unlockedAchievements;\n  }\n\n  getLockedAchievements() {\n    if (!this.loaded) {\n      console.warn('⚠️ Backend achievement service not loaded yet');\n      return [];\n    }\n    \n    const unlockedIds = this.playerAchievements\n      .filter(pa => pa.unlocked)\n      .map(pa => pa.achievementId);\n    \n    return this.allAchievements.filter(achievement => !unlockedIds.includes(achievement.id));\n  }\n\n  getInProgressAchievements() {\n    if (!this.loaded) {\n      console.warn('⚠️ Backend achievement service not loaded yet');\n      return [];\n    }\n    \n    const inProgressIds = this.playerAchievements\n      .filter(pa => !pa.unlocked && pa.progress > 0)\n      .map(pa => pa.achievementId);\n    \n    return this.allAchievements\n      .filter(achievement => inProgressIds.includes(achievement.id))\n      .map(achievement => {\n        const playerAch = this.playerAchievements.find(pa => pa.achievementId === achievement.id);\n        return {\n          ...achievement,\n          progress: playerAch?.progress || 0\n        };\n      });\n  }\n\n  // Load player data from localStorage\n  loadPlayerDataFromLocalStorage() {\n    console.log('🔄 LOADING PLAYER DATA FROM LOCALSTORAGE');\n    \n    // Load unlocked achievements from localStorage and filter out nulls\n    const unlockedIds = JSON.parse(localStorage.getItem('unlockedAchievements') || '[]')\n      .filter(id => id !== null && id !== undefined);\n    \n    const achievementData = JSON.parse(localStorage.getItem('achievementData') || '{}');\n    \n    console.log('📦 LocalStorage player data:', { unlockedIds, achievementData });\n    \n    // 🔍 DEBUG: Check if the achievement IDs from localStorage actually exist\n    unlockedIds.forEach(id => {\n      const exists = this.allAchievements.find(a => a.id === id);\n      if (!exists) {\n        console.warn(`⚠️ Achievement ${id} from localStorage not found in allAchievements`);\n        console.log('Available achievement IDs starting with FIRST:', \n          this.allAchievements.filter(a => a.id.includes('FIRST')).map(a => a.id)\n        );\n      }\n    });\n    \n    // Convert to player achievement format\n    this.playerAchievements = unlockedIds.map(achievementId => ({\n      achievementId,\n      unlocked: true,\n      progress: 100,\n      unlockedAt: achievementData[achievementId]?.unlockedAt || new Date().toISOString()\n    }));\n    \n    // Mock player stats\n    this.playerStats = {\n      totalNotes: 0,\n      totalWords: 0,\n      completedAchievements: unlockedIds.length,\n      totalSessions: 0,\n      totalFocusTime: 0,\n      totalXp: unlockedIds.length * 100 // 100 XP per achievement\n    };\n    \n    console.log('✅ Loaded player data from localStorage:', {\n      playerAchievements: this.playerAchievements.length,\n      unlockedCount: unlockedIds.length\n    });\n  }\n\n  // NEW: Load from localStorage if backend fails completely\n  loadFromLocalStorage() {\n    console.log('🔄 LOADING EVERYTHING FROM LOCALSTORAGE');\n    \n    // Use local achievements data\n    this.allAchievements = allAchievements;\n    \n    // Load player data\n    this.loadPlayerDataFromLocalStorage();\n    \n    this.loaded = true;\n    \n    console.log('✅ Loaded everything from localStorage:', {\n      allAchievements: this.allAchievements.length,\n      playerAchievements: this.playerAchievements.length\n    });\n  }\n\n  async loadData(username = 'Jroc_182') {\n    try {\n      console.log('🔄 BACKEND SERVICE: Loading data for', username);\n      \n      // Try to load achievements from API\n      let achievements = [];\n      try {\n        achievements = await apiService.getAllAchievements();\n        console.log('✅ Loaded achievements from API:', achievements?.length || 0);\n      } catch (error) {\n        console.warn('⚠️ Failed to load achievements from API, using local data');\n        achievements = allAchievements;\n      }\n\n      // Try to load player data from API\n      let playerAchievements = [];\n      let stats = {};\n      \n      try {\n        const [playerAchievementsData, statsData] = await Promise.all([\n          apiService.getPlayerAchievements(username),\n          apiService.getAchievementPlayerStats(username)\n        ]);\n        playerAchievements = playerAchievementsData || [];\n        stats = statsData || {};\n        console.log('✅ Loaded player data from API');\n      } catch (error) {\n        console.warn('⚠️ Failed to load player data from API, using localStorage');\n        // Don't load from localStorage here yet - we'll do it below\n      }\n\n      // Set the achievements data (either from API or local)\n      this.allAchievements = achievements;\n\n      // If we got player data from API, use it. Otherwise, load from localStorage\n      if (playerAchievements.length > 0 || Object.keys(stats).length > 0) {\n        console.log('📡 Using API player data');\n        this.playerAchievements = playerAchievements;\n        this.playerStats = stats;\n      } else {\n        console.log('💾 No API player data found, loading from localStorage');\n        this.loadPlayerDataFromLocalStorage();\n      }\n\n      this.loaded = true;\n\n      console.log('🔍 BACKEND SERVICE: Final data loaded:');\n      console.log('   - achievements:', this.allAchievements?.length || 0);\n      console.log('   - playerAchievements:', this.playerAchievements?.length || 0);\n      console.log('   - stats:', this.playerStats);\n      console.log('✅ Backend achievement data loaded for', username);\n\n      return { \n        achievements: this.allAchievements, \n        playerAchievements: this.playerAchievements, \n        stats: this.playerStats \n      };\n    } catch (error) {\n      console.error('❌ Failed to load backend achievements:', error);\n      \n      // 🔄 COMPLETE FALLBACK: Load everything from localStorage\n      console.log('🔄 COMPLETE BACKEND FAILURE: Loading everything from localStorage');\n      this.loadFromLocalStorage();\n      \n      return {\n        achievements: this.allAchievements,\n        playerAchievements: this.playerAchievements,\n        stats: this.playerStats\n      };\n    }\n  }\n\n  isUnlocked(achievementId) {\n    if (!this.loaded) return false;\n    \n    const playerAch = this.playerAchievements.find(pa => pa.achievementId === achievementId);\n    return playerAch?.unlocked || false;\n  }\n\n  unlockAchievement(achievementId) {\n    // Find or create player achievement\n    let playerAch = this.playerAchievements.find(pa => pa.achievementId === achievementId);\n    \n    if (!playerAch) {\n      playerAch = {\n        achievementId,\n        progress: 100,\n        unlocked: true,\n        unlockedAt: new Date().toISOString()\n      };\n      this.playerAchievements.push(playerAch);\n    } else {\n      playerAch.unlocked = true;\n      playerAch.progress = 100;\n      playerAch.unlockedAt = new Date().toISOString();\n    }\n    \n    console.log(`🏆 Unlocked achievement: ${achievementId}`);\n  }\n\n  getStats() {\n    if (!this.loaded) {\n      return {\n        total: 0,\n        unlocked: 0,\n        locked: 0,\n        inProgress: 0,\n        completionRate: 0\n      };\n    }\n\n    const unlockedCount = this.getUnlockedAchievements().length;\n    const totalCount = this.allAchievements.length;\n    const inProgressCount = this.getInProgressAchievements().length;\n    const lockedCount = totalCount - unlockedCount;\n\n    return {\n      total: totalCount,\n      unlocked: unlockedCount,\n      locked: lockedCount,\n      inProgress: inProgressCount,\n      completionRate: totalCount > 0 ? Math.round((unlockedCount / totalCount) * 100) : 0\n    };\n  }\n}\n\n// Export singleton instance\nconst backendAchievementService = new BackendAchievementService();\nexport default backendAchievementService;"],"mappings":"AAAA,OAAOA,UAAU,MAAM,OAAO;AAC9B,SAASC,eAAe,QAAQ,sBAAsB;AAEtD,MAAMC,yBAAyB,CAAC;EAC9BC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACF,eAAe,GAAG,EAAE;IACzB,IAAI,CAACG,kBAAkB,GAAG,EAAE;IAC5B,IAAI,CAACC,WAAW,GAAG,CAAC,CAAC;IACrB,IAAI,CAACC,MAAM,GAAG,KAAK;EACrB;EAEAC,uBAAuBA,CAAA,EAAG;IACxB,IAAI,CAAC,IAAI,CAACD,MAAM,EAAE;MAChBE,OAAO,CAACC,IAAI,CAAC,+CAA+C,CAAC;MAC7D,OAAO,EAAE;IACX;IAEA,MAAMC,WAAW,GAAG,IAAI,CAACN,kBAAkB,CACxCO,MAAM,CAACC,EAAE,IAAIA,EAAE,CAACC,QAAQ,CAAC,CACzBC,GAAG,CAACF,EAAE,IAAIA,EAAE,CAACG,aAAa,CAAC;IAE9B,MAAMC,oBAAoB,GAAG,IAAI,CAACf,eAAe,CAC9CU,MAAM,CAACM,WAAW,IAAIP,WAAW,CAACQ,QAAQ,CAACD,WAAW,CAACE,EAAE,CAAC,CAAC,CAC3DL,GAAG,CAACG,WAAW,IAAI;MAClB,MAAMG,SAAS,GAAG,IAAI,CAAChB,kBAAkB,CAACiB,IAAI,CAACT,EAAE,IAAIA,EAAE,CAACG,aAAa,KAAKE,WAAW,CAACE,EAAE,CAAC;MACzF,OAAO;QACL,GAAGF,WAAW;QACdK,UAAU,EAAE,CAAAF,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEE,UAAU,KAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QAC7DC,QAAQ,EAAE,CAAAL,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEK,QAAQ,KAAI;MACnC,CAAC;IACH,CAAC,CAAC;IAEJ,OAAOT,oBAAoB;EAC7B;EAEAU,qBAAqBA,CAAA,EAAG;IACtB,IAAI,CAAC,IAAI,CAACpB,MAAM,EAAE;MAChBE,OAAO,CAACC,IAAI,CAAC,+CAA+C,CAAC;MAC7D,OAAO,EAAE;IACX;IAEA,MAAMC,WAAW,GAAG,IAAI,CAACN,kBAAkB,CACxCO,MAAM,CAACC,EAAE,IAAIA,EAAE,CAACC,QAAQ,CAAC,CACzBC,GAAG,CAACF,EAAE,IAAIA,EAAE,CAACG,aAAa,CAAC;IAE9B,OAAO,IAAI,CAACd,eAAe,CAACU,MAAM,CAACM,WAAW,IAAI,CAACP,WAAW,CAACQ,QAAQ,CAACD,WAAW,CAACE,EAAE,CAAC,CAAC;EAC1F;EAEAQ,yBAAyBA,CAAA,EAAG;IAC1B,IAAI,CAAC,IAAI,CAACrB,MAAM,EAAE;MAChBE,OAAO,CAACC,IAAI,CAAC,+CAA+C,CAAC;MAC7D,OAAO,EAAE;IACX;IAEA,MAAMmB,aAAa,GAAG,IAAI,CAACxB,kBAAkB,CAC1CO,MAAM,CAACC,EAAE,IAAI,CAACA,EAAE,CAACC,QAAQ,IAAID,EAAE,CAACa,QAAQ,GAAG,CAAC,CAAC,CAC7CX,GAAG,CAACF,EAAE,IAAIA,EAAE,CAACG,aAAa,CAAC;IAE9B,OAAO,IAAI,CAACd,eAAe,CACxBU,MAAM,CAACM,WAAW,IAAIW,aAAa,CAACV,QAAQ,CAACD,WAAW,CAACE,EAAE,CAAC,CAAC,CAC7DL,GAAG,CAACG,WAAW,IAAI;MAClB,MAAMG,SAAS,GAAG,IAAI,CAAChB,kBAAkB,CAACiB,IAAI,CAACT,EAAE,IAAIA,EAAE,CAACG,aAAa,KAAKE,WAAW,CAACE,EAAE,CAAC;MACzF,OAAO;QACL,GAAGF,WAAW;QACdQ,QAAQ,EAAE,CAAAL,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEK,QAAQ,KAAI;MACnC,CAAC;IACH,CAAC,CAAC;EACN;;EAEA;EACAI,8BAA8BA,CAAA,EAAG;IAC/BrB,OAAO,CAACsB,GAAG,CAAC,0CAA0C,CAAC;;IAEvD;IACA,MAAMpB,WAAW,GAAGqB,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,sBAAsB,CAAC,IAAI,IAAI,CAAC,CACjFvB,MAAM,CAACQ,EAAE,IAAIA,EAAE,KAAK,IAAI,IAAIA,EAAE,KAAKgB,SAAS,CAAC;IAEhD,MAAMC,eAAe,GAAGL,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC;IAEnF1B,OAAO,CAACsB,GAAG,CAAC,8BAA8B,EAAE;MAAEpB,WAAW;MAAE0B;IAAgB,CAAC,CAAC;;IAE7E;IACA1B,WAAW,CAAC2B,OAAO,CAAClB,EAAE,IAAI;MACxB,MAAMmB,MAAM,GAAG,IAAI,CAACrC,eAAe,CAACoB,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACpB,EAAE,KAAKA,EAAE,CAAC;MAC1D,IAAI,CAACmB,MAAM,EAAE;QACX9B,OAAO,CAACC,IAAI,CAAC,kBAAkBU,EAAE,iDAAiD,CAAC;QACnFX,OAAO,CAACsB,GAAG,CAAC,gDAAgD,EAC1D,IAAI,CAAC7B,eAAe,CAACU,MAAM,CAAC4B,CAAC,IAAIA,CAAC,CAACpB,EAAE,CAACD,QAAQ,CAAC,OAAO,CAAC,CAAC,CAACJ,GAAG,CAACyB,CAAC,IAAIA,CAAC,CAACpB,EAAE,CACxE,CAAC;MACH;IACF,CAAC,CAAC;;IAEF;IACA,IAAI,CAACf,kBAAkB,GAAGM,WAAW,CAACI,GAAG,CAACC,aAAa;MAAA,IAAAyB,qBAAA;MAAA,OAAK;QAC1DzB,aAAa;QACbF,QAAQ,EAAE,IAAI;QACdY,QAAQ,EAAE,GAAG;QACbH,UAAU,EAAE,EAAAkB,qBAAA,GAAAJ,eAAe,CAACrB,aAAa,CAAC,cAAAyB,qBAAA,uBAA9BA,qBAAA,CAAgClB,UAAU,KAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACnF,CAAC;IAAA,CAAC,CAAC;;IAEH;IACA,IAAI,CAACnB,WAAW,GAAG;MACjBoC,UAAU,EAAE,CAAC;MACbC,UAAU,EAAE,CAAC;MACbC,qBAAqB,EAAEjC,WAAW,CAACkC,MAAM;MACzCC,aAAa,EAAE,CAAC;MAChBC,cAAc,EAAE,CAAC;MACjBC,OAAO,EAAErC,WAAW,CAACkC,MAAM,GAAG,GAAG,CAAC;IACpC,CAAC;IAEDpC,OAAO,CAACsB,GAAG,CAAC,yCAAyC,EAAE;MACrD1B,kBAAkB,EAAE,IAAI,CAACA,kBAAkB,CAACwC,MAAM;MAClDI,aAAa,EAAEtC,WAAW,CAACkC;IAC7B,CAAC,CAAC;EACJ;;EAEA;EACAK,oBAAoBA,CAAA,EAAG;IACrBzC,OAAO,CAACsB,GAAG,CAAC,yCAAyC,CAAC;;IAEtD;IACA,IAAI,CAAC7B,eAAe,GAAGA,eAAe;;IAEtC;IACA,IAAI,CAAC4B,8BAA8B,CAAC,CAAC;IAErC,IAAI,CAACvB,MAAM,GAAG,IAAI;IAElBE,OAAO,CAACsB,GAAG,CAAC,wCAAwC,EAAE;MACpD7B,eAAe,EAAE,IAAI,CAACA,eAAe,CAAC2C,MAAM;MAC5CxC,kBAAkB,EAAE,IAAI,CAACA,kBAAkB,CAACwC;IAC9C,CAAC,CAAC;EACJ;EAEA,MAAMM,QAAQA,CAACC,QAAQ,GAAG,UAAU,EAAE;IACpC,IAAI;MAAA,IAAAC,qBAAA,EAAAC,qBAAA;MACF7C,OAAO,CAACsB,GAAG,CAAC,sCAAsC,EAAEqB,QAAQ,CAAC;;MAE7D;MACA,IAAIG,YAAY,GAAG,EAAE;MACrB,IAAI;QAAA,IAAAC,aAAA;QACFD,YAAY,GAAG,MAAMtD,UAAU,CAACwD,kBAAkB,CAAC,CAAC;QACpDhD,OAAO,CAACsB,GAAG,CAAC,iCAAiC,EAAE,EAAAyB,aAAA,GAAAD,YAAY,cAAAC,aAAA,uBAAZA,aAAA,CAAcX,MAAM,KAAI,CAAC,CAAC;MAC3E,CAAC,CAAC,OAAOa,KAAK,EAAE;QACdjD,OAAO,CAACC,IAAI,CAAC,2DAA2D,CAAC;QACzE6C,YAAY,GAAGrD,eAAe;MAChC;;MAEA;MACA,IAAIG,kBAAkB,GAAG,EAAE;MAC3B,IAAIsD,KAAK,GAAG,CAAC,CAAC;MAEd,IAAI;QACF,MAAM,CAACC,sBAAsB,EAAEC,SAAS,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC5D9D,UAAU,CAAC+D,qBAAqB,CAACZ,QAAQ,CAAC,EAC1CnD,UAAU,CAACgE,yBAAyB,CAACb,QAAQ,CAAC,CAC/C,CAAC;QACF/C,kBAAkB,GAAGuD,sBAAsB,IAAI,EAAE;QACjDD,KAAK,GAAGE,SAAS,IAAI,CAAC,CAAC;QACvBpD,OAAO,CAACsB,GAAG,CAAC,+BAA+B,CAAC;MAC9C,CAAC,CAAC,OAAO2B,KAAK,EAAE;QACdjD,OAAO,CAACC,IAAI,CAAC,4DAA4D,CAAC;QAC1E;MACF;;MAEA;MACA,IAAI,CAACR,eAAe,GAAGqD,YAAY;;MAEnC;MACA,IAAIlD,kBAAkB,CAACwC,MAAM,GAAG,CAAC,IAAIqB,MAAM,CAACC,IAAI,CAACR,KAAK,CAAC,CAACd,MAAM,GAAG,CAAC,EAAE;QAClEpC,OAAO,CAACsB,GAAG,CAAC,0BAA0B,CAAC;QACvC,IAAI,CAAC1B,kBAAkB,GAAGA,kBAAkB;QAC5C,IAAI,CAACC,WAAW,GAAGqD,KAAK;MAC1B,CAAC,MAAM;QACLlD,OAAO,CAACsB,GAAG,CAAC,wDAAwD,CAAC;QACrE,IAAI,CAACD,8BAA8B,CAAC,CAAC;MACvC;MAEA,IAAI,CAACvB,MAAM,GAAG,IAAI;MAElBE,OAAO,CAACsB,GAAG,CAAC,wCAAwC,CAAC;MACrDtB,OAAO,CAACsB,GAAG,CAAC,oBAAoB,EAAE,EAAAsB,qBAAA,OAAI,CAACnD,eAAe,cAAAmD,qBAAA,uBAApBA,qBAAA,CAAsBR,MAAM,KAAI,CAAC,CAAC;MACpEpC,OAAO,CAACsB,GAAG,CAAC,0BAA0B,EAAE,EAAAuB,qBAAA,OAAI,CAACjD,kBAAkB,cAAAiD,qBAAA,uBAAvBA,qBAAA,CAAyBT,MAAM,KAAI,CAAC,CAAC;MAC7EpC,OAAO,CAACsB,GAAG,CAAC,aAAa,EAAE,IAAI,CAACzB,WAAW,CAAC;MAC5CG,OAAO,CAACsB,GAAG,CAAC,uCAAuC,EAAEqB,QAAQ,CAAC;MAE9D,OAAO;QACLG,YAAY,EAAE,IAAI,CAACrD,eAAe;QAClCG,kBAAkB,EAAE,IAAI,CAACA,kBAAkB;QAC3CsD,KAAK,EAAE,IAAI,CAACrD;MACd,CAAC;IACH,CAAC,CAAC,OAAOoD,KAAK,EAAE;MACdjD,OAAO,CAACiD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;;MAE9D;MACAjD,OAAO,CAACsB,GAAG,CAAC,mEAAmE,CAAC;MAChF,IAAI,CAACmB,oBAAoB,CAAC,CAAC;MAE3B,OAAO;QACLK,YAAY,EAAE,IAAI,CAACrD,eAAe;QAClCG,kBAAkB,EAAE,IAAI,CAACA,kBAAkB;QAC3CsD,KAAK,EAAE,IAAI,CAACrD;MACd,CAAC;IACH;EACF;EAEA8D,UAAUA,CAACpD,aAAa,EAAE;IACxB,IAAI,CAAC,IAAI,CAACT,MAAM,EAAE,OAAO,KAAK;IAE9B,MAAMc,SAAS,GAAG,IAAI,CAAChB,kBAAkB,CAACiB,IAAI,CAACT,EAAE,IAAIA,EAAE,CAACG,aAAa,KAAKA,aAAa,CAAC;IACxF,OAAO,CAAAK,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEP,QAAQ,KAAI,KAAK;EACrC;EAEAuD,iBAAiBA,CAACrD,aAAa,EAAE;IAC/B;IACA,IAAIK,SAAS,GAAG,IAAI,CAAChB,kBAAkB,CAACiB,IAAI,CAACT,EAAE,IAAIA,EAAE,CAACG,aAAa,KAAKA,aAAa,CAAC;IAEtF,IAAI,CAACK,SAAS,EAAE;MACdA,SAAS,GAAG;QACVL,aAAa;QACbU,QAAQ,EAAE,GAAG;QACbZ,QAAQ,EAAE,IAAI;QACdS,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACrC,CAAC;MACD,IAAI,CAACpB,kBAAkB,CAACiE,IAAI,CAACjD,SAAS,CAAC;IACzC,CAAC,MAAM;MACLA,SAAS,CAACP,QAAQ,GAAG,IAAI;MACzBO,SAAS,CAACK,QAAQ,GAAG,GAAG;MACxBL,SAAS,CAACE,UAAU,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACjD;IAEAhB,OAAO,CAACsB,GAAG,CAAC,4BAA4Bf,aAAa,EAAE,CAAC;EAC1D;EAEAuD,QAAQA,CAAA,EAAG;IACT,IAAI,CAAC,IAAI,CAAChE,MAAM,EAAE;MAChB,OAAO;QACLiE,KAAK,EAAE,CAAC;QACR1D,QAAQ,EAAE,CAAC;QACX2D,MAAM,EAAE,CAAC;QACTC,UAAU,EAAE,CAAC;QACbC,cAAc,EAAE;MAClB,CAAC;IACH;IAEA,MAAM1B,aAAa,GAAG,IAAI,CAACzC,uBAAuB,CAAC,CAAC,CAACqC,MAAM;IAC3D,MAAM+B,UAAU,GAAG,IAAI,CAAC1E,eAAe,CAAC2C,MAAM;IAC9C,MAAMgC,eAAe,GAAG,IAAI,CAACjD,yBAAyB,CAAC,CAAC,CAACiB,MAAM;IAC/D,MAAMiC,WAAW,GAAGF,UAAU,GAAG3B,aAAa;IAE9C,OAAO;MACLuB,KAAK,EAAEI,UAAU;MACjB9D,QAAQ,EAAEmC,aAAa;MACvBwB,MAAM,EAAEK,WAAW;MACnBJ,UAAU,EAAEG,eAAe;MAC3BF,cAAc,EAAEC,UAAU,GAAG,CAAC,GAAGG,IAAI,CAACC,KAAK,CAAE/B,aAAa,GAAG2B,UAAU,GAAI,GAAG,CAAC,GAAG;IACpF,CAAC;EACH;AACF;;AAEA;AACA,MAAMK,yBAAyB,GAAG,IAAI9E,yBAAyB,CAAC,CAAC;AACjE,eAAe8E,yBAAyB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}