{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport apiService from '../services/api';\nexport const useAchievements = () => {\n  _s();\n  const [achievements, setAchievements] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [summary, setSummary] = useState({\n    total: 0,\n    completed: 0,\n    inProgress: 0,\n    locked: 0\n  });\n  const fetchAchievements = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await apiService.getAchievements();\n\n      // Handle gaming response format\n      const achievementData = response.data || response;\n      setAchievements(achievementData);\n      if (response.summary) {\n        setSummary(response.summary);\n      } else {\n        // Calculate summary from data\n        const completed = achievementData.filter(a => a.isCompleted).length;\n        const inProgress = achievementData.filter(a => a.progress > 0 && !a.isCompleted).length;\n        setSummary({\n          total: achievementData.length,\n          completed,\n          inProgress,\n          locked: achievementData.length - completed - inProgress\n        });\n      }\n    } catch (err) {\n      setError('Failed to fetch achievements');\n      console.error('Error fetching achievements:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    fetchAchievements();\n  }, [fetchAchievements]);\n  return {\n    achievements,\n    summary,\n    loading,\n    error,\n    refreshAchievements: fetchAchievements\n  };\n};\n_s(useAchievements, \"PwN9XaK3ASv9j8nlYA9jq5pNEZo=\");","map":{"version":3,"names":["useState","useEffect","useCallback","apiService","useAchievements","_s","achievements","setAchievements","loading","setLoading","error","setError","summary","setSummary","total","completed","inProgress","locked","fetchAchievements","response","getAchievements","achievementData","data","filter","a","isCompleted","length","progress","err","console","refreshAchievements"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/useAchievements.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport apiService from '../services/api';\n\nexport const useAchievements = () => {\n  const [achievements, setAchievements] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [summary, setSummary] = useState({\n    total: 0,\n    completed: 0,\n    inProgress: 0,\n    locked: 0\n  });\n\n  const fetchAchievements = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await apiService.getAchievements();\n      \n      // Handle gaming response format\n      const achievementData = response.data || response;\n      setAchievements(achievementData);\n      \n      if (response.summary) {\n        setSummary(response.summary);\n      } else {\n        // Calculate summary from data\n        const completed = achievementData.filter(a => a.isCompleted).length;\n        const inProgress = achievementData.filter(a => a.progress > 0 && !a.isCompleted).length;\n        setSummary({\n          total: achievementData.length,\n          completed,\n          inProgress,\n          locked: achievementData.length - completed - inProgress\n        });\n      }\n    } catch (err) {\n      setError('Failed to fetch achievements');\n      console.error('Error fetching achievements:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchAchievements();\n  }, [fetchAchievements]);\n\n  return {\n    achievements,\n    summary,\n    loading,\n    error,\n    refreshAchievements: fetchAchievements,\n  };\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,OAAOC,UAAU,MAAM,iBAAiB;AAExC,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC;IACrCc,KAAK,EAAE,CAAC;IACRC,SAAS,EAAE,CAAC;IACZC,UAAU,EAAE,CAAC;IACbC,MAAM,EAAE;EACV,CAAC,CAAC;EAEF,MAAMC,iBAAiB,GAAGhB,WAAW,CAAC,YAAY;IAChD,IAAI;MACFO,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,MAAMQ,QAAQ,GAAG,MAAMhB,UAAU,CAACiB,eAAe,CAAC,CAAC;;MAEnD;MACA,MAAMC,eAAe,GAAGF,QAAQ,CAACG,IAAI,IAAIH,QAAQ;MACjDZ,eAAe,CAACc,eAAe,CAAC;MAEhC,IAAIF,QAAQ,CAACP,OAAO,EAAE;QACpBC,UAAU,CAACM,QAAQ,CAACP,OAAO,CAAC;MAC9B,CAAC,MAAM;QACL;QACA,MAAMG,SAAS,GAAGM,eAAe,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,WAAW,CAAC,CAACC,MAAM;QACnE,MAAMV,UAAU,GAAGK,eAAe,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACG,QAAQ,GAAG,CAAC,IAAI,CAACH,CAAC,CAACC,WAAW,CAAC,CAACC,MAAM;QACvFb,UAAU,CAAC;UACTC,KAAK,EAAEO,eAAe,CAACK,MAAM;UAC7BX,SAAS;UACTC,UAAU;UACVC,MAAM,EAAEI,eAAe,CAACK,MAAM,GAAGX,SAAS,GAAGC;QAC/C,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOY,GAAG,EAAE;MACZjB,QAAQ,CAAC,8BAA8B,CAAC;MACxCkB,OAAO,CAACnB,KAAK,CAAC,8BAA8B,EAAEkB,GAAG,CAAC;IACpD,CAAC,SAAS;MACRnB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAENR,SAAS,CAAC,MAAM;IACdiB,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,CAACA,iBAAiB,CAAC,CAAC;EAEvB,OAAO;IACLZ,YAAY;IACZM,OAAO;IACPJ,OAAO;IACPE,KAAK;IACLoB,mBAAmB,EAAEZ;EACvB,CAAC;AACH,CAAC;AAACb,EAAA,CArDWD,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}