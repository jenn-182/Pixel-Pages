{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport useFocusSessions from './useFocusSessions';\nconst useProductivityStats = () => {\n  _s();\n  const [stats, setStats] = useState({\n    totalTime: 0,\n    todayTime: 0,\n    weekTime: 0,\n    monthTime: 0,\n    sessionBreakdown: [],\n    dailyStats: [],\n    streakCount: 0,\n    avgSessionLength: 0,\n    totalSessions: 0\n  });\n  const [loading, setLoading] = useState(true);\n  const {\n    getAllLogs,\n    sessions\n  } = useFocusSessions();\n  const calculateStats = () => {\n    try {\n      setLoading(true);\n      const logs = getAllLogs();\n      const now = new Date();\n      const today = new Date().toISOString().split('T')[0]; // \"2025-09-06\"\n      const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n      const monthAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n      // Calculate total time\n      const totalTime = logs.reduce((sum, log) => sum + log.timeSpent, 0);\n\n      // Calculate today's time\n      const todayTime = logs.filter(log => {\n        const logDate = new Date(log.date).toISOString().split('T')[0];\n        return logDate >= today;\n      }).reduce((sum, log) => sum + log.timeSpent, 0);\n\n      // Calculate week time\n      const weekTime = logs.filter(log => new Date(log.date) >= weekAgo).reduce((sum, log) => sum + log.timeSpent, 0);\n\n      // Calculate month time\n      const monthTime = logs.filter(log => new Date(log.date) >= monthAgo).reduce((sum, log) => sum + log.timeSpent, 0);\n\n      // Calculate session breakdown\n      const sessionBreakdown = sessions.map(session => {\n        const sessionLogs = logs.filter(log => log.sessionId === session.id);\n        const sessionTime = sessionLogs.reduce((sum, log) => sum + log.timeSpent, 0);\n        const sessionCount = sessionLogs.length;\n        return {\n          id: session.id,\n          name: session.name,\n          colorCode: session.colorCode,\n          tag: session.tag,\n          totalTime: sessionTime,\n          sessionCount,\n          averageTime: sessionCount > 0 ? Math.round(sessionTime / sessionCount) : 0,\n          lastActive: sessionLogs.length > 0 ? new Date(Math.max(...sessionLogs.map(log => new Date(log.date)))) : null\n        };\n      }).sort((a, b) => b.totalTime - a.totalTime);\n\n      // Calculate daily stats for the last 30 days\n      const dailyStats = [];\n      for (let i = 29; i >= 0; i--) {\n        const date = new Date(today.getTime() - i * 24 * 60 * 60 * 1000);\n        const dayStart = new Date(date);\n        const dayEnd = new Date(date.getTime() + 24 * 60 * 60 * 1000);\n        const dayLogs = logs.filter(log => {\n          const logDate = new Date(log.date);\n          return logDate >= dayStart && logDate < dayEnd;\n        });\n        const dayTime = dayLogs.reduce((sum, log) => sum + log.timeSpent, 0);\n        dailyStats.push({\n          date: date.toISOString().split('T')[0],\n          time: dayTime,\n          sessions: dayLogs.length\n        });\n      }\n\n      // Calculate streak (consecutive days with at least 1 session)\n      let streakCount = 0;\n      let checkDate = new Date(today);\n      while (true) {\n        const dayStart = new Date(checkDate);\n        const dayEnd = new Date(checkDate.getTime() + 24 * 60 * 60 * 1000);\n        const hasActivity = logs.some(log => {\n          const logDate = new Date(log.date);\n          return logDate >= dayStart && logDate < dayEnd;\n        });\n        if (hasActivity) {\n          streakCount++;\n          checkDate.setDate(checkDate.getDate() - 1);\n        } else {\n          break;\n        }\n      }\n\n      // Calculate average session length\n      const avgSessionLength = logs.length > 0 ? Math.round(totalTime / logs.length) : 0;\n      setStats({\n        totalTime,\n        todayTime,\n        weekTime,\n        monthTime,\n        sessionBreakdown,\n        dailyStats,\n        streakCount,\n        avgSessionLength,\n        totalSessions: logs.length\n      });\n    } catch (error) {\n      console.error('Error calculating stats:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get time spent in a specific period\n  const getTimeInPeriod = period => {\n    const logs = getAllLogs();\n    const now = new Date();\n    let startDate;\n    switch (period) {\n      case 'today':\n        startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n        break;\n      case 'week':\n        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        break;\n      case 'month':\n        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n        break;\n      default:\n        return 0;\n    }\n    return logs.filter(log => new Date(log.date) >= startDate).reduce((sum, log) => sum + log.timeSpent, 0);\n  };\n\n  // Get session stats for a specific session\n  const getSessionStats = sessionId => {\n    const logs = getAllLogs().filter(log => log.sessionId === sessionId);\n    const totalTime = logs.reduce((sum, log) => sum + log.timeSpent, 0);\n    return {\n      totalTime,\n      sessionCount: logs.length,\n      averageTime: logs.length > 0 ? Math.round(totalTime / logs.length) : 0,\n      lastActive: logs.length > 0 ? new Date(Math.max(...logs.map(log => new Date(log.date)))) : null\n    };\n  };\n\n  // Format time for display\n  const formatTime = minutes => {\n    if (minutes < 60) {\n      return `${minutes}m`;\n    }\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n    return remainingMinutes > 0 ? `${hours}h ${remainingMinutes}m` : `${hours}h`;\n  };\n  useEffect(() => {\n    calculateStats();\n  }, [sessions]);\n  return {\n    stats,\n    loading,\n    calculateStats,\n    getTimeInPeriod,\n    getSessionStats,\n    formatTime\n  };\n};\n_s(useProductivityStats, \"oaWl9EbA5N5KacCBv28bRi6K+Hc=\", false, function () {\n  return [useFocusSessions];\n});\nexport default useProductivityStats;","map":{"version":3,"names":["useState","useEffect","useFocusSessions","useProductivityStats","_s","stats","setStats","totalTime","todayTime","weekTime","monthTime","sessionBreakdown","dailyStats","streakCount","avgSessionLength","totalSessions","loading","setLoading","getAllLogs","sessions","calculateStats","logs","now","Date","today","toISOString","split","weekAgo","getTime","monthAgo","reduce","sum","log","timeSpent","filter","logDate","date","map","session","sessionLogs","sessionId","id","sessionTime","sessionCount","length","name","colorCode","tag","averageTime","Math","round","lastActive","max","sort","a","b","i","dayStart","dayEnd","dayLogs","dayTime","push","time","checkDate","hasActivity","some","setDate","getDate","error","console","getTimeInPeriod","period","startDate","getFullYear","getMonth","getSessionStats","formatTime","minutes","hours","floor","remainingMinutes"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/useProductivityStats.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport useFocusSessions from './useFocusSessions';\n\nconst useProductivityStats = () => {\n  const [stats, setStats] = useState({\n    totalTime: 0,\n    todayTime: 0,\n    weekTime: 0,\n    monthTime: 0,\n    sessionBreakdown: [],\n    dailyStats: [],\n    streakCount: 0,\n    avgSessionLength: 0,\n    totalSessions: 0\n  });\n  const [loading, setLoading] = useState(true);\n\n  const { getAllLogs, sessions } = useFocusSessions();\n\n  const calculateStats = () => {\n    try {\n      setLoading(true);\n      const logs = getAllLogs();\n      const now = new Date();\n      const today = new Date().toISOString().split('T')[0]; // \"2025-09-06\"\n      const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n      const monthAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n      // Calculate total time\n      const totalTime = logs.reduce((sum, log) => sum + log.timeSpent, 0);\n\n      // Calculate today's time\n      const todayTime = logs\n        .filter(log => {\n          const logDate = new Date(log.date).toISOString().split('T')[0];\n          return logDate >= today;\n        })\n        .reduce((sum, log) => sum + log.timeSpent, 0);\n\n      // Calculate week time\n      const weekTime = logs\n        .filter(log => new Date(log.date) >= weekAgo)\n        .reduce((sum, log) => sum + log.timeSpent, 0);\n\n      // Calculate month time\n      const monthTime = logs\n        .filter(log => new Date(log.date) >= monthAgo)\n        .reduce((sum, log) => sum + log.timeSpent, 0);\n\n      // Calculate session breakdown\n      const sessionBreakdown = sessions.map(session => {\n        const sessionLogs = logs.filter(log => log.sessionId === session.id);\n        const sessionTime = sessionLogs.reduce((sum, log) => sum + log.timeSpent, 0);\n        const sessionCount = sessionLogs.length;\n        \n        return {\n          id: session.id,\n          name: session.name,\n          colorCode: session.colorCode,\n          tag: session.tag,\n          totalTime: sessionTime,\n          sessionCount,\n          averageTime: sessionCount > 0 ? Math.round(sessionTime / sessionCount) : 0,\n          lastActive: sessionLogs.length > 0 \n            ? new Date(Math.max(...sessionLogs.map(log => new Date(log.date))))\n            : null\n        };\n      }).sort((a, b) => b.totalTime - a.totalTime);\n\n      // Calculate daily stats for the last 30 days\n      const dailyStats = [];\n      for (let i = 29; i >= 0; i--) {\n        const date = new Date(today.getTime() - i * 24 * 60 * 60 * 1000);\n        const dayStart = new Date(date);\n        const dayEnd = new Date(date.getTime() + 24 * 60 * 60 * 1000);\n        \n        const dayLogs = logs.filter(log => {\n          const logDate = new Date(log.date);\n          return logDate >= dayStart && logDate < dayEnd;\n        });\n\n        const dayTime = dayLogs.reduce((sum, log) => sum + log.timeSpent, 0);\n        \n        dailyStats.push({\n          date: date.toISOString().split('T')[0],\n          time: dayTime,\n          sessions: dayLogs.length\n        });\n      }\n\n      // Calculate streak (consecutive days with at least 1 session)\n      let streakCount = 0;\n      let checkDate = new Date(today);\n      \n      while (true) {\n        const dayStart = new Date(checkDate);\n        const dayEnd = new Date(checkDate.getTime() + 24 * 60 * 60 * 1000);\n        \n        const hasActivity = logs.some(log => {\n          const logDate = new Date(log.date);\n          return logDate >= dayStart && logDate < dayEnd;\n        });\n\n        if (hasActivity) {\n          streakCount++;\n          checkDate.setDate(checkDate.getDate() - 1);\n        } else {\n          break;\n        }\n      }\n\n      // Calculate average session length\n      const avgSessionLength = logs.length > 0 \n        ? Math.round(totalTime / logs.length) \n        : 0;\n\n      setStats({\n        totalTime,\n        todayTime,\n        weekTime,\n        monthTime,\n        sessionBreakdown,\n        dailyStats,\n        streakCount,\n        avgSessionLength,\n        totalSessions: logs.length\n      });\n\n    } catch (error) {\n      console.error('Error calculating stats:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get time spent in a specific period\n  const getTimeInPeriod = (period) => {\n    const logs = getAllLogs();\n    const now = new Date();\n    let startDate;\n\n    switch (period) {\n      case 'today':\n        startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n        break;\n      case 'week':\n        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        break;\n      case 'month':\n        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n        break;\n      default:\n        return 0;\n    }\n\n    return logs\n      .filter(log => new Date(log.date) >= startDate)\n      .reduce((sum, log) => sum + log.timeSpent, 0);\n  };\n\n  // Get session stats for a specific session\n  const getSessionStats = (sessionId) => {\n    const logs = getAllLogs().filter(log => log.sessionId === sessionId);\n    const totalTime = logs.reduce((sum, log) => sum + log.timeSpent, 0);\n    \n    return {\n      totalTime,\n      sessionCount: logs.length,\n      averageTime: logs.length > 0 ? Math.round(totalTime / logs.length) : 0,\n      lastActive: logs.length > 0 \n        ? new Date(Math.max(...logs.map(log => new Date(log.date))))\n        : null\n    };\n  };\n\n  // Format time for display\n  const formatTime = (minutes) => {\n    if (minutes < 60) {\n      return `${minutes}m`;\n    }\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n    return remainingMinutes > 0 ? `${hours}h ${remainingMinutes}m` : `${hours}h`;\n  };\n\n  useEffect(() => {\n    calculateStats();\n  }, [sessions]);\n\n  return {\n    stats,\n    loading,\n    calculateStats,\n    getTimeInPeriod,\n    getSessionStats,\n    formatTime\n  };\n};\n\nexport default useProductivityStats;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,gBAAgB,MAAM,oBAAoB;AAEjD,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC;IACjCO,SAAS,EAAE,CAAC;IACZC,SAAS,EAAE,CAAC;IACZC,QAAQ,EAAE,CAAC;IACXC,SAAS,EAAE,CAAC;IACZC,gBAAgB,EAAE,EAAE;IACpBC,UAAU,EAAE,EAAE;IACdC,WAAW,EAAE,CAAC;IACdC,gBAAgB,EAAE,CAAC;IACnBC,aAAa,EAAE;EACjB,CAAC,CAAC;EACF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAM;IAAEkB,UAAU;IAAEC;EAAS,CAAC,GAAGjB,gBAAgB,CAAC,CAAC;EAEnD,MAAMkB,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI;MACFH,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMI,IAAI,GAAGH,UAAU,CAAC,CAAC;MACzB,MAAMI,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;MACtB,MAAMC,KAAK,GAAG,IAAID,IAAI,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACtD,MAAMC,OAAO,GAAG,IAAIJ,IAAI,CAACC,KAAK,CAACI,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;MACnE,MAAMC,QAAQ,GAAG,IAAIN,IAAI,CAACC,KAAK,CAACI,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;;MAErE;MACA,MAAMrB,SAAS,GAAGc,IAAI,CAACS,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,CAACC,SAAS,EAAE,CAAC,CAAC;;MAEnE;MACA,MAAMzB,SAAS,GAAGa,IAAI,CACnBa,MAAM,CAACF,GAAG,IAAI;QACb,MAAMG,OAAO,GAAG,IAAIZ,IAAI,CAACS,GAAG,CAACI,IAAI,CAAC,CAACX,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC9D,OAAOS,OAAO,IAAIX,KAAK;MACzB,CAAC,CAAC,CACDM,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,CAACC,SAAS,EAAE,CAAC,CAAC;;MAE/C;MACA,MAAMxB,QAAQ,GAAGY,IAAI,CAClBa,MAAM,CAACF,GAAG,IAAI,IAAIT,IAAI,CAACS,GAAG,CAACI,IAAI,CAAC,IAAIT,OAAO,CAAC,CAC5CG,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,CAACC,SAAS,EAAE,CAAC,CAAC;;MAE/C;MACA,MAAMvB,SAAS,GAAGW,IAAI,CACnBa,MAAM,CAACF,GAAG,IAAI,IAAIT,IAAI,CAACS,GAAG,CAACI,IAAI,CAAC,IAAIP,QAAQ,CAAC,CAC7CC,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,CAACC,SAAS,EAAE,CAAC,CAAC;;MAE/C;MACA,MAAMtB,gBAAgB,GAAGQ,QAAQ,CAACkB,GAAG,CAACC,OAAO,IAAI;QAC/C,MAAMC,WAAW,GAAGlB,IAAI,CAACa,MAAM,CAACF,GAAG,IAAIA,GAAG,CAACQ,SAAS,KAAKF,OAAO,CAACG,EAAE,CAAC;QACpE,MAAMC,WAAW,GAAGH,WAAW,CAACT,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,CAACC,SAAS,EAAE,CAAC,CAAC;QAC5E,MAAMU,YAAY,GAAGJ,WAAW,CAACK,MAAM;QAEvC,OAAO;UACLH,EAAE,EAAEH,OAAO,CAACG,EAAE;UACdI,IAAI,EAAEP,OAAO,CAACO,IAAI;UAClBC,SAAS,EAAER,OAAO,CAACQ,SAAS;UAC5BC,GAAG,EAAET,OAAO,CAACS,GAAG;UAChBxC,SAAS,EAAEmC,WAAW;UACtBC,YAAY;UACZK,WAAW,EAAEL,YAAY,GAAG,CAAC,GAAGM,IAAI,CAACC,KAAK,CAACR,WAAW,GAAGC,YAAY,CAAC,GAAG,CAAC;UAC1EQ,UAAU,EAAEZ,WAAW,CAACK,MAAM,GAAG,CAAC,GAC9B,IAAIrB,IAAI,CAAC0B,IAAI,CAACG,GAAG,CAAC,GAAGb,WAAW,CAACF,GAAG,CAACL,GAAG,IAAI,IAAIT,IAAI,CAACS,GAAG,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC,GACjE;QACN,CAAC;MACH,CAAC,CAAC,CAACiB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAChD,SAAS,GAAG+C,CAAC,CAAC/C,SAAS,CAAC;;MAE5C;MACA,MAAMK,UAAU,GAAG,EAAE;MACrB,KAAK,IAAI4C,CAAC,GAAG,EAAE,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC5B,MAAMpB,IAAI,GAAG,IAAIb,IAAI,CAACC,KAAK,CAACI,OAAO,CAAC,CAAC,GAAG4B,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;QAChE,MAAMC,QAAQ,GAAG,IAAIlC,IAAI,CAACa,IAAI,CAAC;QAC/B,MAAMsB,MAAM,GAAG,IAAInC,IAAI,CAACa,IAAI,CAACR,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;QAE7D,MAAM+B,OAAO,GAAGtC,IAAI,CAACa,MAAM,CAACF,GAAG,IAAI;UACjC,MAAMG,OAAO,GAAG,IAAIZ,IAAI,CAACS,GAAG,CAACI,IAAI,CAAC;UAClC,OAAOD,OAAO,IAAIsB,QAAQ,IAAItB,OAAO,GAAGuB,MAAM;QAChD,CAAC,CAAC;QAEF,MAAME,OAAO,GAAGD,OAAO,CAAC7B,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,CAACC,SAAS,EAAE,CAAC,CAAC;QAEpErB,UAAU,CAACiD,IAAI,CAAC;UACdzB,IAAI,EAAEA,IAAI,CAACX,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UACtCoC,IAAI,EAAEF,OAAO;UACbzC,QAAQ,EAAEwC,OAAO,CAACf;QACpB,CAAC,CAAC;MACJ;;MAEA;MACA,IAAI/B,WAAW,GAAG,CAAC;MACnB,IAAIkD,SAAS,GAAG,IAAIxC,IAAI,CAACC,KAAK,CAAC;MAE/B,OAAO,IAAI,EAAE;QACX,MAAMiC,QAAQ,GAAG,IAAIlC,IAAI,CAACwC,SAAS,CAAC;QACpC,MAAML,MAAM,GAAG,IAAInC,IAAI,CAACwC,SAAS,CAACnC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;QAElE,MAAMoC,WAAW,GAAG3C,IAAI,CAAC4C,IAAI,CAACjC,GAAG,IAAI;UACnC,MAAMG,OAAO,GAAG,IAAIZ,IAAI,CAACS,GAAG,CAACI,IAAI,CAAC;UAClC,OAAOD,OAAO,IAAIsB,QAAQ,IAAItB,OAAO,GAAGuB,MAAM;QAChD,CAAC,CAAC;QAEF,IAAIM,WAAW,EAAE;UACfnD,WAAW,EAAE;UACbkD,SAAS,CAACG,OAAO,CAACH,SAAS,CAACI,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;QAC5C,CAAC,MAAM;UACL;QACF;MACF;;MAEA;MACA,MAAMrD,gBAAgB,GAAGO,IAAI,CAACuB,MAAM,GAAG,CAAC,GACpCK,IAAI,CAACC,KAAK,CAAC3C,SAAS,GAAGc,IAAI,CAACuB,MAAM,CAAC,GACnC,CAAC;MAELtC,QAAQ,CAAC;QACPC,SAAS;QACTC,SAAS;QACTC,QAAQ;QACRC,SAAS;QACTC,gBAAgB;QAChBC,UAAU;QACVC,WAAW;QACXC,gBAAgB;QAChBC,aAAa,EAAEM,IAAI,CAACuB;MACtB,CAAC,CAAC;IAEJ,CAAC,CAAC,OAAOwB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD,CAAC,SAAS;MACRnD,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMqD,eAAe,GAAIC,MAAM,IAAK;IAClC,MAAMlD,IAAI,GAAGH,UAAU,CAAC,CAAC;IACzB,MAAMI,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;IACtB,IAAIiD,SAAS;IAEb,QAAQD,MAAM;MACZ,KAAK,OAAO;QACVC,SAAS,GAAG,IAAIjD,IAAI,CAACD,GAAG,CAACmD,WAAW,CAAC,CAAC,EAAEnD,GAAG,CAACoD,QAAQ,CAAC,CAAC,EAAEpD,GAAG,CAAC6C,OAAO,CAAC,CAAC,CAAC;QACtE;MACF,KAAK,MAAM;QACTK,SAAS,GAAG,IAAIjD,IAAI,CAACD,GAAG,CAACM,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;QAC7D;MACF,KAAK,OAAO;QACV4C,SAAS,GAAG,IAAIjD,IAAI,CAACD,GAAG,CAACM,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;QAC9D;MACF;QACE,OAAO,CAAC;IACZ;IAEA,OAAOP,IAAI,CACRa,MAAM,CAACF,GAAG,IAAI,IAAIT,IAAI,CAACS,GAAG,CAACI,IAAI,CAAC,IAAIoC,SAAS,CAAC,CAC9C1C,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,CAACC,SAAS,EAAE,CAAC,CAAC;EACjD,CAAC;;EAED;EACA,MAAM0C,eAAe,GAAInC,SAAS,IAAK;IACrC,MAAMnB,IAAI,GAAGH,UAAU,CAAC,CAAC,CAACgB,MAAM,CAACF,GAAG,IAAIA,GAAG,CAACQ,SAAS,KAAKA,SAAS,CAAC;IACpE,MAAMjC,SAAS,GAAGc,IAAI,CAACS,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,CAACC,SAAS,EAAE,CAAC,CAAC;IAEnE,OAAO;MACL1B,SAAS;MACToC,YAAY,EAAEtB,IAAI,CAACuB,MAAM;MACzBI,WAAW,EAAE3B,IAAI,CAACuB,MAAM,GAAG,CAAC,GAAGK,IAAI,CAACC,KAAK,CAAC3C,SAAS,GAAGc,IAAI,CAACuB,MAAM,CAAC,GAAG,CAAC;MACtEO,UAAU,EAAE9B,IAAI,CAACuB,MAAM,GAAG,CAAC,GACvB,IAAIrB,IAAI,CAAC0B,IAAI,CAACG,GAAG,CAAC,GAAG/B,IAAI,CAACgB,GAAG,CAACL,GAAG,IAAI,IAAIT,IAAI,CAACS,GAAG,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC,GAC1D;IACN,CAAC;EACH,CAAC;;EAED;EACA,MAAMwC,UAAU,GAAIC,OAAO,IAAK;IAC9B,IAAIA,OAAO,GAAG,EAAE,EAAE;MAChB,OAAO,GAAGA,OAAO,GAAG;IACtB;IACA,MAAMC,KAAK,GAAG7B,IAAI,CAAC8B,KAAK,CAACF,OAAO,GAAG,EAAE,CAAC;IACtC,MAAMG,gBAAgB,GAAGH,OAAO,GAAG,EAAE;IACrC,OAAOG,gBAAgB,GAAG,CAAC,GAAG,GAAGF,KAAK,KAAKE,gBAAgB,GAAG,GAAG,GAAGF,KAAK,GAAG;EAC9E,CAAC;EAED7E,SAAS,CAAC,MAAM;IACdmB,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACD,QAAQ,CAAC,CAAC;EAEd,OAAO;IACLd,KAAK;IACLW,OAAO;IACPI,cAAc;IACdkD,eAAe;IACfK,eAAe;IACfC;EACF,CAAC;AACH,CAAC;AAACxE,EAAA,CAlMID,oBAAoB;EAAA,QAcSD,gBAAgB;AAAA;AAsLnD,eAAeC,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}