{"ast":null,"code":"// src/services/api.js\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\nclass ApiService {\n  async request(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        return await response.json();\n      }\n      return response;\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Note operations\n  async getAllNotes() {\n    return this.request('/api/notes');\n  }\n  async getNoteById(filename) {\n    return this.request(`/api/notes/${filename}`);\n  }\n  async createNote(note) {\n    return this.request('/api/notes', {\n      method: 'POST',\n      body: JSON.stringify(note)\n    });\n  }\n  async updateNote(filename, note) {\n    return this.request(`/api/notes/${filename}`, {\n      method: 'PUT',\n      body: JSON.stringify(note)\n    });\n  }\n  async deleteNote(filename) {\n    return this.request(`/api/notes/${filename}`, {\n      method: 'DELETE'\n    });\n  }\n  async searchNotes(query) {\n    return this.request(`/api/notes/search?query=${encodeURIComponent(query)}`);\n  }\n\n  // Player operations\n  async getPlayerStats() {\n    return this.request('/api/player/stats');\n  }\n  async getAchievements() {\n    return this.request('/api/player/achievements');\n  }\n}\nexport const apiService = new ApiService();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","request","endpoint","options","url","config","headers","response","fetch","ok","Error","status","contentType","get","includes","json","error","console","getAllNotes","getNoteById","filename","createNote","note","method","body","JSON","stringify","updateNote","deleteNote","searchNotes","query","encodeURIComponent","getPlayerStats","getAchievements","apiService"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\n\nclass ApiService {\n  async request(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        return await response.json();\n      }\n      \n      return response;\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Note operations\n  async getAllNotes() {\n    return this.request('/api/notes');\n  }\n\n  async getNoteById(filename) {\n    return this.request(`/api/notes/${filename}`);\n  }\n\n  async createNote(note) {\n    return this.request('/api/notes', {\n      method: 'POST',\n      body: JSON.stringify(note),\n    });\n  }\n\n  async updateNote(filename, note) {\n    return this.request(`/api/notes/${filename}`, {\n      method: 'PUT',\n      body: JSON.stringify(note),\n    });\n  }\n\n  async deleteNote(filename) {\n    return this.request(`/api/notes/${filename}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async searchNotes(query) {\n    return this.request(`/api/notes/search?query=${encodeURIComponent(query)}`);\n  }\n\n  // Player operations\n  async getPlayerStats() {\n    return this.request('/api/player/stats');\n  }\n\n  async getAchievements() {\n    return this.request('/api/player/achievements');\n  }\n}\n\nexport const apiService = new ApiService();"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,EAAE;AAExD,MAAMC,UAAU,CAAC;EACf,MAAMC,OAAOA,CAACC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACpC,MAAMC,GAAG,GAAG,GAAGR,YAAY,GAAGM,QAAQ,EAAE;IACxC,MAAMG,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGH,OAAO,CAACG;MACb,CAAC;MACD,GAAGH;IACL,CAAC;IAED,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAEC,MAAM,CAAC;MAEzC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,WAAW,GAAGL,QAAQ,CAACD,OAAO,CAACO,GAAG,CAAC,cAAc,CAAC;MACxD,IAAID,WAAW,IAAIA,WAAW,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;QAC3D,OAAO,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAC9B;MAEA,OAAOR,QAAQ;IACjB,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAME,WAAWA,CAAA,EAAG;IAClB,OAAO,IAAI,CAACjB,OAAO,CAAC,YAAY,CAAC;EACnC;EAEA,MAAMkB,WAAWA,CAACC,QAAQ,EAAE;IAC1B,OAAO,IAAI,CAACnB,OAAO,CAAC,cAAcmB,QAAQ,EAAE,CAAC;EAC/C;EAEA,MAAMC,UAAUA,CAACC,IAAI,EAAE;IACrB,OAAO,IAAI,CAACrB,OAAO,CAAC,YAAY,EAAE;MAChCsB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI;IAC3B,CAAC,CAAC;EACJ;EAEA,MAAMK,UAAUA,CAACP,QAAQ,EAAEE,IAAI,EAAE;IAC/B,OAAO,IAAI,CAACrB,OAAO,CAAC,cAAcmB,QAAQ,EAAE,EAAE;MAC5CG,MAAM,EAAE,KAAK;MACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI;IAC3B,CAAC,CAAC;EACJ;EAEA,MAAMM,UAAUA,CAACR,QAAQ,EAAE;IACzB,OAAO,IAAI,CAACnB,OAAO,CAAC,cAAcmB,QAAQ,EAAE,EAAE;MAC5CG,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;EAEA,MAAMM,WAAWA,CAACC,KAAK,EAAE;IACvB,OAAO,IAAI,CAAC7B,OAAO,CAAC,2BAA2B8B,kBAAkB,CAACD,KAAK,CAAC,EAAE,CAAC;EAC7E;;EAEA;EACA,MAAME,cAAcA,CAAA,EAAG;IACrB,OAAO,IAAI,CAAC/B,OAAO,CAAC,mBAAmB,CAAC;EAC1C;EAEA,MAAMgC,eAAeA,CAAA,EAAG;IACtB,OAAO,IAAI,CAAChC,OAAO,CAAC,0BAA0B,CAAC;EACjD;AACF;AAEA,OAAO,MAAMiC,UAAU,GAAG,IAAIlC,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}