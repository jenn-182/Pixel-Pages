{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useNotes.js\nimport { useState, useEffect } from 'react';\nimport achievementService from '../services/achievementService';\nconst useNotes = () => {\n  _s();\n  const [notes, setNotes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetchNotes();\n  }, []);\n  const fetchNotes = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/notes');\n      if (response.ok) {\n        const data = await response.json();\n        setNotes(data);\n      } else {\n        console.error('Failed to fetch notes:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error fetching notes:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const createNote = async noteData => {\n    try {\n      console.log('useNotes: Creating note with data:', noteData); // Debug log\n\n      // Convert tags string to array for the backend\n      const dataToSend = {\n        ...noteData,\n        tags: noteData.tags ? noteData.tags.split(',').map(tag => tag.trim()) : [],\n        username: 'user' // Add default username\n      };\n      console.log('useNotes: Data being sent to backend:', dataToSend); // Debug log\n\n      const response = await fetch('/api/notes/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(dataToSend)\n      });\n      console.log('useNotes: Response status:', response.status); // Debug log\n\n      if (response.ok) {\n        const newNote = await response.json();\n        console.log('useNotes: Note created successfully:', newNote); // Debug log\n        setNotes(prevNotes => [newNote, ...prevNotes]);\n\n        // Check achievements after note creation\n        setTimeout(() => {\n          checkNoteAchievements();\n        }, 100); // Small delay to ensure localStorage is updated\n\n        return newNote;\n      } else {\n        const errorText = await response.text();\n        console.error('useNotes: Backend error:', errorText); // Debug log\n        throw new Error(`Failed to create note: ${response.status} - ${errorText}`);\n      }\n    } catch (error) {\n      console.error('useNotes: Error creating note:', error);\n      throw error;\n    }\n  };\n  const updateNote = async (id, noteData) => {\n    try {\n      console.log('Original noteData:', noteData); // Debug log\n\n      // Convert tags array to string if needed\n      const dataToSend = {\n        ...noteData,\n        tags: Array.isArray(noteData.tags) ? noteData.tags.join(',') : noteData.tags\n      };\n      console.log('Data being sent to backend:', dataToSend); // Debug log\n      console.log('Updating note with ID:', id); // Debug log\n\n      const response = await fetch(`/api/notes/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(dataToSend)\n      });\n      console.log('Response status:', response.status); // Debug log\n      console.log('Response ok:', response.ok); // Debug log\n\n      if (response.ok) {\n        const updatedNote = await response.json();\n        console.log('Updated note received:', updatedNote); // Debug log\n\n        setNotes(prevNotes => prevNotes.map(note => note.id === id ? updatedNote : note));\n\n        // Check achievements after note update\n        setTimeout(() => {\n          checkNoteAchievements();\n        }, 100);\n        return updatedNote;\n      } else {\n        const errorText = await response.text();\n        console.error('Backend error response:', errorText); // Debug log\n        throw new Error(`Failed to update note: ${response.status} - ${errorText}`);\n      }\n    } catch (error) {\n      console.error('Error updating note:', error);\n      throw error;\n    }\n  };\n  const deleteNote = async id => {\n    try {\n      const response = await fetch(`/api/notes/${id}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        setNotes(prevNotes => prevNotes.filter(note => note.id !== id));\n      } else {\n        throw new Error(`Failed to delete note: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error deleting note:', error);\n      throw error;\n    }\n  };\n  const checkNoteAchievements = () => {\n    const notes = JSON.parse(localStorage.getItem('notes') || '[]');\n    const userStats = calculateNoteStats(notes);\n    const newAchievements = achievementService.checkAchievements(userStats);\n    if (newAchievements.length > 0) {\n      console.log(`📝 Note achievements unlocked: ${newAchievements.map(a => a.name).join(', ')}`);\n    }\n    return newAchievements;\n  };\n  const calculateNoteStats = notes => {\n    const now = new Date();\n    const today = now.toDateString();\n    const thisWeek = getWeekStart(now);\n\n    // Calculate note statistics\n    const totalNotes = notes.length;\n    const totalWords = notes.reduce((sum, note) => {\n      var _note$content;\n      return sum + (((_note$content = note.content) === null || _note$content === void 0 ? void 0 : _note$content.split(' ').length) || 0);\n    }, 0);\n\n    // Get all unique tags\n    const allTags = new Set();\n    notes.forEach(note => {\n      if (note.tags) {\n        note.tags.forEach(tag => allTags.add(tag));\n      }\n    });\n    const uniqueTags = allTags.size;\n\n    // Today's notes\n    const notesToday = notes.filter(note => new Date(note.createdAt).toDateString() === today).length;\n\n    // Week notes\n    const notesThisWeek = notes.filter(note => new Date(note.createdAt) >= thisWeek).length;\n\n    // Weekend notes\n    const weekendNotes = notes.filter(note => {\n      const day = new Date(note.createdAt).getDay();\n      return day === 0 || day === 6; // Sunday or Saturday\n    }).length;\n\n    // Max words in a single note\n    const maxWordsInNote = Math.max(...notes.map(note => {\n      var _note$content2;\n      return ((_note$content2 = note.content) === null || _note$content2 === void 0 ? void 0 : _note$content2.split(' ').length) || 0;\n    }), 0);\n\n    // Max tags in a single note\n    const maxTagsInNote = Math.max(...notes.map(note => {\n      var _note$tags;\n      return ((_note$tags = note.tags) === null || _note$tags === void 0 ? void 0 : _note$tags.length) || 0;\n    }), 0);\n\n    // Note streak (simplified)\n    const noteStreak = calculateNoteStreak(notes);\n\n    // Edit statistics (if you track edits)\n    const totalEdits = notes.reduce((sum, note) => sum + (note.editCount || 0), 0);\n    const maxEditsOnNote = Math.max(...notes.map(note => note.editCount || 0), 0);\n    return {\n      totalNotes,\n      totalWords,\n      uniqueTags,\n      notesToday,\n      notesThisWeek,\n      weekendNotes,\n      maxWordsInNote,\n      maxTagsInNote,\n      noteStreak,\n      totalEdits,\n      maxEditsOnNote\n    };\n  };\n  return {\n    notes,\n    loading,\n    createNote,\n    updateNote,\n    deleteNote,\n    refreshNotes: fetchNotes\n  };\n};\n_s(useNotes, \"I4K4w9oJpuKUIeK96G/eoa0AU7g=\");\nexport default useNotes;","map":{"version":3,"names":["useState","useEffect","achievementService","useNotes","_s","notes","setNotes","loading","setLoading","fetchNotes","response","fetch","ok","data","json","console","error","statusText","createNote","noteData","log","dataToSend","tags","split","map","tag","trim","username","method","headers","body","JSON","stringify","status","newNote","prevNotes","setTimeout","checkNoteAchievements","errorText","text","Error","updateNote","id","Array","isArray","join","updatedNote","note","deleteNote","filter","parse","localStorage","getItem","userStats","calculateNoteStats","newAchievements","checkAchievements","length","a","name","now","Date","today","toDateString","thisWeek","getWeekStart","totalNotes","totalWords","reduce","sum","_note$content","content","allTags","Set","forEach","add","uniqueTags","size","notesToday","createdAt","notesThisWeek","weekendNotes","day","getDay","maxWordsInNote","Math","max","_note$content2","maxTagsInNote","_note$tags","noteStreak","calculateNoteStreak","totalEdits","editCount","maxEditsOnNote","refreshNotes"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/useNotes.js"],"sourcesContent":["// src/hooks/useNotes.js\nimport { useState, useEffect } from 'react';\nimport achievementService from '../services/achievementService';\n\nconst useNotes = () => {\n  const [notes, setNotes] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchNotes();\n  }, []);\n\n  const fetchNotes = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/notes');\n      if (response.ok) {\n        const data = await response.json();\n        setNotes(data);\n      } else {\n        console.error('Failed to fetch notes:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error fetching notes:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createNote = async (noteData) => {\n    try {\n      console.log('useNotes: Creating note with data:', noteData); // Debug log\n      \n      // Convert tags string to array for the backend\n      const dataToSend = {\n        ...noteData,\n        tags: noteData.tags ? noteData.tags.split(',').map(tag => tag.trim()) : [],\n        username: 'user' // Add default username\n      };\n      \n      console.log('useNotes: Data being sent to backend:', dataToSend); // Debug log\n\n      const response = await fetch('/api/notes/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(dataToSend)\n      });\n\n      console.log('useNotes: Response status:', response.status); // Debug log\n\n      if (response.ok) {\n        const newNote = await response.json();\n        console.log('useNotes: Note created successfully:', newNote); // Debug log\n        setNotes(prevNotes => [newNote, ...prevNotes]);\n        \n        // Check achievements after note creation\n        setTimeout(() => {\n          checkNoteAchievements();\n        }, 100); // Small delay to ensure localStorage is updated\n\n        return newNote;\n      } else {\n        const errorText = await response.text();\n        console.error('useNotes: Backend error:', errorText); // Debug log\n        throw new Error(`Failed to create note: ${response.status} - ${errorText}`);\n      }\n    } catch (error) {\n      console.error('useNotes: Error creating note:', error);\n      throw error;\n    }\n  };\n\n  const updateNote = async (id, noteData) => {\n    try {\n      console.log('Original noteData:', noteData); // Debug log\n      \n      // Convert tags array to string if needed\n      const dataToSend = {\n        ...noteData,\n        tags: Array.isArray(noteData.tags) \n          ? noteData.tags.join(',') \n          : noteData.tags\n      };\n\n      console.log('Data being sent to backend:', dataToSend); // Debug log\n      console.log('Updating note with ID:', id); // Debug log\n\n      const response = await fetch(`/api/notes/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(dataToSend)\n      });\n\n      console.log('Response status:', response.status); // Debug log\n      console.log('Response ok:', response.ok); // Debug log\n\n      if (response.ok) {\n        const updatedNote = await response.json();\n        console.log('Updated note received:', updatedNote); // Debug log\n        \n        setNotes(prevNotes => \n          prevNotes.map(note => note.id === id ? updatedNote : note)\n        );\n\n        // Check achievements after note update\n        setTimeout(() => {\n          checkNoteAchievements();\n        }, 100);\n\n        return updatedNote;\n      } else {\n        const errorText = await response.text();\n        console.error('Backend error response:', errorText); // Debug log\n        throw new Error(`Failed to update note: ${response.status} - ${errorText}`);\n      }\n    } catch (error) {\n      console.error('Error updating note:', error);\n      throw error;\n    }\n  };\n\n  const deleteNote = async (id) => {\n    try {\n      const response = await fetch(`/api/notes/${id}`, {\n        method: 'DELETE'\n      });\n\n      if (response.ok) {\n        setNotes(prevNotes => prevNotes.filter(note => note.id !== id));\n      } else {\n        throw new Error(`Failed to delete note: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error deleting note:', error);\n      throw error;\n    }\n  };\n\n  const checkNoteAchievements = () => {\n    const notes = JSON.parse(localStorage.getItem('notes') || '[]');\n    const userStats = calculateNoteStats(notes);\n    const newAchievements = achievementService.checkAchievements(userStats);\n    \n    if (newAchievements.length > 0) {\n      console.log(`📝 Note achievements unlocked: ${newAchievements.map(a => a.name).join(', ')}`);\n    }\n    \n    return newAchievements;\n  };\n\n  const calculateNoteStats = (notes) => {\n    const now = new Date();\n    const today = now.toDateString();\n    const thisWeek = getWeekStart(now);\n    \n    // Calculate note statistics\n    const totalNotes = notes.length;\n    const totalWords = notes.reduce((sum, note) => sum + (note.content?.split(' ').length || 0), 0);\n    \n    // Get all unique tags\n    const allTags = new Set();\n    notes.forEach(note => {\n      if (note.tags) {\n        note.tags.forEach(tag => allTags.add(tag));\n      }\n    });\n    const uniqueTags = allTags.size;\n    \n    // Today's notes\n    const notesToday = notes.filter(note => \n      new Date(note.createdAt).toDateString() === today\n    ).length;\n    \n    // Week notes\n    const notesThisWeek = notes.filter(note => \n      new Date(note.createdAt) >= thisWeek\n    ).length;\n    \n    // Weekend notes\n    const weekendNotes = notes.filter(note => {\n      const day = new Date(note.createdAt).getDay();\n      return day === 0 || day === 6; // Sunday or Saturday\n    }).length;\n    \n    // Max words in a single note\n    const maxWordsInNote = Math.max(...notes.map(note => \n      note.content?.split(' ').length || 0\n    ), 0);\n    \n    // Max tags in a single note\n    const maxTagsInNote = Math.max(...notes.map(note => \n      note.tags?.length || 0\n    ), 0);\n    \n    // Note streak (simplified)\n    const noteStreak = calculateNoteStreak(notes);\n    \n    // Edit statistics (if you track edits)\n    const totalEdits = notes.reduce((sum, note) => sum + (note.editCount || 0), 0);\n    const maxEditsOnNote = Math.max(...notes.map(note => note.editCount || 0), 0);\n    \n    return {\n      totalNotes,\n      totalWords,\n      uniqueTags,\n      notesToday,\n      notesThisWeek,\n      weekendNotes,\n      maxWordsInNote,\n      maxTagsInNote,\n      noteStreak,\n      totalEdits,\n      maxEditsOnNote\n    };\n  };\n\n  return {\n    notes,\n    loading,\n    createNote,\n    updateNote,\n    deleteNote,\n    refreshNotes: fetchNotes\n  };\n};\n\nexport default useNotes;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}