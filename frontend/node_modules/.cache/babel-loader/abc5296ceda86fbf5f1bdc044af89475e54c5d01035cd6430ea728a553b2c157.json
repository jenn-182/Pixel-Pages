{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useNotes.js\nimport { useState, useEffect } from 'react';\nimport achievementService from '../services/achievementService';\nconst useNotes = () => {\n  _s();\n  const [notes, setNotes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null); // ✅ ADD THIS MISSING STATE\n\n  // ✅ ADD MISSING API_BASE CONSTANT\n  const API_BASE = 'http://localhost:8080/api/notes';\n  useEffect(() => {\n    fetchNotes();\n  }, []);\n  const fetchNotes = async () => {\n    try {\n      setLoading(true);\n      // ✅ FIX: Use consistent API endpoint\n      const response = await fetch(`${API_BASE}?username=user`);\n      if (response.ok) {\n        const data = await response.json();\n        setNotes(data);\n        setError(null); // ✅ Clear error on success\n      } else {\n        console.error('Failed to fetch notes:', response.statusText);\n        setError('Failed to fetch notes');\n      }\n    } catch (error) {\n      console.error('Error fetching notes:', error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // REPLACE the createNote method with better error logging:\n  const createNote = async noteData => {\n    try {\n      console.log('useNotes: Creating note with data:', noteData);\n\n      // ✅ FIX: Ensure createdAt is set to NOW\n      const noteWithTimestamp = {\n        ...noteData,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      console.log('📝 Note with timestamp:', noteWithTimestamp);\n      const response = await fetch(`${API_BASE}?username=user`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(noteWithTimestamp)\n      });\n      if (!response.ok) {\n        // ✅ ADD: Get detailed error message\n        const errorText = await response.text();\n        console.error('❌ Backend error response:', errorText);\n        console.error('❌ Response status:', response.status);\n        console.error('❌ Response headers:', [...response.headers.entries()]);\n        throw new Error(`Failed to create note: ${response.status} - ${errorText}`);\n      }\n      const newNote = await response.json();\n      console.log('📝 Backend returned note:', newNote); // ✅ DEBUG LOG\n\n      // ✅ FIX: Ensure the returned note has proper timestamp\n      const noteWithProperTimestamp = {\n        ...newNote,\n        createdAt: newNote.createdAt || new Date().toISOString(),\n        updatedAt: newNote.updatedAt || new Date().toISOString()\n      };\n      console.log('📝 Final note for state:', noteWithProperTimestamp); // ✅ DEBUG LOG\n\n      setNotes(prevNotes => [...prevNotes, noteWithProperTimestamp]);\n      setError(null);\n\n      // Check for achievements after a short delay to ensure state is updated\n      setTimeout(() => {\n        checkNoteAchievements();\n      }, 100);\n      return noteWithProperTimestamp;\n    } catch (err) {\n      console.error('useNotes: Error creating note:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n  const updateNote = async (id, noteData) => {\n    try {\n      console.log('useNotes: Updating note with ID:', id, 'Data:', noteData);\n      const dataToSend = {\n        ...noteData,\n        tags: Array.isArray(noteData.tags) ? noteData.tags : typeof noteData.tags === 'string' ? noteData.tags.split(',').map(t => t.trim()).filter(t => t) : [],\n        updatedAt: new Date().toISOString() // ✅ ADD TIMESTAMP\n      };\n\n      // ✅ FIX: Use consistent API endpoint\n      const response = await fetch(`${API_BASE}/${id}?username=user`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(dataToSend)\n      });\n      if (response.ok) {\n        const updatedNote = await response.json();\n        setNotes(prevNotes => prevNotes.map(note => note.id === id || note.filename === id ? updatedNote : note));\n        setError(null); // ✅ Clear error on success\n\n        // Check achievements after note update\n        setTimeout(() => {\n          checkNoteAchievements();\n        }, 100);\n        return updatedNote;\n      } else {\n        const errorText = await response.text();\n        throw new Error(`Failed to update note: ${response.status} ${errorText}`);\n      }\n    } catch (error) {\n      console.error('Error updating note:', error);\n      setError(error.message); // ✅ Set error state\n      throw error;\n    }\n  };\n  const deleteNote = async id => {\n    try {\n      console.log('useNotes: Deleting note with ID:', id);\n\n      // ✅ FIX: Use consistent API endpoint\n      const response = await fetch(`${API_BASE}/${id}?username=user`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        setNotes(prevNotes => prevNotes.filter(note => note.id !== id));\n        setError(null); // ✅ Clear error on success\n      } else {\n        throw new Error(`Failed to delete note: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error deleting note:', error);\n      setError(error.message); // ✅ Set error state\n      throw error;\n    }\n  };\n\n  // Helper function for week start\n  const getWeekStart = date => {\n    const d = new Date(date);\n    const day = d.getDay();\n    const diff = d.getDate() - day;\n    return new Date(d.setDate(diff));\n  };\n\n  // Helper function for note streak calculation\n  const calculateNoteStreak = notes => {\n    if (notes.length === 0) return 0;\n    const dates = [...new Set(notes.map(n => new Date(n.createdAt).toDateString()))].sort();\n    let streak = 1;\n    let currentStreak = 1;\n    for (let i = 1; i < dates.length; i++) {\n      const prevDate = new Date(dates[i - 1]);\n      const currentDate = new Date(dates[i]);\n      const dayDiff = (currentDate - prevDate) / (1000 * 60 * 60 * 24);\n      if (dayDiff === 1) {\n        currentStreak++;\n        streak = Math.max(streak, currentStreak);\n      } else {\n        currentStreak = 1;\n      }\n    }\n    return streak;\n  };\n  const checkNoteAchievements = () => {\n    const userStats = calculateNoteStats(notes);\n    const newAchievements = achievementService.checkAchievements(userStats);\n    if (newAchievements.length > 0) {\n      console.log(`📝 Note achievements unlocked: ${newAchievements.map(a => a.name).join(', ')}`);\n    }\n    return newAchievements;\n  };\n  const calculateNoteStats = notes => {\n    const now = new Date();\n    const today = now.toDateString();\n    const thisWeek = getWeekStart(now);\n    console.log(`📅 Today is: ${today}`); // ✅ DEBUG LOG\n\n    // Calculate note statistics\n    const totalNotes = notes.length;\n    const totalWords = notes.reduce((sum, note) => {\n      var _note$content;\n      return sum + (((_note$content = note.content) === null || _note$content === void 0 ? void 0 : _note$content.split(' ').length) || 0);\n    }, 0);\n\n    // ✅ FIX: Get all unique tags properly\n    const allTags = new Set();\n    notes.forEach(note => {\n      // Handle both array and string tags\n      if (Array.isArray(note.tags)) {\n        note.tags.forEach(tag => allTags.add(tag.toLowerCase().trim()));\n      } else if (typeof note.tags === 'string' && note.tags.trim()) {\n        note.tags.split(',').forEach(tag => {\n          const cleanTag = tag.toLowerCase().trim();\n          if (cleanTag) allTags.add(cleanTag);\n        });\n      }\n      // Also check tagsString field\n      if (note.tagsString && typeof note.tagsString === 'string') {\n        note.tagsString.split(',').forEach(tag => {\n          const cleanTag = tag.toLowerCase().trim();\n          if (cleanTag) allTags.add(cleanTag);\n        });\n      }\n    });\n    const uniqueTags = allTags.size;\n\n    // ✅ FIX: Today's notes with better debugging\n    const notesToday = notes.filter(note => {\n      if (!note.createdAt) {\n        console.warn('❌ Note missing createdAt:', note);\n        return false;\n      }\n\n      // Parse both dates consistently\n      const noteDate = new Date(note.createdAt);\n      const todayDate = new Date();\n\n      // Compare dates only (ignore time)\n      const noteDateString = noteDate.toDateString();\n      const todayDateString = todayDate.toDateString();\n      const isToday = noteDateString === todayDateString;\n      if (isToday) {\n        console.log(`✅ TODAY's note found: \"${note.title}\" created ${note.createdAt}`);\n      } else {\n        console.log(`📅 Note \"${note.title}\": created ${note.createdAt} -> ${noteDateString} | Today: ${todayDateString} | Match: ${isToday}`);\n      }\n      return isToday;\n    }).length;\n    console.log(`📊 Notes today: ${notesToday} out of ${notes.length} total`);\n\n    // Week notes\n    const notesThisWeek = notes.filter(note => note.createdAt && new Date(note.createdAt) >= thisWeek).length;\n\n    // Weekend notes\n    const weekendNotes = notes.filter(note => {\n      if (!note.createdAt) return false;\n      const day = new Date(note.createdAt).getDay();\n      return day === 0 || day === 6; // Sunday or Saturday\n    }).length;\n\n    // Max words in a single note\n    const maxWordsInNote = Math.max(...notes.map(note => {\n      var _note$content2;\n      return ((_note$content2 = note.content) === null || _note$content2 === void 0 ? void 0 : _note$content2.split(' ').length) || 0;\n    }), 0);\n\n    // Max tags in a single note\n    const maxTagsInNote = Math.max(...notes.map(note => {\n      if (Array.isArray(note.tags)) return note.tags.length;\n      if (typeof note.tags === 'string' && note.tags.trim()) {\n        return note.tags.split(',').length;\n      }\n      return 0;\n    }), 0);\n\n    // Note streak (simplified)\n    const noteStreak = calculateNoteStreak(notes);\n    const totalEdits = notes.reduce((sum, note) => sum + (note.editCount || 1), 0);\n    return {\n      totalNotes,\n      totalWords,\n      uniqueTags,\n      notesToday,\n      // ✅ NOW PROPERLY CALCULATED\n      notesThisWeek,\n      weekendNotes,\n      maxWordsInNote,\n      maxTagsInNote,\n      noteStreak,\n      totalEdits,\n      maxEditsOnNote: Math.max(...notes.map(note => note.editCount || 1), 0)\n    };\n  };\n  return {\n    notes,\n    loading,\n    error,\n    // ✅ ADD ERROR TO RETURN\n    createNote,\n    updateNote,\n    deleteNote,\n    refreshNotes: fetchNotes\n  };\n};\n_s(useNotes, \"Z/NROwuP+0IWNVHnqL5R6yFSuNY=\");\nexport default useNotes;","map":{"version":3,"names":["useState","useEffect","achievementService","useNotes","_s","notes","setNotes","loading","setLoading","error","setError","API_BASE","fetchNotes","response","fetch","ok","data","json","console","statusText","message","createNote","noteData","log","noteWithTimestamp","createdAt","Date","toISOString","updatedAt","method","headers","body","JSON","stringify","errorText","text","status","entries","Error","newNote","noteWithProperTimestamp","prevNotes","setTimeout","checkNoteAchievements","err","updateNote","id","dataToSend","tags","Array","isArray","split","map","t","trim","filter","updatedNote","note","filename","deleteNote","getWeekStart","date","d","day","getDay","diff","getDate","setDate","calculateNoteStreak","length","dates","Set","n","toDateString","sort","streak","currentStreak","i","prevDate","currentDate","dayDiff","Math","max","userStats","calculateNoteStats","newAchievements","checkAchievements","a","name","join","now","today","thisWeek","totalNotes","totalWords","reduce","sum","_note$content","content","allTags","forEach","tag","add","toLowerCase","cleanTag","tagsString","uniqueTags","size","notesToday","warn","noteDate","todayDate","noteDateString","todayDateString","isToday","title","notesThisWeek","weekendNotes","maxWordsInNote","_note$content2","maxTagsInNote","noteStreak","totalEdits","editCount","maxEditsOnNote","refreshNotes"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/useNotes.js"],"sourcesContent":["// src/hooks/useNotes.js\nimport { useState, useEffect } from 'react';\nimport achievementService from '../services/achievementService';\n\nconst useNotes = () => {\n  const [notes, setNotes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);  // ✅ ADD THIS MISSING STATE\n\n  // ✅ ADD MISSING API_BASE CONSTANT\n  const API_BASE = 'http://localhost:8080/api/notes';\n\n  useEffect(() => {\n    fetchNotes();\n  }, []);\n\n  const fetchNotes = async () => {\n    try {\n      setLoading(true);\n      // ✅ FIX: Use consistent API endpoint\n      const response = await fetch(`${API_BASE}?username=user`);\n      if (response.ok) {\n        const data = await response.json();\n        setNotes(data);\n        setError(null);  // ✅ Clear error on success\n      } else {\n        console.error('Failed to fetch notes:', response.statusText);\n        setError('Failed to fetch notes');\n      }\n    } catch (error) {\n      console.error('Error fetching notes:', error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // REPLACE the createNote method with better error logging:\n  const createNote = async (noteData) => {\n    try {\n      console.log('useNotes: Creating note with data:', noteData);\n      \n      // ✅ FIX: Ensure createdAt is set to NOW\n      const noteWithTimestamp = {\n        ...noteData,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      console.log('📝 Note with timestamp:', noteWithTimestamp);\n      \n      const response = await fetch(`${API_BASE}?username=user`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(noteWithTimestamp),\n      });\n\n      if (!response.ok) {\n        // ✅ ADD: Get detailed error message\n        const errorText = await response.text();\n        console.error('❌ Backend error response:', errorText);\n        console.error('❌ Response status:', response.status);\n        console.error('❌ Response headers:', [...response.headers.entries()]);\n        throw new Error(`Failed to create note: ${response.status} - ${errorText}`);\n      }\n\n      const newNote = await response.json();\n      console.log('📝 Backend returned note:', newNote);  // ✅ DEBUG LOG\n      \n      // ✅ FIX: Ensure the returned note has proper timestamp\n      const noteWithProperTimestamp = {\n        ...newNote,\n        createdAt: newNote.createdAt || new Date().toISOString(),\n        updatedAt: newNote.updatedAt || new Date().toISOString()\n      };\n      \n      console.log('📝 Final note for state:', noteWithProperTimestamp);  // ✅ DEBUG LOG\n      \n      setNotes(prevNotes => [...prevNotes, noteWithProperTimestamp]);\n      setError(null);\n\n      // Check for achievements after a short delay to ensure state is updated\n      setTimeout(() => {\n        checkNoteAchievements();\n      }, 100);\n\n      return noteWithProperTimestamp;\n    } catch (err) {\n      console.error('useNotes: Error creating note:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  const updateNote = async (id, noteData) => {\n    try {\n      console.log('useNotes: Updating note with ID:', id, 'Data:', noteData);\n      \n      const dataToSend = {\n        ...noteData,\n        tags: Array.isArray(noteData.tags) ? noteData.tags : \n              typeof noteData.tags === 'string' ? noteData.tags.split(',').map(t => t.trim()).filter(t => t) : [],\n        updatedAt: new Date().toISOString()  // ✅ ADD TIMESTAMP\n      };\n\n      // ✅ FIX: Use consistent API endpoint\n      const response = await fetch(`${API_BASE}/${id}?username=user`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(dataToSend),\n      });\n\n      if (response.ok) {\n        const updatedNote = await response.json();\n        setNotes(prevNotes => \n          prevNotes.map(note => \n            (note.id === id || note.filename === id) ? updatedNote : note\n          )\n        );\n        \n        setError(null);  // ✅ Clear error on success\n        \n        // Check achievements after note update\n        setTimeout(() => {\n          checkNoteAchievements();\n        }, 100);\n        \n        return updatedNote;\n      } else {\n        const errorText = await response.text();\n        throw new Error(`Failed to update note: ${response.status} ${errorText}`);\n      }\n    } catch (error) {\n      console.error('Error updating note:', error);\n      setError(error.message);  // ✅ Set error state\n      throw error;\n    }\n  };\n\n  const deleteNote = async (id) => {\n    try {\n      console.log('useNotes: Deleting note with ID:', id);\n      \n      // ✅ FIX: Use consistent API endpoint\n      const response = await fetch(`${API_BASE}/${id}?username=user`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        setNotes(prevNotes => prevNotes.filter(note => note.id !== id));\n        setError(null);  // ✅ Clear error on success\n      } else {\n        throw new Error(`Failed to delete note: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error deleting note:', error);\n      setError(error.message);  // ✅ Set error state\n      throw error;\n    }\n  };\n\n  // Helper function for week start\n  const getWeekStart = (date) => {\n    const d = new Date(date);\n    const day = d.getDay();\n    const diff = d.getDate() - day;\n    return new Date(d.setDate(diff));\n  };\n\n  // Helper function for note streak calculation\n  const calculateNoteStreak = (notes) => {\n    if (notes.length === 0) return 0;\n    \n    const dates = [...new Set(notes.map(n => new Date(n.createdAt).toDateString()))].sort();\n    let streak = 1;\n    let currentStreak = 1;\n    \n    for (let i = 1; i < dates.length; i++) {\n      const prevDate = new Date(dates[i - 1]);\n      const currentDate = new Date(dates[i]);\n      const dayDiff = (currentDate - prevDate) / (1000 * 60 * 60 * 24);\n      \n      if (dayDiff === 1) {\n        currentStreak++;\n        streak = Math.max(streak, currentStreak);\n      } else {\n        currentStreak = 1;\n      }\n    }\n    \n    return streak;\n  };\n\n  const checkNoteAchievements = () => {\n    const userStats = calculateNoteStats(notes);\n    const newAchievements = achievementService.checkAchievements(userStats);\n    \n    if (newAchievements.length > 0) {\n      console.log(`📝 Note achievements unlocked: ${newAchievements.map(a => a.name).join(', ')}`);\n    }\n    \n    return newAchievements;\n  };\n\n  const calculateNoteStats = (notes) => {\n    const now = new Date();\n    const today = now.toDateString();\n    const thisWeek = getWeekStart(now);\n    \n    console.log(`📅 Today is: ${today}`); // ✅ DEBUG LOG\n    \n    // Calculate note statistics\n    const totalNotes = notes.length;\n    const totalWords = notes.reduce((sum, note) => sum + (note.content?.split(' ').length || 0), 0);\n    \n    // ✅ FIX: Get all unique tags properly\n    const allTags = new Set();\n    notes.forEach(note => {\n      // Handle both array and string tags\n      if (Array.isArray(note.tags)) {\n        note.tags.forEach(tag => allTags.add(tag.toLowerCase().trim()));\n      } else if (typeof note.tags === 'string' && note.tags.trim()) {\n        note.tags.split(',').forEach(tag => {\n          const cleanTag = tag.toLowerCase().trim();\n          if (cleanTag) allTags.add(cleanTag);\n        });\n      }\n      // Also check tagsString field\n      if (note.tagsString && typeof note.tagsString === 'string') {\n        note.tagsString.split(',').forEach(tag => {\n          const cleanTag = tag.toLowerCase().trim();\n          if (cleanTag) allTags.add(cleanTag);\n        });\n      }\n    });\n    const uniqueTags = allTags.size;\n    \n    // ✅ FIX: Today's notes with better debugging\n    const notesToday = notes.filter(note => {\n      if (!note.createdAt) {\n        console.warn('❌ Note missing createdAt:', note);\n        return false;\n      }\n      \n      // Parse both dates consistently\n      const noteDate = new Date(note.createdAt);\n      const todayDate = new Date();\n      \n      // Compare dates only (ignore time)\n      const noteDateString = noteDate.toDateString();\n      const todayDateString = todayDate.toDateString();\n      \n      const isToday = noteDateString === todayDateString;\n      \n      if (isToday) {\n        console.log(`✅ TODAY's note found: \"${note.title}\" created ${note.createdAt}`);\n      } else {\n        console.log(`📅 Note \"${note.title}\": created ${note.createdAt} -> ${noteDateString} | Today: ${todayDateString} | Match: ${isToday}`);\n      }\n      \n      return isToday;\n    }).length;\n\n    console.log(`📊 Notes today: ${notesToday} out of ${notes.length} total`);\n    \n    // Week notes\n    const notesThisWeek = notes.filter(note => \n      note.createdAt && new Date(note.createdAt) >= thisWeek\n    ).length;\n    \n    // Weekend notes\n    const weekendNotes = notes.filter(note => {\n      if (!note.createdAt) return false;\n      const day = new Date(note.createdAt).getDay();\n      return day === 0 || day === 6; // Sunday or Saturday\n    }).length;\n    \n    // Max words in a single note\n    const maxWordsInNote = Math.max(...notes.map(note => \n      note.content?.split(' ').length || 0\n    ), 0);\n    \n    // Max tags in a single note\n    const maxTagsInNote = Math.max(...notes.map(note => {\n      if (Array.isArray(note.tags)) return note.tags.length;\n      if (typeof note.tags === 'string' && note.tags.trim()) {\n        return note.tags.split(',').length;\n      }\n      return 0;\n    }), 0);\n    \n    // Note streak (simplified)\n    const noteStreak = calculateNoteStreak(notes);\n    const totalEdits = notes.reduce((sum, note) => sum + (note.editCount || 1), 0);\n\n    return {\n      totalNotes,\n      totalWords,\n      uniqueTags,\n      notesToday,        // ✅ NOW PROPERLY CALCULATED\n      notesThisWeek,\n      weekendNotes,\n      maxWordsInNote,\n      maxTagsInNote,\n      noteStreak,\n      totalEdits,\n      maxEditsOnNote: Math.max(...notes.map(note => note.editCount || 1), 0)\n    };\n  };\n\n  return {\n    notes,\n    loading,\n    error,           // ✅ ADD ERROR TO RETURN\n    createNote,\n    updateNote,\n    deleteNote,\n    refreshNotes: fetchNotes\n  };\n};\n\nexport default useNotes;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}