{"ast":null,"code":"import _objectSpread from\"/Users/jenn/Projects/Pixel-Pages/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import apiService from'./api';import{allAchievements}from'../data/achievements';class BackendAchievementService{constructor(){this.allAchievements=[];this.playerAchievements=[];this.playerStats={};this.loaded=false;}getUnlockedAchievements(){if(!this.loaded){console.warn('⚠️ Backend achievement service not loaded yet');return[];}const unlockedIds=this.playerAchievements.filter(pa=>pa.unlocked).map(pa=>pa.achievementId);const unlockedAchievements=this.allAchievements.filter(achievement=>unlockedIds.includes(achievement.id)).map(achievement=>{const playerAch=this.playerAchievements.find(pa=>pa.achievementId===achievement.id);return _objectSpread(_objectSpread({},achievement),{},{unlockedAt:(playerAch===null||playerAch===void 0?void 0:playerAch.unlockedAt)||new Date().toISOString(),progress:(playerAch===null||playerAch===void 0?void 0:playerAch.progress)||100});});return unlockedAchievements;}getLockedAchievements(){if(!this.loaded){console.warn('⚠️ Backend achievement service not loaded yet');return[];}const unlockedIds=this.playerAchievements.filter(pa=>pa.unlocked).map(pa=>pa.achievementId);return this.allAchievements.filter(achievement=>!unlockedIds.includes(achievement.id));}getInProgressAchievements(){if(!this.loaded){console.warn('⚠️ Backend achievement service not loaded yet');return[];}const inProgressIds=this.playerAchievements.filter(pa=>!pa.unlocked&&pa.progress>0).map(pa=>pa.achievementId);return this.allAchievements.filter(achievement=>inProgressIds.includes(achievement.id)).map(achievement=>{const playerAch=this.playerAchievements.find(pa=>pa.achievementId===achievement.id);return _objectSpread(_objectSpread({},achievement),{},{progress:(playerAch===null||playerAch===void 0?void 0:playerAch.progress)||0});});}// Load player data from localStorage\nloadPlayerDataFromLocalStorage(){console.log('🔄 LOADING PLAYER DATA FROM LOCALSTORAGE');// Load unlocked achievements from localStorage and filter out nulls\nconst unlockedIds=JSON.parse(localStorage.getItem('unlockedAchievements')||'[]').filter(id=>id!==null&&id!==undefined);const achievementData=JSON.parse(localStorage.getItem('achievementData')||'{}');console.log('📦 LocalStorage player data:',{unlockedIds,achievementData});// 🔍 DEBUG: Check if the achievement IDs from localStorage actually exist\nunlockedIds.forEach(id=>{const exists=this.allAchievements.find(a=>a.id===id);if(!exists){console.warn(\"\\u26A0\\uFE0F Achievement \".concat(id,\" from localStorage not found in allAchievements\"));console.log('Available achievement IDs starting with FIRST:',this.allAchievements.filter(a=>a.id.includes('FIRST')).map(a=>a.id));}});// Convert to player achievement format\nthis.playerAchievements=unlockedIds.map(achievementId=>{var _achievementData$achi;return{achievementId,unlocked:true,progress:100,unlockedAt:((_achievementData$achi=achievementData[achievementId])===null||_achievementData$achi===void 0?void 0:_achievementData$achi.unlockedAt)||new Date().toISOString()};});// Mock player stats\nthis.playerStats={totalNotes:0,totalWords:0,completedAchievements:unlockedIds.length,totalSessions:0,totalFocusTime:0,totalXp:unlockedIds.length*100// 100 XP per achievement\n};console.log('✅ Loaded player data from localStorage:',{playerAchievements:this.playerAchievements.length,unlockedCount:unlockedIds.length});}// NEW: Load from localStorage if backend fails completely\nloadFromLocalStorage(){console.log('🔄 LOADING EVERYTHING FROM LOCALSTORAGE');// Use local achievements data\nthis.allAchievements=allAchievements;// Load player data\nthis.loadPlayerDataFromLocalStorage();this.loaded=true;console.log('✅ Loaded everything from localStorage:',{allAchievements:this.allAchievements.length,playerAchievements:this.playerAchievements.length});}async loadData(){let username=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'Jroc_182';try{var _this$allAchievements,_this$playerAchieveme;console.log('🔄 BACKEND SERVICE: Loading data for',username);// Try to load achievements from API\nlet achievements=[];try{var _achievements;achievements=await apiService.getAllAchievements();console.log('✅ Loaded achievements from API:',((_achievements=achievements)===null||_achievements===void 0?void 0:_achievements.length)||0);}catch(error){console.warn('⚠️ Failed to load achievements from API, using local data');achievements=allAchievements;}// Try to load player data from API\nlet playerAchievements=[];let stats={};try{const[playerAchievementsData,statsData]=await Promise.all([apiService.getPlayerAchievements(username),apiService.getAchievementPlayerStats(username)]);playerAchievements=playerAchievementsData||[];stats=statsData||{};console.log('✅ Loaded player data from API');}catch(error){console.warn('⚠️ Failed to load player data from API, using localStorage');// Don't load from localStorage here yet - we'll do it below\n}// Set the achievements data (either from API or local)\nthis.allAchievements=achievements;// If we got player data from API, use it. Otherwise, load from localStorage\nif(playerAchievements.length>0||Object.keys(stats).length>0){console.log('📡 Using API player data');this.playerAchievements=playerAchievements;this.playerStats=stats;}else{console.log('💾 No API player data found, loading from localStorage');this.loadPlayerDataFromLocalStorage();}this.loaded=true;console.log('🔍 BACKEND SERVICE: Final data loaded:');console.log('   - achievements:',((_this$allAchievements=this.allAchievements)===null||_this$allAchievements===void 0?void 0:_this$allAchievements.length)||0);console.log('   - playerAchievements:',((_this$playerAchieveme=this.playerAchievements)===null||_this$playerAchieveme===void 0?void 0:_this$playerAchieveme.length)||0);console.log('   - stats:',this.playerStats);console.log('✅ Backend achievement data loaded for',username);return{achievements:this.allAchievements,playerAchievements:this.playerAchievements,stats:this.playerStats};}catch(error){console.error('❌ Failed to load backend achievements:',error);// 🔄 COMPLETE FALLBACK: Load everything from localStorage\nconsole.log('🔄 COMPLETE BACKEND FAILURE: Loading everything from localStorage');this.loadFromLocalStorage();return{achievements:this.allAchievements,playerAchievements:this.playerAchievements,stats:this.playerStats};}}isUnlocked(achievementId){if(!this.loaded)return false;const playerAch=this.playerAchievements.find(pa=>pa.achievementId===achievementId);return(playerAch===null||playerAch===void 0?void 0:playerAch.unlocked)||false;}unlockAchievement(achievementId){// Find or create player achievement\nlet playerAch=this.playerAchievements.find(pa=>pa.achievementId===achievementId);if(!playerAch){playerAch={achievementId,progress:100,unlocked:true,unlockedAt:new Date().toISOString()};this.playerAchievements.push(playerAch);}else{playerAch.unlocked=true;playerAch.progress=100;playerAch.unlockedAt=new Date().toISOString();}console.log(\"\\uD83C\\uDFC6 Unlocked achievement: \".concat(achievementId));}getStats(){if(!this.loaded){return{total:0,unlocked:0,locked:0,inProgress:0,completionRate:0};}const unlockedCount=this.getUnlockedAchievements().length;const totalCount=this.allAchievements.length;const inProgressCount=this.getInProgressAchievements().length;const lockedCount=totalCount-unlockedCount;return{total:totalCount,unlocked:unlockedCount,locked:lockedCount,inProgress:inProgressCount,completionRate:totalCount>0?Math.round(unlockedCount/totalCount*100):0};}}// Export singleton instance\nconst backendAchievementService=new BackendAchievementService();export default backendAchievementService;","map":{"version":3,"names":["apiService","allAchievements","BackendAchievementService","constructor","playerAchievements","playerStats","loaded","getUnlockedAchievements","console","warn","unlockedIds","filter","pa","unlocked","map","achievementId","unlockedAchievements","achievement","includes","id","playerAch","find","_objectSpread","unlockedAt","Date","toISOString","progress","getLockedAchievements","getInProgressAchievements","inProgressIds","loadPlayerDataFromLocalStorage","log","JSON","parse","localStorage","getItem","undefined","achievementData","forEach","exists","a","concat","_achievementData$achi","totalNotes","totalWords","completedAchievements","length","totalSessions","totalFocusTime","totalXp","unlockedCount","loadFromLocalStorage","loadData","username","arguments","_this$allAchievements","_this$playerAchieveme","achievements","_achievements","getAllAchievements","error","stats","playerAchievementsData","statsData","Promise","all","getPlayerAchievements","getAchievementPlayerStats","Object","keys","isUnlocked","unlockAchievement","push","getStats","total","locked","inProgress","completionRate","totalCount","inProgressCount","lockedCount","Math","round","backendAchievementService"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/services/backendAchievementService.js"],"sourcesContent":["import apiService from './api';\nimport { allAchievements } from '../data/achievements';\n\nclass BackendAchievementService {\n  constructor() {\n    this.allAchievements = [];\n    this.playerAchievements = [];\n    this.playerStats = {};\n    this.loaded = false;\n  }\n\n  getUnlockedAchievements() {\n    if (!this.loaded) {\n      console.warn('⚠️ Backend achievement service not loaded yet');\n      return [];\n    }\n    \n    const unlockedIds = this.playerAchievements\n      .filter(pa => pa.unlocked)\n      .map(pa => pa.achievementId);\n    \n    const unlockedAchievements = this.allAchievements\n      .filter(achievement => unlockedIds.includes(achievement.id))\n      .map(achievement => {\n        const playerAch = this.playerAchievements.find(pa => pa.achievementId === achievement.id);\n        return {\n          ...achievement,\n          unlockedAt: playerAch?.unlockedAt || new Date().toISOString(),\n          progress: playerAch?.progress || 100\n        };\n      });\n    \n    return unlockedAchievements;\n  }\n\n  getLockedAchievements() {\n    if (!this.loaded) {\n      console.warn('⚠️ Backend achievement service not loaded yet');\n      return [];\n    }\n    \n    const unlockedIds = this.playerAchievements\n      .filter(pa => pa.unlocked)\n      .map(pa => pa.achievementId);\n    \n    return this.allAchievements.filter(achievement => !unlockedIds.includes(achievement.id));\n  }\n\n  getInProgressAchievements() {\n    if (!this.loaded) {\n      console.warn('⚠️ Backend achievement service not loaded yet');\n      return [];\n    }\n    \n    const inProgressIds = this.playerAchievements\n      .filter(pa => !pa.unlocked && pa.progress > 0)\n      .map(pa => pa.achievementId);\n    \n    return this.allAchievements\n      .filter(achievement => inProgressIds.includes(achievement.id))\n      .map(achievement => {\n        const playerAch = this.playerAchievements.find(pa => pa.achievementId === achievement.id);\n        return {\n          ...achievement,\n          progress: playerAch?.progress || 0\n        };\n      });\n  }\n\n  // Load player data from localStorage\n  loadPlayerDataFromLocalStorage() {\n    console.log('🔄 LOADING PLAYER DATA FROM LOCALSTORAGE');\n    \n    // Load unlocked achievements from localStorage and filter out nulls\n    const unlockedIds = JSON.parse(localStorage.getItem('unlockedAchievements') || '[]')\n      .filter(id => id !== null && id !== undefined);\n    \n    const achievementData = JSON.parse(localStorage.getItem('achievementData') || '{}');\n    \n    console.log('📦 LocalStorage player data:', { unlockedIds, achievementData });\n    \n    // 🔍 DEBUG: Check if the achievement IDs from localStorage actually exist\n    unlockedIds.forEach(id => {\n      const exists = this.allAchievements.find(a => a.id === id);\n      if (!exists) {\n        console.warn(`⚠️ Achievement ${id} from localStorage not found in allAchievements`);\n        console.log('Available achievement IDs starting with FIRST:', \n          this.allAchievements.filter(a => a.id.includes('FIRST')).map(a => a.id)\n        );\n      }\n    });\n    \n    // Convert to player achievement format\n    this.playerAchievements = unlockedIds.map(achievementId => ({\n      achievementId,\n      unlocked: true,\n      progress: 100,\n      unlockedAt: achievementData[achievementId]?.unlockedAt || new Date().toISOString()\n    }));\n    \n    // Mock player stats\n    this.playerStats = {\n      totalNotes: 0,\n      totalWords: 0,\n      completedAchievements: unlockedIds.length,\n      totalSessions: 0,\n      totalFocusTime: 0,\n      totalXp: unlockedIds.length * 100 // 100 XP per achievement\n    };\n    \n    console.log('✅ Loaded player data from localStorage:', {\n      playerAchievements: this.playerAchievements.length,\n      unlockedCount: unlockedIds.length\n    });\n  }\n\n  // NEW: Load from localStorage if backend fails completely\n  loadFromLocalStorage() {\n    console.log('🔄 LOADING EVERYTHING FROM LOCALSTORAGE');\n    \n    // Use local achievements data\n    this.allAchievements = allAchievements;\n    \n    // Load player data\n    this.loadPlayerDataFromLocalStorage();\n    \n    this.loaded = true;\n    \n    console.log('✅ Loaded everything from localStorage:', {\n      allAchievements: this.allAchievements.length,\n      playerAchievements: this.playerAchievements.length\n    });\n  }\n\n  async loadData(username = 'Jroc_182') {\n    try {\n      console.log('🔄 BACKEND SERVICE: Loading data for', username);\n      \n      // Try to load achievements from API\n      let achievements = [];\n      try {\n        achievements = await apiService.getAllAchievements();\n        console.log('✅ Loaded achievements from API:', achievements?.length || 0);\n      } catch (error) {\n        console.warn('⚠️ Failed to load achievements from API, using local data');\n        achievements = allAchievements;\n      }\n\n      // Try to load player data from API\n      let playerAchievements = [];\n      let stats = {};\n      \n      try {\n        const [playerAchievementsData, statsData] = await Promise.all([\n          apiService.getPlayerAchievements(username),\n          apiService.getAchievementPlayerStats(username)\n        ]);\n        playerAchievements = playerAchievementsData || [];\n        stats = statsData || {};\n        console.log('✅ Loaded player data from API');\n      } catch (error) {\n        console.warn('⚠️ Failed to load player data from API, using localStorage');\n        // Don't load from localStorage here yet - we'll do it below\n      }\n\n      // Set the achievements data (either from API or local)\n      this.allAchievements = achievements;\n\n      // If we got player data from API, use it. Otherwise, load from localStorage\n      if (playerAchievements.length > 0 || Object.keys(stats).length > 0) {\n        console.log('📡 Using API player data');\n        this.playerAchievements = playerAchievements;\n        this.playerStats = stats;\n      } else {\n        console.log('💾 No API player data found, loading from localStorage');\n        this.loadPlayerDataFromLocalStorage();\n      }\n\n      this.loaded = true;\n\n      console.log('🔍 BACKEND SERVICE: Final data loaded:');\n      console.log('   - achievements:', this.allAchievements?.length || 0);\n      console.log('   - playerAchievements:', this.playerAchievements?.length || 0);\n      console.log('   - stats:', this.playerStats);\n      console.log('✅ Backend achievement data loaded for', username);\n\n      return { \n        achievements: this.allAchievements, \n        playerAchievements: this.playerAchievements, \n        stats: this.playerStats \n      };\n    } catch (error) {\n      console.error('❌ Failed to load backend achievements:', error);\n      \n      // 🔄 COMPLETE FALLBACK: Load everything from localStorage\n      console.log('🔄 COMPLETE BACKEND FAILURE: Loading everything from localStorage');\n      this.loadFromLocalStorage();\n      \n      return {\n        achievements: this.allAchievements,\n        playerAchievements: this.playerAchievements,\n        stats: this.playerStats\n      };\n    }\n  }\n\n  isUnlocked(achievementId) {\n    if (!this.loaded) return false;\n    \n    const playerAch = this.playerAchievements.find(pa => pa.achievementId === achievementId);\n    return playerAch?.unlocked || false;\n  }\n\n  unlockAchievement(achievementId) {\n    // Find or create player achievement\n    let playerAch = this.playerAchievements.find(pa => pa.achievementId === achievementId);\n    \n    if (!playerAch) {\n      playerAch = {\n        achievementId,\n        progress: 100,\n        unlocked: true,\n        unlockedAt: new Date().toISOString()\n      };\n      this.playerAchievements.push(playerAch);\n    } else {\n      playerAch.unlocked = true;\n      playerAch.progress = 100;\n      playerAch.unlockedAt = new Date().toISOString();\n    }\n    \n    console.log(`🏆 Unlocked achievement: ${achievementId}`);\n  }\n\n  getStats() {\n    if (!this.loaded) {\n      return {\n        total: 0,\n        unlocked: 0,\n        locked: 0,\n        inProgress: 0,\n        completionRate: 0\n      };\n    }\n\n    const unlockedCount = this.getUnlockedAchievements().length;\n    const totalCount = this.allAchievements.length;\n    const inProgressCount = this.getInProgressAchievements().length;\n    const lockedCount = totalCount - unlockedCount;\n\n    return {\n      total: totalCount,\n      unlocked: unlockedCount,\n      locked: lockedCount,\n      inProgress: inProgressCount,\n      completionRate: totalCount > 0 ? Math.round((unlockedCount / totalCount) * 100) : 0\n    };\n  }\n}\n\n// Export singleton instance\nconst backendAchievementService = new BackendAchievementService();\nexport default backendAchievementService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}