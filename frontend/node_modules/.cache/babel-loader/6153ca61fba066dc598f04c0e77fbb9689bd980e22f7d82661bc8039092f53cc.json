{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nconst useTimer = () => {\n  _s();\n  const [time, setTime] = useState(0); // in seconds\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [mode, setMode] = useState('idle'); // 'idle', 'focus', 'break', 'completed'\n  const [initialTime, setInitialTime] = useState(0);\n  const intervalRef = useRef(null);\n\n  // Start timer with specified duration (in minutes)\n  const startTimer = (duration, timerMode = 'focus') => {\n    const seconds = duration * 60;\n    setTime(seconds);\n    setInitialTime(seconds);\n    setMode(timerMode);\n    setIsRunning(true);\n    setIsPaused(false);\n  };\n\n  // Pause/Resume timer\n  const togglePause = () => {\n    setIsPaused(!isPaused);\n  };\n\n  // Stop and reset timer\n  const stopTimer = () => {\n    setIsRunning(false);\n    setIsPaused(false);\n    setMode('idle');\n    setTime(0);\n    setInitialTime(0);\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n  };\n\n  // Reset timer to initial duration\n  const resetTimer = () => {\n    setTime(initialTime);\n    setIsPaused(false);\n    setIsRunning(false);\n  };\n\n  // Timer countdown effect\n  useEffect(() => {\n    if (isRunning && !isPaused && time > 0) {\n      intervalRef.current = setInterval(() => {\n        setTime(prevTime => {\n          if (prevTime <= 1) {\n            setIsRunning(false);\n            setMode('completed');\n            return 0;\n          }\n          return prevTime - 1;\n        });\n      }, 1000);\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    }\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isRunning, isPaused, time]);\n\n  // Format time for display\n  const formatTime = (seconds = time) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const secs = seconds % 60;\n    if (hours > 0) {\n      return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    }\n    return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Calculate progress percentage\n  const getProgress = () => {\n    if (!initialTime) return 0;\n    return (initialTime - time) / initialTime * 100;\n  };\n\n  // Get elapsed time in minutes\n  const getElapsedMinutes = () => {\n    return Math.floor((initialTime - time) / 60);\n  };\n  return {\n    time,\n    isRunning,\n    isPaused,\n    mode,\n    initialTime,\n    startTimer,\n    togglePause,\n    stopTimer,\n    resetTimer,\n    formatTime: formatTime(),\n    getProgress,\n    getElapsedMinutes\n  };\n};\n_s(useTimer, \"Udmd+YDdsI8yE8P6NlsbhOjCBFI=\");\nexport default useTimer;","map":{"version":3,"names":["useState","useEffect","useRef","useTimer","_s","time","setTime","isRunning","setIsRunning","isPaused","setIsPaused","mode","setMode","initialTime","setInitialTime","intervalRef","startTimer","duration","timerMode","seconds","togglePause","stopTimer","current","clearInterval","resetTimer","setInterval","prevTime","formatTime","hours","Math","floor","minutes","secs","toString","padStart","getProgress","getElapsedMinutes"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/useTimer.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nconst useTimer = () => {\n  const [time, setTime] = useState(0); // in seconds\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [mode, setMode] = useState('idle'); // 'idle', 'focus', 'break', 'completed'\n  const [initialTime, setInitialTime] = useState(0);\n  const intervalRef = useRef(null);\n\n  // Start timer with specified duration (in minutes)\n  const startTimer = (duration, timerMode = 'focus') => {\n    const seconds = duration * 60;\n    setTime(seconds);\n    setInitialTime(seconds);\n    setMode(timerMode);\n    setIsRunning(true);\n    setIsPaused(false);\n  };\n\n  // Pause/Resume timer\n  const togglePause = () => {\n    setIsPaused(!isPaused);\n  };\n\n  // Stop and reset timer\n  const stopTimer = () => {\n    setIsRunning(false);\n    setIsPaused(false);\n    setMode('idle');\n    setTime(0);\n    setInitialTime(0);\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n  };\n\n  // Reset timer to initial duration\n  const resetTimer = () => {\n    setTime(initialTime);\n    setIsPaused(false);\n    setIsRunning(false);\n  };\n\n  // Timer countdown effect\n  useEffect(() => {\n    if (isRunning && !isPaused && time > 0) {\n      intervalRef.current = setInterval(() => {\n        setTime(prevTime => {\n          if (prevTime <= 1) {\n            setIsRunning(false);\n            setMode('completed');\n            return 0;\n          }\n          return prevTime - 1;\n        });\n      }, 1000);\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isRunning, isPaused, time]);\n\n  // Format time for display\n  const formatTime = (seconds = time) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    \n    if (hours > 0) {\n      return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    }\n    return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Calculate progress percentage\n  const getProgress = () => {\n    if (!initialTime) return 0;\n    return ((initialTime - time) / initialTime) * 100;\n  };\n\n  // Get elapsed time in minutes\n  const getElapsedMinutes = () => {\n    return Math.floor((initialTime - time) / 60);\n  };\n\n  return {\n    time,\n    isRunning,\n    isPaused,\n    mode,\n    initialTime,\n    startTimer,\n    togglePause,\n    stopTimer,\n    resetTimer,\n    formatTime: formatTime(),\n    getProgress,\n    getElapsedMinutes\n  };\n};\n\nexport default useTimer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}