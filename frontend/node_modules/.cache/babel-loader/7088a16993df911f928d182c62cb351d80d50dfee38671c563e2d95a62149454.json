{"ast":null,"code":"import _objectSpread from\"/Users/jenn/Projects/Pixel-Pages/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{allAchievements,tierInfo}from'../data/achievements';class AchievementService{constructor(){this.unlockedAchievements=this.loadUnlockedAchievements();this.listeners=[];}// Load unlocked achievements from localStorage\nloadUnlockedAchievements(){const saved=localStorage.getItem('unlockedAchievements');return saved?JSON.parse(saved):[];}// Save unlocked achievements to localStorage\nsaveUnlockedAchievements(){localStorage.setItem('unlockedAchievements',JSON.stringify(this.unlockedAchievements));}// Add event listener for achievement unlocks\naddEventListener(callback){this.listeners.push(callback);}// Remove event listener\nremoveEventListener(callback){this.listeners=this.listeners.filter(listener=>listener!==callback);}// Notify listeners of achievement unlock\nnotifyListeners(achievement){this.listeners.forEach(callback=>callback(achievement));}// Check if achievement is unlocked\nisUnlocked(achievementId){return this.unlockedAchievements.some(a=>a.id===achievementId);}// Unlock achievement\nunlockAchievement(achievementId){if(this.isUnlocked(achievementId))return false;const achievement=allAchievements.find(a=>a.id===achievementId);if(!achievement)return false;const unlockedAchievement=_objectSpread(_objectSpread({},achievement),{},{unlockedAt:new Date().toISOString()});this.unlockedAchievements.push(unlockedAchievement);this.saveUnlockedAchievements();// ✅ Sync with backend immediately\nthis.syncAchievementWithBackend(achievementId);// Trigger achievement notification\nthis.triggerAchievementNotification(achievement);this.notifyListeners(achievement);// Track when achievements are unlocked\nthis.trackAchievementUnlock(achievementId);return true;}// Sync achievement with backend\nasync syncAchievementWithBackend(achievementId){try{const response=await fetch('http://localhost:8080/api/player/achievements/unlock',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({username:'user',achievementId:achievementId})});if(response.ok){console.log(\"\\u2705 Synced \".concat(achievementId,\" with backend\"));}else{console.warn(\"\\u26A0\\uFE0F Failed to sync \".concat(achievementId,\" with backend\"));}}catch(error){console.error(\"\\u274C Error syncing \".concat(achievementId,\":\"),error);}}// Track when achievements are unlocked\ntrackAchievementUnlock(achievementId){const unlockedAchievements=this.getUnlockedAchievements();if(!unlockedAchievements.includes(achievementId)){const newUnlocked=[...unlockedAchievements,achievementId];// Store with timestamp\nconst achievementData=JSON.parse(localStorage.getItem('achievementData')||'{}');achievementData.unlockedAchievements=newUnlocked;achievementData.unlockDates=_objectSpread(_objectSpread({},achievementData.unlockDates),{},{[achievementId]:new Date().toISOString()});localStorage.setItem('achievementData',JSON.stringify(achievementData));localStorage.setItem('unlockedAchievements',JSON.stringify(newUnlocked));}}// Check achievements based on user stats\ncheckAchievements(userStats){const newlyUnlocked=[];allAchievements.forEach(achievement=>{if(!this.isUnlocked(achievement.id)){if(this.meetsRequirement(achievement.requirement,userStats)){if(this.unlockAchievement(achievement.id)){newlyUnlocked.push(achievement);}}}});return newlyUnlocked;}// Enhanced requirement checking\nmeetsRequirement(requirement,userStats){var _userStats$sessionsBy;switch(requirement.type){// Note achievements\ncase'note_count':return(userStats.totalNotes||0)>=requirement.target;case'word_count':return(userStats.totalWords||0)>=requirement.target;case'unique_tags':return(userStats.uniqueTags||0)>=requirement.target;case'daily_notes':// ✅ FIX: Check if user created notes TODAY\nconst today=new Date().toDateString();const notesToday=userStats.notesToday||0;console.log(\"\\uD83D\\uDCC5 Daily notes check: \".concat(notesToday,\" notes today (need \").concat(requirement.target,\")\"));return notesToday>=requirement.target;case'weekend_notes':return(userStats.weekendNotes||0)>=requirement.target;case'weekly_notes':return(userStats.notesThisWeek||0)>=requirement.target;case'single_note_words':return(userStats.maxWordsInNote||0)>=requirement.target;case'single_note_tags':return(userStats.maxTagsInNote||0)>=requirement.target;case'streak':return(userStats.noteStreak||0)>=requirement.target;case'note_edits':return(userStats.totalEdits||userStats.totalNotes||0)>=requirement.target;// Task achievements\ncase'task_count':return(userStats.totalTasks||0)>=requirement.target;case'daily_tasks':return(userStats.tasksToday||0)>=requirement.target;case'weekly_tasks':return(userStats.tasksThisWeek||0)>=requirement.target;case'monthly_tasks':return(userStats.tasksThisMonth||0)>=requirement.target;case'high_priority_tasks':return(userStats.highPriorityTasks||0)>=requirement.target;case'urgent_tasks':return(userStats.urgentTasks||0)>=requirement.target;case'early_completions':return(userStats.earlyCompletions||0)>=requirement.target;case'completion_streak':return(userStats.taskStreak||0)>=requirement.target;case'task_categories':return(userStats.taskCategories||0)>=requirement.target;case'task_creation':return(userStats.tasksCreated||0)>=requirement.target;case'active_tasks':return(userStats.activeTasks||0)>=requirement.target;case'completion_rate':const completionRate=userStats.totalTasks>0?(userStats.completedTasks||0)/userStats.totalTasks:0;return completionRate>=requirement.target;// Focus achievements\ncase'session_count':return(userStats.totalSessions||0)>=requirement.target;case'total_time':return(userStats.totalFocusTime||0)>=requirement.target;case'single_session_duration':return(userStats.maxSessionDuration||0)>=requirement.target;case'session_duration_range':const rangeSessions=userStats.sessionsByDuration||{};let rangeCount=0;for(let duration=requirement.minDuration;duration<=requirement.maxDuration;duration++){rangeCount+=rangeSessions[duration]||0;}return rangeCount>=requirement.target;case'pomodoro_count':const pomodoroSessions=((_userStats$sessionsBy=userStats.sessionsByDuration)===null||_userStats$sessionsBy===void 0?void 0:_userStats$sessionsBy[25])||0;return pomodoroSessions>=requirement.target;case'daily_streak':return(userStats.focusStreak||0)>=requirement.target;case'category_sessions':const categorySessions=userStats.categorySessions||{};return(categorySessions[requirement.category]||0)>=requirement.target;case'category_time':const categoryTime=userStats.categoryTime||{};return Math.max(...Object.values(categoryTime))>=requirement.target;case'all_categories_time':const allCategoryTime=userStats.categoryTime||{};return Object.values(allCategoryTime).every(time=>time>=requirement.target);case'unique_categories':const uniqueCategories=Object.keys(userStats.categorySessions||{}).length;return uniqueCategories>=requirement.target;case'break_session':const breakSessions=userStats.breakSessions||0;return breakSessions>=requirement.target;case'long_sessions':const longSessions=userStats.sessionsOver90Min||0;return longSessions>=requirement.target;case'time_variety':const sessionTimes=Object.keys(userStats.sessionsByTime||{}).length;return sessionTimes>=requirement.target;// Combo achievements\ncase'daily_combo':const dailyActivities=userStats.dailyActivities||[];return requirement.activities.every(activity=>dailyActivities.includes(activity));case'weekly_combo':const weeklyActivities=userStats.weeklyActivities||[];return requirement.activities.every(activity=>weeklyActivities.includes(activity));case'combo_streak':return(userStats.comboStreak||0)>=requirement.target;case'activity_consistency':return(userStats.activityStreak||0)>=requirement.target;case'daily_activity_count':return(userStats.activitiesToday||0)>=requirement.target;case'monthly_activity_count':return(userStats.activitiesThisMonth||0)>=requirement.target;// Meta achievements\ncase'player_level':return(userStats.level||1)>=requirement.target;case'total_xp':return(userStats.totalXP||0)>=requirement.target;case'achievement_count':return this.unlockedAchievements.length>=requirement.target;case'completion_percentage':return this.unlockedAchievements.length/allAchievements.length>=requirement.target;case'tier_completion':const tierAchievements=allAchievements.filter(a=>a.tier===requirement.tier);const unlockedInTier=this.unlockedAchievements.filter(a=>a.tier===requirement.tier);return unlockedInTier.length/tierAchievements.length>=requirement.target;// Time-based achievements\ncase'time_range':const now=new Date();const hour=now.getHours();if(requirement.startHour>requirement.endHour){// Crosses midnight\nreturn hour>=requirement.startHour||hour<requirement.endHour;}return hour>=requirement.startHour&&hour<requirement.endHour;case'time_before':return new Date().getHours()<requirement.hour;case'time_after':return new Date().getHours()>=requirement.hour;case'weekend_activity':const dayOfWeek=new Date().getDay();return(dayOfWeek===0||dayOfWeek===6)&&(userStats.weekendActivities||0)>=requirement.target;case'speed_writing':return(userStats.fastestWordsPer5Min||0)>=requirement.words;// New cases added\ncase'tag_count':// ✅ MISSING - needed for TAG ROOKIE\nreturn(userStats.uniqueTags||0)>=requirement.target;case'note_edits':// ✅ MISSING - needed for BASIC EDITOR  \nreturn(userStats.totalEdits||userStats.totalNotes||0)>=requirement.target;case'duration_variety':return(userStats.durationVariety||0)>=requirement.target;case'monthly_sessions':return(userStats.sessionsThisMonth||0)>=requirement.target;case'priority_usage':return(userStats.priorityUsage||0)>=requirement.target;case'due_date_usage':return(userStats.dueDateUsage||0)>=requirement.target;case'tasks_created':return(userStats.tasksCreated||0)>=requirement.target;case'completion_ratio':const ratio=userStats.totalTasks>0?(userStats.completedTasks||0)/userStats.totalTasks:0;return ratio>=requirement.target;case'morning_completions':return(userStats.morningCompletions||0)>=requirement.target;case'evening_completions':return(userStats.eveningCompletions||0)>=requirement.target;case'active_lists':return(userStats.activeLists||0)>=requirement.target;case'ontime_rate':const ontimeRate=userStats.totalTasks>0?(userStats.ontimeTasks||0)/userStats.totalTasks:0;return ontimeRate>=requirement.rate;case'concurrent_tasks':return(userStats.concurrentTasks||0)>=requirement.target;case'super_combo':return(userStats.superCombo||0)>=requirement.target;case'late_night_activity':const currentHour=new Date().getHours();const isLateNight=currentHour>=22||currentHour<=5;// 10 PM to 5 AM\nreturn isLateNight&&(userStats.notesToday||0)>=1;case'early_morning_activity':return(userStats.earlyMorningActivity||0)>=requirement.target;case'category_completion':return(userStats.categoryCompletion||0)>=requirement.target;case'daily_activity_streak':return(userStats.dailyActivityStreak||0)>=requirement.target;case'feature_usage':return(userStats.featureUsage||0)>=requirement.target;case'category_mastery':return(userStats.categoryMastery||0)>=requirement.target;default:console.warn(\"Unknown requirement type: \".concat(requirement.type));return false;}}// Trigger achievement notification with enhanced styling\ntriggerAchievementNotification(achievement){const tier=tierInfo[achievement.tier];console.log(\"\\uD83C\\uDF89 \".concat(tier.emoji,\" \").concat(achievement.name,\" UNLOCKED! (+\").concat(achievement.xpReward,\" XP)\"));// Dispatch custom event for UI components\nwindow.dispatchEvent(new CustomEvent('achievementUnlocked',{detail:{achievement,tier,timestamp:new Date().toISOString()}}));// Play achievement sound (if available)\nthis.playAchievementSound(achievement.tier);}// Play achievement sound based on tier\nplayAchievementSound(tier){try{const audio=new Audio(\"/sounds/achievement_\".concat(tier,\".mp3\"));audio.volume=0.3;audio.play().catch(()=>{console.log(\"Sound not found for tier: \".concat(tier));});}catch(error){console.error('Error playing achievement sound:',error);}}// Get achievement progress\ngetAchievementProgress(achievementId,userStats){const achievement=allAchievements.find(a=>a.id===achievementId);if(!achievement||this.isUnlocked(achievementId))return 1;const req=achievement.requirement;let current=0;let target=req.target||1;switch(req.type){case'note_count':current=userStats.totalNotes||0;break;case'word_count':current=userStats.totalWords||0;break;case'task_count':current=userStats.totalTasks||0;break;case'session_count':current=userStats.totalSessions||0;break;case'total_time':current=userStats.totalFocusTime||0;break;case'unique_tags':current=userStats.uniqueTags||0;break;case'streak':case'completion_streak':case'daily_streak':current=userStats[req.type==='streak'?'noteStreak':req.type==='completion_streak'?'taskStreak':'focusStreak']||0;break;default:return 0;}return Math.min(current/target,1);}// Get user's next achievements to unlock\ngetNextAchievements(userStats){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5;return allAchievements.filter(achievement=>!this.isUnlocked(achievement.id)).map(achievement=>_objectSpread(_objectSpread({},achievement),{},{progress:this.getAchievementProgress(achievement.id,userStats)})).sort((a,b)=>b.progress-a.progress).slice(0,limit);}// Get recently unlocked achievements\ngetRecentlyUnlocked(){let days=arguments.length>0&&arguments[0]!==undefined?arguments[0]:7;const cutoffDate=new Date();cutoffDate.setDate(cutoffDate.getDate()-days);return this.unlockedAchievements.filter(achievement=>new Date(achievement.unlockedAt)>=cutoffDate).sort((a,b)=>new Date(b.unlockedAt)-new Date(a.unlockedAt));}// Get stats summary\ngetStats(){const total=allAchievements.length;const unlocked=this.unlockedAchievements.length;const byTier={common:this.unlockedAchievements.filter(a=>a.tier==='common').length,uncommon:this.unlockedAchievements.filter(a=>a.tier==='uncommon').length,rare:this.unlockedAchievements.filter(a=>a.tier==='rare').length,legendary:this.unlockedAchievements.filter(a=>a.tier==='legendary').length};const totalXP=this.unlockedAchievements.reduce((sum,achievement)=>sum+achievement.xpReward,0);return{total,unlocked,percentage:Math.round(unlocked/total*100),byTier,totalXP,recentUnlocks:this.getRecentlyUnlocked(7).length};}// Reset all achievements (for testing)\nresetAchievements(){this.unlockedAchievements=[];this.saveUnlockedAchievements();console.log('🔄 All achievements reset!');}// Manually unlock achievement (for testing)\nforceUnlock(achievementId){return this.unlockAchievement(achievementId);}// Get achievement with unlock date\ngetAchievementWithUnlockDate(achievement){const achievementData=JSON.parse(localStorage.getItem('achievementData')||'{}');const unlockDates=achievementData.unlockDates||{};return _objectSpread(_objectSpread({},achievement),{},{unlockedAt:unlockDates[achievement.id]||null});}// Get unlocked achievements\ngetUnlockedAchievements(){return this.unlockedAchievements.map(a=>a.id);}}export const achievementService=new AchievementService();export default achievementService;","map":{"version":3,"names":["allAchievements","tierInfo","AchievementService","constructor","unlockedAchievements","loadUnlockedAchievements","listeners","saved","localStorage","getItem","JSON","parse","saveUnlockedAchievements","setItem","stringify","addEventListener","callback","push","removeEventListener","filter","listener","notifyListeners","achievement","forEach","isUnlocked","achievementId","some","a","id","unlockAchievement","find","unlockedAchievement","_objectSpread","unlockedAt","Date","toISOString","syncAchievementWithBackend","triggerAchievementNotification","trackAchievementUnlock","response","fetch","method","headers","body","username","ok","console","log","concat","warn","error","getUnlockedAchievements","includes","newUnlocked","achievementData","unlockDates","checkAchievements","userStats","newlyUnlocked","meetsRequirement","requirement","_userStats$sessionsBy","type","totalNotes","target","totalWords","uniqueTags","today","toDateString","notesToday","weekendNotes","notesThisWeek","maxWordsInNote","maxTagsInNote","noteStreak","totalEdits","totalTasks","tasksToday","tasksThisWeek","tasksThisMonth","highPriorityTasks","urgentTasks","earlyCompletions","taskStreak","taskCategories","tasksCreated","activeTasks","completionRate","completedTasks","totalSessions","totalFocusTime","maxSessionDuration","rangeSessions","sessionsByDuration","rangeCount","duration","minDuration","maxDuration","pomodoroSessions","focusStreak","categorySessions","category","categoryTime","Math","max","Object","values","allCategoryTime","every","time","uniqueCategories","keys","length","breakSessions","longSessions","sessionsOver90Min","sessionTimes","sessionsByTime","dailyActivities","activities","activity","weeklyActivities","comboStreak","activityStreak","activitiesToday","activitiesThisMonth","level","totalXP","tierAchievements","tier","unlockedInTier","now","hour","getHours","startHour","endHour","dayOfWeek","getDay","weekendActivities","fastestWordsPer5Min","words","durationVariety","sessionsThisMonth","priorityUsage","dueDateUsage","ratio","morningCompletions","eveningCompletions","activeLists","ontimeRate","ontimeTasks","rate","concurrentTasks","superCombo","currentHour","isLateNight","earlyMorningActivity","categoryCompletion","dailyActivityStreak","featureUsage","categoryMastery","emoji","name","xpReward","window","dispatchEvent","CustomEvent","detail","timestamp","playAchievementSound","audio","Audio","volume","play","catch","getAchievementProgress","req","current","min","getNextAchievements","limit","arguments","undefined","map","progress","sort","b","slice","getRecentlyUnlocked","days","cutoffDate","setDate","getDate","getStats","total","unlocked","byTier","common","uncommon","rare","legendary","reduce","sum","percentage","round","recentUnlocks","resetAchievements","forceUnlock","getAchievementWithUnlockDate","achievementService"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/services/achievementService.js"],"sourcesContent":["import { allAchievements, tierInfo } from '../data/achievements';\n\nclass AchievementService {\n  constructor() {\n    this.unlockedAchievements = this.loadUnlockedAchievements();\n    this.listeners = [];\n  }\n\n  // Load unlocked achievements from localStorage\n  loadUnlockedAchievements() {\n    const saved = localStorage.getItem('unlockedAchievements');\n    return saved ? JSON.parse(saved) : [];\n  }\n\n  // Save unlocked achievements to localStorage\n  saveUnlockedAchievements() {\n    localStorage.setItem('unlockedAchievements', JSON.stringify(this.unlockedAchievements));\n  }\n\n  // Add event listener for achievement unlocks\n  addEventListener(callback) {\n    this.listeners.push(callback);\n  }\n\n  // Remove event listener\n  removeEventListener(callback) {\n    this.listeners = this.listeners.filter(listener => listener !== callback);\n  }\n\n  // Notify listeners of achievement unlock\n  notifyListeners(achievement) {\n    this.listeners.forEach(callback => callback(achievement));\n  }\n\n  // Check if achievement is unlocked\n  isUnlocked(achievementId) {\n    return this.unlockedAchievements.some(a => a.id === achievementId);\n  }\n\n  // Unlock achievement\n  unlockAchievement(achievementId) {\n    if (this.isUnlocked(achievementId)) return false;\n    \n    const achievement = allAchievements.find(a => a.id === achievementId);\n    if (!achievement) return false;\n\n    const unlockedAchievement = {\n      ...achievement,\n      unlockedAt: new Date().toISOString()\n    };\n\n    this.unlockedAchievements.push(unlockedAchievement);\n    this.saveUnlockedAchievements();\n    \n    // ✅ Sync with backend immediately\n    this.syncAchievementWithBackend(achievementId);\n    \n    // Trigger achievement notification\n    this.triggerAchievementNotification(achievement);\n    this.notifyListeners(achievement);\n    \n    // Track when achievements are unlocked\n    this.trackAchievementUnlock(achievementId);\n    \n    return true;\n  }\n\n  // Sync achievement with backend\n  async syncAchievementWithBackend(achievementId) {\n    try {\n      const response = await fetch('http://localhost:8080/api/player/achievements/unlock', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          username: 'user',\n          achievementId: achievementId\n        }),\n      });\n      \n      if (response.ok) {\n        console.log(`✅ Synced ${achievementId} with backend`);\n      } else {\n        console.warn(`⚠️ Failed to sync ${achievementId} with backend`);\n      }\n    } catch (error) {\n      console.error(`❌ Error syncing ${achievementId}:`, error);\n    }\n  }\n\n  // Track when achievements are unlocked\n  trackAchievementUnlock(achievementId) {\n    const unlockedAchievements = this.getUnlockedAchievements();\n    \n    if (!unlockedAchievements.includes(achievementId)) {\n      const newUnlocked = [...unlockedAchievements, achievementId];\n      \n      // Store with timestamp\n      const achievementData = JSON.parse(localStorage.getItem('achievementData') || '{}');\n      achievementData.unlockedAchievements = newUnlocked;\n      achievementData.unlockDates = {\n        ...achievementData.unlockDates,\n        [achievementId]: new Date().toISOString()\n      };\n      \n      localStorage.setItem('achievementData', JSON.stringify(achievementData));\n      localStorage.setItem('unlockedAchievements', JSON.stringify(newUnlocked));\n    }\n  }\n\n  // Check achievements based on user stats\n  checkAchievements(userStats) {\n    const newlyUnlocked = [];\n\n    allAchievements.forEach(achievement => {\n      if (!this.isUnlocked(achievement.id)) {\n        if (this.meetsRequirement(achievement.requirement, userStats)) {\n          if (this.unlockAchievement(achievement.id)) {\n            newlyUnlocked.push(achievement);\n          }\n        }\n      }\n    });\n\n    return newlyUnlocked;\n  }\n\n  // Enhanced requirement checking\n  meetsRequirement(requirement, userStats) {\n    switch (requirement.type) {\n      // Note achievements\n      case 'note_count':\n        return (userStats.totalNotes || 0) >= requirement.target;\n      \n      case 'word_count':\n        return (userStats.totalWords || 0) >= requirement.target;\n      \n      case 'unique_tags':\n        return (userStats.uniqueTags || 0) >= requirement.target;\n      \n      case 'daily_notes':\n        // ✅ FIX: Check if user created notes TODAY\n        const today = new Date().toDateString();\n        const notesToday = (userStats.notesToday || 0);\n        console.log(`📅 Daily notes check: ${notesToday} notes today (need ${requirement.target})`);\n        return notesToday >= requirement.target;\n      \n      case 'weekend_notes':\n        return (userStats.weekendNotes || 0) >= requirement.target;\n      \n      case 'weekly_notes':\n        return (userStats.notesThisWeek || 0) >= requirement.target;\n      \n      case 'single_note_words':\n        return (userStats.maxWordsInNote || 0) >= requirement.target;\n      \n      case 'single_note_tags':\n        return (userStats.maxTagsInNote || 0) >= requirement.target;\n      \n      case 'streak':\n        return (userStats.noteStreak || 0) >= requirement.target;\n      \n      case 'note_edits':\n        return (userStats.totalEdits || userStats.totalNotes || 0) >= requirement.target;\n      \n      // Task achievements\n      case 'task_count':\n        return (userStats.totalTasks || 0) >= requirement.target;\n      \n      case 'daily_tasks':\n        return (userStats.tasksToday || 0) >= requirement.target;\n      \n      case 'weekly_tasks':\n        return (userStats.tasksThisWeek || 0) >= requirement.target;\n      \n      case 'monthly_tasks':\n        return (userStats.tasksThisMonth || 0) >= requirement.target;\n      \n      case 'high_priority_tasks':\n        return (userStats.highPriorityTasks || 0) >= requirement.target;\n      \n      case 'urgent_tasks':\n        return (userStats.urgentTasks || 0) >= requirement.target;\n      \n      case 'early_completions':\n        return (userStats.earlyCompletions || 0) >= requirement.target;\n      \n      case 'completion_streak':\n        return (userStats.taskStreak || 0) >= requirement.target;\n      \n      case 'task_categories':\n        return (userStats.taskCategories || 0) >= requirement.target;\n      \n      case 'task_creation':\n        return (userStats.tasksCreated || 0) >= requirement.target;\n      \n      case 'active_tasks':\n        return (userStats.activeTasks || 0) >= requirement.target;\n      \n      case 'completion_rate':\n        const completionRate = userStats.totalTasks > 0 ? \n          (userStats.completedTasks || 0) / userStats.totalTasks : 0;\n        return completionRate >= requirement.target;\n      \n      // Focus achievements\n      case 'session_count':\n        return (userStats.totalSessions || 0) >= requirement.target;\n      \n      case 'total_time':\n        return (userStats.totalFocusTime || 0) >= requirement.target;\n      \n      case 'single_session_duration':\n        return (userStats.maxSessionDuration || 0) >= requirement.target;\n      \n      case 'session_duration_range':\n        const rangeSessions = userStats.sessionsByDuration || {};\n        let rangeCount = 0;\n        for (let duration = requirement.minDuration; duration <= requirement.maxDuration; duration++) {\n          rangeCount += rangeSessions[duration] || 0;\n        }\n        return rangeCount >= requirement.target;\n      \n      case 'pomodoro_count':\n        const pomodoroSessions = userStats.sessionsByDuration?.[25] || 0;\n        return pomodoroSessions >= requirement.target;\n      \n      case 'daily_streak':\n        return (userStats.focusStreak || 0) >= requirement.target;\n      \n      case 'category_sessions':\n        const categorySessions = userStats.categorySessions || {};\n        return (categorySessions[requirement.category] || 0) >= requirement.target;\n      \n      case 'category_time':\n        const categoryTime = userStats.categoryTime || {};\n        return Math.max(...Object.values(categoryTime)) >= requirement.target;\n      \n      case 'all_categories_time':\n        const allCategoryTime = userStats.categoryTime || {};\n        return Object.values(allCategoryTime).every(time => time >= requirement.target);\n      \n      case 'unique_categories':\n        const uniqueCategories = Object.keys(userStats.categorySessions || {}).length;\n        return uniqueCategories >= requirement.target;\n      \n      case 'break_session':\n        const breakSessions = userStats.breakSessions || 0;\n        return breakSessions >= requirement.target;\n      \n      case 'long_sessions':\n        const longSessions = userStats.sessionsOver90Min || 0;\n        return longSessions >= requirement.target;\n      \n      case 'time_variety':\n        const sessionTimes = Object.keys(userStats.sessionsByTime || {}).length;\n        return sessionTimes >= requirement.target;\n      \n      // Combo achievements\n      case 'daily_combo':\n        const dailyActivities = userStats.dailyActivities || [];\n        return requirement.activities.every(activity => dailyActivities.includes(activity));\n      \n      case 'weekly_combo':\n        const weeklyActivities = userStats.weeklyActivities || [];\n        return requirement.activities.every(activity => weeklyActivities.includes(activity));\n      \n      case 'combo_streak':\n        return (userStats.comboStreak || 0) >= requirement.target;\n      \n      case 'activity_consistency':\n        return (userStats.activityStreak || 0) >= requirement.target;\n      \n      case 'daily_activity_count':\n        return (userStats.activitiesToday || 0) >= requirement.target;\n      \n      case 'monthly_activity_count':\n        return (userStats.activitiesThisMonth || 0) >= requirement.target;\n      \n      // Meta achievements\n      case 'player_level':\n        return (userStats.level || 1) >= requirement.target;\n      \n      case 'total_xp':\n        return (userStats.totalXP || 0) >= requirement.target;\n      \n      case 'achievement_count':\n        return this.unlockedAchievements.length >= requirement.target;\n      \n      case 'completion_percentage':\n        return (this.unlockedAchievements.length / allAchievements.length) >= requirement.target;\n      \n      case 'tier_completion':\n        const tierAchievements = allAchievements.filter(a => a.tier === requirement.tier);\n        const unlockedInTier = this.unlockedAchievements.filter(a => a.tier === requirement.tier);\n        return (unlockedInTier.length / tierAchievements.length) >= requirement.target;\n      \n      // Time-based achievements\n      case 'time_range':\n        const now = new Date();\n        const hour = now.getHours();\n        if (requirement.startHour > requirement.endHour) {\n          // Crosses midnight\n          return hour >= requirement.startHour || hour < requirement.endHour;\n        }\n        return hour >= requirement.startHour && hour < requirement.endHour;\n      \n      case 'time_before':\n        return new Date().getHours() < requirement.hour;\n      \n      case 'time_after':\n        return new Date().getHours() >= requirement.hour;\n      \n      case 'weekend_activity':\n        const dayOfWeek = new Date().getDay();\n        return (dayOfWeek === 0 || dayOfWeek === 6) && (userStats.weekendActivities || 0) >= requirement.target;\n      \n      case 'speed_writing':\n        return (userStats.fastestWordsPer5Min || 0) >= requirement.words;\n      \n      // New cases added\n      case 'tag_count':  // ✅ MISSING - needed for TAG ROOKIE\n        return (userStats.uniqueTags || 0) >= requirement.target;\n\n      case 'note_edits':  // ✅ MISSING - needed for BASIC EDITOR  \n        return (userStats.totalEdits || userStats.totalNotes || 0) >= requirement.target;\n\n      case 'duration_variety':\n        return (userStats.durationVariety || 0) >= requirement.target;\n\n      case 'monthly_sessions':\n        return (userStats.sessionsThisMonth || 0) >= requirement.target;\n\n      case 'priority_usage':\n        return (userStats.priorityUsage || 0) >= requirement.target;\n\n      case 'due_date_usage':\n        return (userStats.dueDateUsage || 0) >= requirement.target;\n\n      case 'tasks_created':\n        return (userStats.tasksCreated || 0) >= requirement.target;\n\n      case 'completion_ratio':\n        const ratio = userStats.totalTasks > 0 ? \n          (userStats.completedTasks || 0) / userStats.totalTasks : 0;\n        return ratio >= requirement.target;\n\n      case 'morning_completions':\n        return (userStats.morningCompletions || 0) >= requirement.target;\n\n      case 'evening_completions':\n        return (userStats.eveningCompletions || 0) >= requirement.target;\n\n      case 'active_lists':\n        return (userStats.activeLists || 0) >= requirement.target;\n\n      case 'ontime_rate':\n        const ontimeRate = userStats.totalTasks > 0 ? \n          (userStats.ontimeTasks || 0) / userStats.totalTasks : 0;\n        return ontimeRate >= requirement.rate;\n\n      case 'concurrent_tasks':\n        return (userStats.concurrentTasks || 0) >= requirement.target;\n\n      case 'super_combo':\n        return (userStats.superCombo || 0) >= requirement.target;\n\n      case 'late_night_activity':\n        const currentHour = new Date().getHours();\n        const isLateNight = currentHour >= 22 || currentHour <= 5; // 10 PM to 5 AM\n        return isLateNight && (userStats.notesToday || 0) >= 1;\n\n      case 'early_morning_activity':\n        return (userStats.earlyMorningActivity || 0) >= requirement.target;\n\n      case 'category_completion':\n        return (userStats.categoryCompletion || 0) >= requirement.target;\n\n      case 'daily_activity_streak':\n        return (userStats.dailyActivityStreak || 0) >= requirement.target;\n\n      case 'feature_usage':\n        return (userStats.featureUsage || 0) >= requirement.target;\n\n      case 'category_mastery':\n        return (userStats.categoryMastery || 0) >= requirement.target;\n      \n      default:\n        console.warn(`Unknown requirement type: ${requirement.type}`);\n        return false;\n    }\n  }\n\n  // Trigger achievement notification with enhanced styling\n  triggerAchievementNotification(achievement) {\n    const tier = tierInfo[achievement.tier];\n    \n    console.log(`🎉 ${tier.emoji} ${achievement.name} UNLOCKED! (+${achievement.xpReward} XP)`);\n    \n    // Dispatch custom event for UI components\n    window.dispatchEvent(new CustomEvent('achievementUnlocked', {\n      detail: {\n        achievement,\n        tier,\n        timestamp: new Date().toISOString()\n      }\n    }));\n\n    // Play achievement sound (if available)\n    this.playAchievementSound(achievement.tier);\n  }\n\n  // Play achievement sound based on tier\n  playAchievementSound(tier) {\n    try {\n      const audio = new Audio(`/sounds/achievement_${tier}.mp3`);\n      audio.volume = 0.3;\n      audio.play().catch(() => {\n        console.log(`Sound not found for tier: ${tier}`);\n      });\n    } catch (error) {\n      console.error('Error playing achievement sound:', error);\n    }\n  }\n\n  // Get achievement progress\n  getAchievementProgress(achievementId, userStats) {\n    const achievement = allAchievements.find(a => a.id === achievementId);\n    if (!achievement || this.isUnlocked(achievementId)) return 1;\n\n    const req = achievement.requirement;\n    let current = 0;\n    let target = req.target || 1;\n\n    switch (req.type) {\n      case 'note_count':\n        current = userStats.totalNotes || 0;\n        break;\n      case 'word_count':\n        current = userStats.totalWords || 0;\n        break;\n      case 'task_count':\n        current = userStats.totalTasks || 0;\n        break;\n      case 'session_count':\n        current = userStats.totalSessions || 0;\n        break;\n      case 'total_time':\n        current = userStats.totalFocusTime || 0;\n        break;\n      case 'unique_tags':\n        current = userStats.uniqueTags || 0;\n        break;\n      case 'streak':\n      case 'completion_streak':\n      case 'daily_streak':\n        current = userStats[req.type === 'streak' ? 'noteStreak' : \n                            req.type === 'completion_streak' ? 'taskStreak' : 'focusStreak'] || 0;\n        break;\n      default:\n        return 0;\n    }\n\n    return Math.min(current / target, 1);\n  }\n\n  // Get user's next achievements to unlock\n  getNextAchievements(userStats, limit = 5) {\n    return allAchievements\n      .filter(achievement => !this.isUnlocked(achievement.id))\n      .map(achievement => ({\n        ...achievement,\n        progress: this.getAchievementProgress(achievement.id, userStats)\n      }))\n      .sort((a, b) => b.progress - a.progress)\n      .slice(0, limit);\n  }\n\n  // Get recently unlocked achievements\n  getRecentlyUnlocked(days = 7) {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - days);\n    \n    return this.unlockedAchievements\n      .filter(achievement => new Date(achievement.unlockedAt) >= cutoffDate)\n      .sort((a, b) => new Date(b.unlockedAt) - new Date(a.unlockedAt));\n  }\n\n  // Get stats summary\n  getStats() {\n    const total = allAchievements.length;\n    const unlocked = this.unlockedAchievements.length;\n    const byTier = {\n      common: this.unlockedAchievements.filter(a => a.tier === 'common').length,\n      uncommon: this.unlockedAchievements.filter(a => a.tier === 'uncommon').length,\n      rare: this.unlockedAchievements.filter(a => a.tier === 'rare').length,\n      legendary: this.unlockedAchievements.filter(a => a.tier === 'legendary').length\n    };\n\n    const totalXP = this.unlockedAchievements.reduce((sum, achievement) => sum + achievement.xpReward, 0);\n\n    return {\n      total,\n      unlocked,\n      percentage: Math.round((unlocked / total) * 100),\n      byTier,\n      totalXP,\n      recentUnlocks: this.getRecentlyUnlocked(7).length\n    };\n  }\n\n  // Reset all achievements (for testing)\n  resetAchievements() {\n    this.unlockedAchievements = [];\n    this.saveUnlockedAchievements();\n    console.log('🔄 All achievements reset!');\n  }\n\n  // Manually unlock achievement (for testing)\n  forceUnlock(achievementId) {\n    return this.unlockAchievement(achievementId);\n  }\n\n  // Get achievement with unlock date\n  getAchievementWithUnlockDate(achievement) {\n    const achievementData = JSON.parse(localStorage.getItem('achievementData') || '{}');\n    const unlockDates = achievementData.unlockDates || {};\n    \n    return {\n      ...achievement,\n      unlockedAt: unlockDates[achievement.id] || null\n    };\n  }\n\n  // Get unlocked achievements\n  getUnlockedAchievements() {\n    return this.unlockedAchievements.map(a => a.id);\n  }\n}\n\nexport const achievementService = new AchievementService();\nexport default achievementService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}