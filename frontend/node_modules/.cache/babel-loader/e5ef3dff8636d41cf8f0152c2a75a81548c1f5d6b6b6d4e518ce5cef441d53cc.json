{"ast":null,"code":"import apiService from './api';\nclass BackendAchievementService {\n  constructor() {\n    this.allAchievements = [];\n    this.playerAchievements = [];\n    this.playerStats = {};\n    this.loaded = false;\n  }\n  async loadData(username = 'Jroc_182') {\n    // Changed from 'testuser' to 'Jroc_182'\n    try {\n      const [achievements, playerAchievements, stats] = await Promise.all([apiService.getAllAchievements(), apiService.getPlayerAchievements(username), apiService.getAchievementPlayerStats(username)]);\n\n      // DEBUG: Log the actual data structure with more detail\n      console.log('🔍 DEBUG - Raw backend data for', username + ':');\n      console.log('First 2 achievements:', achievements.slice(0, 2));\n      console.log('First 5 player achievements:', playerAchievements.slice(0, 5));\n      console.log('Stats object:', stats);\n\n      // Show specific fields we're looking for\n      if (playerAchievements.length > 0) {\n        const firstPlayerAch = playerAchievements[0];\n        console.log('🔍 PlayerAchievement fields:', Object.keys(firstPlayerAch));\n        console.log('🔍 Sample PlayerAchievement:', firstPlayerAch);\n      }\n      this.allAchievements = achievements;\n      this.playerAchievements = playerAchievements;\n      this.playerStats = stats;\n      this.loaded = true;\n      console.log('✅ Backend achievement data loaded for', username + ':', {\n        achievements: achievements.length,\n        playerProgress: playerAchievements.length,\n        stats\n      });\n      return {\n        achievements,\n        playerAchievements,\n        stats\n      };\n    } catch (error) {\n      console.error('❌ Failed to load backend achievements:', error);\n      throw error;\n    }\n  }\n  getAchievementProgress(achievementId, userStats) {\n    const playerAchievement = this.playerAchievements.find(pa => pa.achievementId === achievementId);\n    if (playerAchievement !== null && playerAchievement !== void 0 && playerAchievement.completed) return 1;\n    return ((playerAchievement === null || playerAchievement === void 0 ? void 0 : playerAchievement.progress) || 0) / 100;\n  }\n  isUnlocked(achievementId) {\n    const playerAchievement = this.playerAchievements.find(pa => pa.achievementId === achievementId || pa.achievement_id === achievementId);\n    return (playerAchievement === null || playerAchievement === void 0 ? void 0 : playerAchievement.completed) || false;\n  }\n  getUnlockedAchievements() {\n    return this.playerAchievements.filter(pa => pa.completed).map(playerAch => {\n      const achievementId = playerAch.achievementId || playerAch.achievement_id;\n      const fullAchievement = this.allAchievements.find(all => all.id === achievementId);\n      return fullAchievement ? {\n        ...fullAchievement,\n        unlockedAt: playerAch.unlockedAt || playerAch.updatedAt\n      } : null;\n    }).filter(Boolean);\n  }\n  getLockedAchievements() {\n    return this.allAchievements.filter(a => !this.isUnlocked(a.id));\n  }\n  getInProgressAchievements() {\n    return this.playerAchievements.filter(pa => !pa.completed && (pa.progress > 0 || pa.currentProgress > 0)).map(playerAch => {\n      const achievementId = playerAch.achievementId || playerAch.achievement_id;\n      const fullAchievement = this.allAchievements.find(all => all.id === achievementId);\n      return fullAchievement ? {\n        ...fullAchievement,\n        progress: playerAch.progress || 0,\n        // FIXED: playerAch instead of pa\n        currentProgress: playerAch.currentProgress || 0,\n        // FIXED: playerAch instead of pa\n        targetValue: fullAchievement.targetValue\n      } : null;\n    }).filter(Boolean);\n  }\n  getStats() {\n    const unlocked = this.getUnlockedAchievements();\n    const total = this.allAchievements.length;\n    return {\n      total,\n      unlocked: unlocked.length,\n      percentage: total > 0 ? Math.round(unlocked.length / total * 100) : 0,\n      totalXP: this.playerStats.totalXp || 0,\n      byTier: {\n        common: unlocked.filter(a => a.tier === 'common').length,\n        uncommon: unlocked.filter(a => a.tier === 'uncommon').length,\n        rare: unlocked.filter(a => a.tier === 'rare').length,\n        legendary: unlocked.filter(a => a.tier === 'legendary').length\n      }\n    };\n  }\n}\nexport default new BackendAchievementService();","map":{"version":3,"names":["apiService","BackendAchievementService","constructor","allAchievements","playerAchievements","playerStats","loaded","loadData","username","achievements","stats","Promise","all","getAllAchievements","getPlayerAchievements","getAchievementPlayerStats","console","log","slice","length","firstPlayerAch","Object","keys","playerProgress","error","getAchievementProgress","achievementId","userStats","playerAchievement","find","pa","completed","progress","isUnlocked","achievement_id","getUnlockedAchievements","filter","map","playerAch","fullAchievement","id","unlockedAt","updatedAt","Boolean","getLockedAchievements","a","getInProgressAchievements","currentProgress","targetValue","getStats","unlocked","total","percentage","Math","round","totalXP","totalXp","byTier","common","tier","uncommon","rare","legendary"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/services/backendAchievementService.js"],"sourcesContent":["import apiService from './api';\n\nclass BackendAchievementService {\n  constructor() {\n    this.allAchievements = [];\n    this.playerAchievements = [];\n    this.playerStats = {};\n    this.loaded = false;\n  }\n\n  async loadData(username = 'Jroc_182') {  // Changed from 'testuser' to 'Jroc_182'\n    try {\n      const [achievements, playerAchievements, stats] = await Promise.all([\n        apiService.getAllAchievements(),\n        apiService.getPlayerAchievements(username),\n        apiService.getAchievementPlayerStats(username)\n      ]);\n\n      // DEBUG: Log the actual data structure with more detail\n      console.log('🔍 DEBUG - Raw backend data for', username + ':');\n      console.log('First 2 achievements:', achievements.slice(0, 2));\n      console.log('First 5 player achievements:', playerAchievements.slice(0, 5));\n      console.log('Stats object:', stats);\n\n      // Show specific fields we're looking for\n      if (playerAchievements.length > 0) {\n        const firstPlayerAch = playerAchievements[0];\n        console.log('🔍 PlayerAchievement fields:', Object.keys(firstPlayerAch));\n        console.log('🔍 Sample PlayerAchievement:', firstPlayerAch);\n      }\n\n      this.allAchievements = achievements;\n      this.playerAchievements = playerAchievements;\n      this.playerStats = stats;\n      this.loaded = true;\n\n      console.log('✅ Backend achievement data loaded for', username + ':', {\n        achievements: achievements.length,\n        playerProgress: playerAchievements.length,\n        stats\n      });\n\n      return { achievements, playerAchievements, stats };\n    } catch (error) {\n      console.error('❌ Failed to load backend achievements:', error);\n      throw error;\n    }\n  }\n\n  getAchievementProgress(achievementId, userStats) {\n    const playerAchievement = this.playerAchievements.find(pa => pa.achievementId === achievementId);\n    if (playerAchievement?.completed) return 1;\n    \n    return (playerAchievement?.progress || 0) / 100;\n  }\n\n  isUnlocked(achievementId) {\n    const playerAchievement = this.playerAchievements.find(pa => \n      (pa.achievementId === achievementId || pa.achievement_id === achievementId)\n    );\n    return playerAchievement?.completed || false;\n  }\n\n  getUnlockedAchievements() {\n    return this.playerAchievements\n      .filter(pa => pa.completed)\n      .map(playerAch => {\n        const achievementId = playerAch.achievementId || playerAch.achievement_id;\n        const fullAchievement = this.allAchievements.find(all => all.id === achievementId);\n        return fullAchievement ? {\n          ...fullAchievement,\n          unlockedAt: playerAch.unlockedAt || playerAch.updatedAt\n        } : null;\n      })\n      .filter(Boolean);\n  }\n\n  getLockedAchievements() {\n    return this.allAchievements.filter(a => !this.isUnlocked(a.id));\n  }\n\n  getInProgressAchievements() {\n    return this.playerAchievements\n      .filter(pa => !pa.completed && (pa.progress > 0 || pa.currentProgress > 0))\n      .map(playerAch => {\n        const achievementId = playerAch.achievementId || playerAch.achievement_id;\n        const fullAchievement = this.allAchievements.find(all => all.id === achievementId);\n        return fullAchievement ? { \n          ...fullAchievement, \n          progress: playerAch.progress || 0,  // FIXED: playerAch instead of pa\n          currentProgress: playerAch.currentProgress || 0,  // FIXED: playerAch instead of pa\n          targetValue: fullAchievement.targetValue\n        } : null;\n      })\n      .filter(Boolean);\n  }\n\n  getStats() {\n    const unlocked = this.getUnlockedAchievements();\n    const total = this.allAchievements.length;\n    \n    return {\n      total,\n      unlocked: unlocked.length,\n      percentage: total > 0 ? Math.round((unlocked.length / total) * 100) : 0,\n      totalXP: this.playerStats.totalXp || 0,\n      byTier: {\n        common: unlocked.filter(a => a.tier === 'common').length,\n        uncommon: unlocked.filter(a => a.tier === 'uncommon').length,\n        rare: unlocked.filter(a => a.tier === 'rare').length,\n        legendary: unlocked.filter(a => a.tier === 'legendary').length\n      }\n    };\n  }\n}\n\nexport default new BackendAchievementService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}