{"ast":null,"code":"import _objectSpread from\"/Users/jenn/Projects/Pixel-Pages/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect,useRef}from'react';export const useFocusTimer=username=>{// Timer state\nconst[duration,setDuration]=useState(null);// 25, 90, or custom minutes\nconst[timeRemaining,setTimeRemaining]=useState(0);const[isRunning,setIsRunning]=useState(false);const[isPaused,setIsPaused]=useState(false);const[startTime,setStartTime]=useState(null);const[totalTimeSpent,setTotalTimeSpent]=useState(0);// UI state\nconst[showSavePrompt,setShowSavePrompt]=useState(false);const[sessionData,setSessionData]=useState(null);const intervalRef=useRef(null);// Timer logic\nuseEffect(()=>{if(isRunning&&!isPaused&&timeRemaining>0){intervalRef.current=setInterval(()=>{setTimeRemaining(prev=>{if(prev<=1){// Timer completed naturally\nhandleTimerComplete();return 0;}return prev-1;});},1000);}else{clearInterval(intervalRef.current);}return()=>clearInterval(intervalRef.current);},[isRunning,isPaused,timeRemaining]);// Start timer with duration\nconst startTimer=minutes=>{console.log(\"\\uD83C\\uDFAE Starting \".concat(minutes,\"-minute focus session\"));const seconds=minutes*60;setDuration(minutes);setTimeRemaining(seconds);setStartTime(new Date());setIsRunning(true);setIsPaused(false);setTotalTimeSpent(0);// Create session data for potential saving\nconst sessionId=Date.now();setSessionData({sessionId,ownerUsername:username,startTime:new Date(),duration:minutes});};// Pause timer\nconst pauseTimer=()=>{console.log('⏸️ Timer paused');setIsPaused(true);};// Resume timer\nconst resumeTimer=()=>{console.log('▶️ Timer resumed');setIsPaused(false);};// Stop timer manually\nconst stopTimer=()=>{console.log('🛑 Timer stopped manually');handleTimerStop();};// Handle manual stop\nconst handleTimerStop=()=>{setIsRunning(false);setIsPaused(false);// Calculate time spent\nconst timeSpentMinutes=Math.ceil((duration*60-timeRemaining)/60);if(timeSpentMinutes>0){// Show save prompt for partial time\nconst updatedSessionData=_objectSpread(_objectSpread({},sessionData),{},{endTime:new Date(),timeSpent:timeSpentMinutes,completed:false,notes:\"Session stopped manually after \".concat(timeSpentMinutes,\" minutes\")});setSessionData(updatedSessionData);setTotalTimeSpent(timeSpentMinutes);setShowSavePrompt(true);}else{// No time to save\nresetTimer();}};// Handle natural completion\nconst handleTimerComplete=()=>{console.log('✅ Timer completed naturally');setIsRunning(false);setIsPaused(false);const updatedSessionData=_objectSpread(_objectSpread({},sessionData),{},{endTime:new Date(),timeSpent:duration,completed:true,notes:\"Completed \".concat(duration,\"-minute focus session\")});setSessionData(updatedSessionData);setTotalTimeSpent(duration);setShowSavePrompt(true);};// Save session to tracker - simplified API call\nconst saveSession=async category=>{try{console.log(\"\\uD83D\\uDCBE Saving \".concat(totalTimeSpent,\" minutes to category: \").concat(category));const entryData={sessionId:sessionData.sessionId,ownerUsername:username,timeSpent:totalTimeSpent,date:new Date().toISOString().split('T')[0],startTime:sessionData.startTime.toISOString(),endTime:sessionData.endTime.toISOString(),completed:sessionData.completed,notes:sessionData.notes,category:category,phase:'work',cycleNumber:1,isManualEntry:false};// Direct API call\nconst response=await fetch('http://localhost:8080/api/focus/entries',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(entryData)});if(!response.ok){throw new Error('Failed to save entry');}console.log('✅ Session saved successfully');// Show success message\nalert(\"\\uD83C\\uDFAE +\".concat(totalTimeSpent,\" XP added to \").concat(category,\"!\"));resetTimer();}catch(error){console.error('❌ Error saving session:',error);alert('Failed to save session. Please try again.');}};// Discard session\nconst discardSession=()=>{console.log('🗑️ Session discarded');resetTimer();};// Reset timer state\nconst resetTimer=()=>{setDuration(null);setTimeRemaining(0);setIsRunning(false);setIsPaused(false);setStartTime(null);setTotalTimeSpent(0);setSessionData(null);setShowSavePrompt(false);clearInterval(intervalRef.current);};// Format time display\nconst formatTime=()=>{const minutes=Math.floor(timeRemaining/60);const seconds=timeRemaining%60;return\"\".concat(minutes.toString().padStart(2,'0'),\":\").concat(seconds.toString().padStart(2,'0'));};// Calculate progress percentage\nconst progress=duration&&timeRemaining>=0?(duration*60-timeRemaining)/(duration*60)*100:0;// Check if timer is active (running or paused)\nconst isActive=duration!==null;return{// Timer state\nduration,timeRemaining,isRunning,isPaused,isActive,totalTimeSpent,progress,// UI state\nshowSavePrompt,sessionData,// Actions\nstartTimer,pauseTimer,resumeTimer,stopTimer,saveSession,discardSession,resetTimer,formatTime,// Cleanup\nsetShowSavePrompt};};","map":{"version":3,"names":["useState","useEffect","useRef","useFocusTimer","username","duration","setDuration","timeRemaining","setTimeRemaining","isRunning","setIsRunning","isPaused","setIsPaused","startTime","setStartTime","totalTimeSpent","setTotalTimeSpent","showSavePrompt","setShowSavePrompt","sessionData","setSessionData","intervalRef","current","setInterval","prev","handleTimerComplete","clearInterval","startTimer","minutes","console","log","concat","seconds","Date","sessionId","now","ownerUsername","pauseTimer","resumeTimer","stopTimer","handleTimerStop","timeSpentMinutes","Math","ceil","updatedSessionData","_objectSpread","endTime","timeSpent","completed","notes","resetTimer","saveSession","category","entryData","date","toISOString","split","phase","cycleNumber","isManualEntry","response","fetch","method","headers","body","JSON","stringify","ok","Error","alert","error","discardSession","formatTime","floor","toString","padStart","progress","isActive"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/useFocusTimer.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nexport const useFocusTimer = (username) => {\n  // Timer state\n  const [duration, setDuration] = useState(null); // 25, 90, or custom minutes\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [totalTimeSpent, setTotalTimeSpent] = useState(0);\n  \n  // UI state\n  const [showSavePrompt, setShowSavePrompt] = useState(false);\n  const [sessionData, setSessionData] = useState(null);\n  \n  const intervalRef = useRef(null);\n\n  // Timer logic\n  useEffect(() => {\n    if (isRunning && !isPaused && timeRemaining > 0) {\n      intervalRef.current = setInterval(() => {\n        setTimeRemaining(prev => {\n          if (prev <= 1) {\n            // Timer completed naturally\n            handleTimerComplete();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else {\n      clearInterval(intervalRef.current);\n    }\n\n    return () => clearInterval(intervalRef.current);\n  }, [isRunning, isPaused, timeRemaining]);\n\n  // Start timer with duration\n  const startTimer = (minutes) => {\n    console.log(`🎮 Starting ${minutes}-minute focus session`);\n    \n    const seconds = minutes * 60;\n    setDuration(minutes);\n    setTimeRemaining(seconds);\n    setStartTime(new Date());\n    setIsRunning(true);\n    setIsPaused(false);\n    setTotalTimeSpent(0);\n    \n    // Create session data for potential saving\n    const sessionId = Date.now();\n    setSessionData({\n      sessionId,\n      ownerUsername: username,\n      startTime: new Date(),\n      duration: minutes\n    });\n  };\n\n  // Pause timer\n  const pauseTimer = () => {\n    console.log('⏸️ Timer paused');\n    setIsPaused(true);\n  };\n\n  // Resume timer\n  const resumeTimer = () => {\n    console.log('▶️ Timer resumed');\n    setIsPaused(false);\n  };\n\n  // Stop timer manually\n  const stopTimer = () => {\n    console.log('🛑 Timer stopped manually');\n    handleTimerStop();\n  };\n\n  // Handle manual stop\n  const handleTimerStop = () => {\n    setIsRunning(false);\n    setIsPaused(false);\n    \n    // Calculate time spent\n    const timeSpentMinutes = Math.ceil((duration * 60 - timeRemaining) / 60);\n    \n    if (timeSpentMinutes > 0) {\n      // Show save prompt for partial time\n      const updatedSessionData = {\n        ...sessionData,\n        endTime: new Date(),\n        timeSpent: timeSpentMinutes,\n        completed: false,\n        notes: `Session stopped manually after ${timeSpentMinutes} minutes`\n      };\n      \n      setSessionData(updatedSessionData);\n      setTotalTimeSpent(timeSpentMinutes);\n      setShowSavePrompt(true);\n    } else {\n      // No time to save\n      resetTimer();\n    }\n  };\n\n  // Handle natural completion\n  const handleTimerComplete = () => {\n    console.log('✅ Timer completed naturally');\n    setIsRunning(false);\n    setIsPaused(false);\n    \n    const updatedSessionData = {\n      ...sessionData,\n      endTime: new Date(),\n      timeSpent: duration,\n      completed: true,\n      notes: `Completed ${duration}-minute focus session`\n    };\n    \n    setSessionData(updatedSessionData);\n    setTotalTimeSpent(duration);\n    setShowSavePrompt(true);\n  };\n\n  // Save session to tracker - simplified API call\n  const saveSession = async (category) => {\n    try {\n      console.log(`💾 Saving ${totalTimeSpent} minutes to category: ${category}`);\n      \n      const entryData = {\n        sessionId: sessionData.sessionId,\n        ownerUsername: username,\n        timeSpent: totalTimeSpent,\n        date: new Date().toISOString().split('T')[0],\n        startTime: sessionData.startTime.toISOString(),\n        endTime: sessionData.endTime.toISOString(),\n        completed: sessionData.completed,\n        notes: sessionData.notes,\n        category: category,\n        phase: 'work',\n        cycleNumber: 1,\n        isManualEntry: false\n      };\n\n      // Direct API call\n      const response = await fetch('http://localhost:8080/api/focus/entries', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(entryData)\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to save entry');\n      }\n\n      console.log('✅ Session saved successfully');\n      \n      // Show success message\n      alert(`🎮 +${totalTimeSpent} XP added to ${category}!`);\n      \n      resetTimer();\n      \n    } catch (error) {\n      console.error('❌ Error saving session:', error);\n      alert('Failed to save session. Please try again.');\n    }\n  };\n\n  // Discard session\n  const discardSession = () => {\n    console.log('🗑️ Session discarded');\n    resetTimer();\n  };\n\n  // Reset timer state\n  const resetTimer = () => {\n    setDuration(null);\n    setTimeRemaining(0);\n    setIsRunning(false);\n    setIsPaused(false);\n    setStartTime(null);\n    setTotalTimeSpent(0);\n    setSessionData(null);\n    setShowSavePrompt(false);\n    clearInterval(intervalRef.current);\n  };\n\n  // Format time display\n  const formatTime = () => {\n    const minutes = Math.floor(timeRemaining / 60);\n    const seconds = timeRemaining % 60;\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  // Calculate progress percentage\n  const progress = duration && timeRemaining >= 0 ? \n    ((duration * 60 - timeRemaining) / (duration * 60)) * 100 : 0;\n\n  // Check if timer is active (running or paused)\n  const isActive = duration !== null;\n\n  return {\n    // Timer state\n    duration,\n    timeRemaining,\n    isRunning,\n    isPaused,\n    isActive,\n    totalTimeSpent,\n    progress,\n    \n    // UI state\n    showSavePrompt,\n    sessionData,\n    \n    // Actions\n    startTimer,\n    pauseTimer,\n    resumeTimer,\n    stopTimer,\n    saveSession,\n    discardSession,\n    resetTimer,\n    formatTime,\n    \n    // Cleanup\n    setShowSavePrompt\n  };\n};"],"mappings":"8HAAA,OAASA,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAEnD,MAAO,MAAM,CAAAC,aAAa,CAAIC,QAAQ,EAAK,CACzC;AACA,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGN,QAAQ,CAAC,IAAI,CAAC,CAAE;AAChD,KAAM,CAACO,aAAa,CAAEC,gBAAgB,CAAC,CAAGR,QAAQ,CAAC,CAAC,CAAC,CACrD,KAAM,CAACS,SAAS,CAAEC,YAAY,CAAC,CAAGV,QAAQ,CAAC,KAAK,CAAC,CACjD,KAAM,CAACW,QAAQ,CAAEC,WAAW,CAAC,CAAGZ,QAAQ,CAAC,KAAK,CAAC,CAC/C,KAAM,CAACa,SAAS,CAAEC,YAAY,CAAC,CAAGd,QAAQ,CAAC,IAAI,CAAC,CAChD,KAAM,CAACe,cAAc,CAAEC,iBAAiB,CAAC,CAAGhB,QAAQ,CAAC,CAAC,CAAC,CAEvD;AACA,KAAM,CAACiB,cAAc,CAAEC,iBAAiB,CAAC,CAAGlB,QAAQ,CAAC,KAAK,CAAC,CAC3D,KAAM,CAACmB,WAAW,CAAEC,cAAc,CAAC,CAAGpB,QAAQ,CAAC,IAAI,CAAC,CAEpD,KAAM,CAAAqB,WAAW,CAAGnB,MAAM,CAAC,IAAI,CAAC,CAEhC;AACAD,SAAS,CAAC,IAAM,CACd,GAAIQ,SAAS,EAAI,CAACE,QAAQ,EAAIJ,aAAa,CAAG,CAAC,CAAE,CAC/Cc,WAAW,CAACC,OAAO,CAAGC,WAAW,CAAC,IAAM,CACtCf,gBAAgB,CAACgB,IAAI,EAAI,CACvB,GAAIA,IAAI,EAAI,CAAC,CAAE,CACb;AACAC,mBAAmB,CAAC,CAAC,CACrB,MAAO,EAAC,CACV,CACA,MAAO,CAAAD,IAAI,CAAG,CAAC,CACjB,CAAC,CAAC,CACJ,CAAC,CAAE,IAAI,CAAC,CACV,CAAC,IAAM,CACLE,aAAa,CAACL,WAAW,CAACC,OAAO,CAAC,CACpC,CAEA,MAAO,IAAMI,aAAa,CAACL,WAAW,CAACC,OAAO,CAAC,CACjD,CAAC,CAAE,CAACb,SAAS,CAAEE,QAAQ,CAAEJ,aAAa,CAAC,CAAC,CAExC;AACA,KAAM,CAAAoB,UAAU,CAAIC,OAAO,EAAK,CAC9BC,OAAO,CAACC,GAAG,0BAAAC,MAAA,CAAgBH,OAAO,yBAAuB,CAAC,CAE1D,KAAM,CAAAI,OAAO,CAAGJ,OAAO,CAAG,EAAE,CAC5BtB,WAAW,CAACsB,OAAO,CAAC,CACpBpB,gBAAgB,CAACwB,OAAO,CAAC,CACzBlB,YAAY,CAAC,GAAI,CAAAmB,IAAI,CAAC,CAAC,CAAC,CACxBvB,YAAY,CAAC,IAAI,CAAC,CAClBE,WAAW,CAAC,KAAK,CAAC,CAClBI,iBAAiB,CAAC,CAAC,CAAC,CAEpB;AACA,KAAM,CAAAkB,SAAS,CAAGD,IAAI,CAACE,GAAG,CAAC,CAAC,CAC5Bf,cAAc,CAAC,CACbc,SAAS,CACTE,aAAa,CAAEhC,QAAQ,CACvBS,SAAS,CAAE,GAAI,CAAAoB,IAAI,CAAC,CAAC,CACrB5B,QAAQ,CAAEuB,OACZ,CAAC,CAAC,CACJ,CAAC,CAED;AACA,KAAM,CAAAS,UAAU,CAAGA,CAAA,GAAM,CACvBR,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC,CAC9BlB,WAAW,CAAC,IAAI,CAAC,CACnB,CAAC,CAED;AACA,KAAM,CAAA0B,WAAW,CAAGA,CAAA,GAAM,CACxBT,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC,CAC/BlB,WAAW,CAAC,KAAK,CAAC,CACpB,CAAC,CAED;AACA,KAAM,CAAA2B,SAAS,CAAGA,CAAA,GAAM,CACtBV,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC,CACxCU,eAAe,CAAC,CAAC,CACnB,CAAC,CAED;AACA,KAAM,CAAAA,eAAe,CAAGA,CAAA,GAAM,CAC5B9B,YAAY,CAAC,KAAK,CAAC,CACnBE,WAAW,CAAC,KAAK,CAAC,CAElB;AACA,KAAM,CAAA6B,gBAAgB,CAAGC,IAAI,CAACC,IAAI,CAAC,CAACtC,QAAQ,CAAG,EAAE,CAAGE,aAAa,EAAI,EAAE,CAAC,CAExE,GAAIkC,gBAAgB,CAAG,CAAC,CAAE,CACxB;AACA,KAAM,CAAAG,kBAAkB,CAAAC,aAAA,CAAAA,aAAA,IACnB1B,WAAW,MACd2B,OAAO,CAAE,GAAI,CAAAb,IAAI,CAAC,CAAC,CACnBc,SAAS,CAAEN,gBAAgB,CAC3BO,SAAS,CAAE,KAAK,CAChBC,KAAK,mCAAAlB,MAAA,CAAoCU,gBAAgB,YAAU,EACpE,CAEDrB,cAAc,CAACwB,kBAAkB,CAAC,CAClC5B,iBAAiB,CAACyB,gBAAgB,CAAC,CACnCvB,iBAAiB,CAAC,IAAI,CAAC,CACzB,CAAC,IAAM,CACL;AACAgC,UAAU,CAAC,CAAC,CACd,CACF,CAAC,CAED;AACA,KAAM,CAAAzB,mBAAmB,CAAGA,CAAA,GAAM,CAChCI,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC,CAC1CpB,YAAY,CAAC,KAAK,CAAC,CACnBE,WAAW,CAAC,KAAK,CAAC,CAElB,KAAM,CAAAgC,kBAAkB,CAAAC,aAAA,CAAAA,aAAA,IACnB1B,WAAW,MACd2B,OAAO,CAAE,GAAI,CAAAb,IAAI,CAAC,CAAC,CACnBc,SAAS,CAAE1C,QAAQ,CACnB2C,SAAS,CAAE,IAAI,CACfC,KAAK,cAAAlB,MAAA,CAAe1B,QAAQ,yBAAuB,EACpD,CAEDe,cAAc,CAACwB,kBAAkB,CAAC,CAClC5B,iBAAiB,CAACX,QAAQ,CAAC,CAC3Ba,iBAAiB,CAAC,IAAI,CAAC,CACzB,CAAC,CAED;AACA,KAAM,CAAAiC,WAAW,CAAG,KAAO,CAAAC,QAAQ,EAAK,CACtC,GAAI,CACFvB,OAAO,CAACC,GAAG,wBAAAC,MAAA,CAAchB,cAAc,2BAAAgB,MAAA,CAAyBqB,QAAQ,CAAE,CAAC,CAE3E,KAAM,CAAAC,SAAS,CAAG,CAChBnB,SAAS,CAAEf,WAAW,CAACe,SAAS,CAChCE,aAAa,CAAEhC,QAAQ,CACvB2C,SAAS,CAAEhC,cAAc,CACzBuC,IAAI,CAAE,GAAI,CAAArB,IAAI,CAAC,CAAC,CAACsB,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAC5C3C,SAAS,CAAEM,WAAW,CAACN,SAAS,CAAC0C,WAAW,CAAC,CAAC,CAC9CT,OAAO,CAAE3B,WAAW,CAAC2B,OAAO,CAACS,WAAW,CAAC,CAAC,CAC1CP,SAAS,CAAE7B,WAAW,CAAC6B,SAAS,CAChCC,KAAK,CAAE9B,WAAW,CAAC8B,KAAK,CACxBG,QAAQ,CAAEA,QAAQ,CAClBK,KAAK,CAAE,MAAM,CACbC,WAAW,CAAE,CAAC,CACdC,aAAa,CAAE,KACjB,CAAC,CAED;AACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,yCAAyC,CAAE,CACtEC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACb,SAAS,CAChC,CAAC,CAAC,CAEF,GAAI,CAACO,QAAQ,CAACO,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,sBAAsB,CAAC,CACzC,CAEAvC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAE3C;AACAuC,KAAK,kBAAAtC,MAAA,CAAQhB,cAAc,kBAAAgB,MAAA,CAAgBqB,QAAQ,KAAG,CAAC,CAEvDF,UAAU,CAAC,CAAC,CAEd,CAAE,MAAOoB,KAAK,CAAE,CACdzC,OAAO,CAACyC,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/CD,KAAK,CAAC,2CAA2C,CAAC,CACpD,CACF,CAAC,CAED;AACA,KAAM,CAAAE,cAAc,CAAGA,CAAA,GAAM,CAC3B1C,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC,CACpCoB,UAAU,CAAC,CAAC,CACd,CAAC,CAED;AACA,KAAM,CAAAA,UAAU,CAAGA,CAAA,GAAM,CACvB5C,WAAW,CAAC,IAAI,CAAC,CACjBE,gBAAgB,CAAC,CAAC,CAAC,CACnBE,YAAY,CAAC,KAAK,CAAC,CACnBE,WAAW,CAAC,KAAK,CAAC,CAClBE,YAAY,CAAC,IAAI,CAAC,CAClBE,iBAAiB,CAAC,CAAC,CAAC,CACpBI,cAAc,CAAC,IAAI,CAAC,CACpBF,iBAAiB,CAAC,KAAK,CAAC,CACxBQ,aAAa,CAACL,WAAW,CAACC,OAAO,CAAC,CACpC,CAAC,CAED;AACA,KAAM,CAAAkD,UAAU,CAAGA,CAAA,GAAM,CACvB,KAAM,CAAA5C,OAAO,CAAGc,IAAI,CAAC+B,KAAK,CAAClE,aAAa,CAAG,EAAE,CAAC,CAC9C,KAAM,CAAAyB,OAAO,CAAGzB,aAAa,CAAG,EAAE,CAClC,SAAAwB,MAAA,CAAUH,OAAO,CAAC8C,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,MAAA5C,MAAA,CAAIC,OAAO,CAAC0C,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,EACtF,CAAC,CAED;AACA,KAAM,CAAAC,QAAQ,CAAGvE,QAAQ,EAAIE,aAAa,EAAI,CAAC,CAC5C,CAACF,QAAQ,CAAG,EAAE,CAAGE,aAAa,GAAKF,QAAQ,CAAG,EAAE,CAAC,CAAI,GAAG,CAAG,CAAC,CAE/D;AACA,KAAM,CAAAwE,QAAQ,CAAGxE,QAAQ,GAAK,IAAI,CAElC,MAAO,CACL;AACAA,QAAQ,CACRE,aAAa,CACbE,SAAS,CACTE,QAAQ,CACRkE,QAAQ,CACR9D,cAAc,CACd6D,QAAQ,CAER;AACA3D,cAAc,CACdE,WAAW,CAEX;AACAQ,UAAU,CACVU,UAAU,CACVC,WAAW,CACXC,SAAS,CACTY,WAAW,CACXoB,cAAc,CACdrB,UAAU,CACVsB,UAAU,CAEV;AACAtD,iBACF,CAAC,CACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}