{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useTaskLists = () => {\n  _s();\n  const [taskLists, setTaskLists] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const API_BASE = 'http://localhost:8080/api/task-lists';\n\n  // Fetch all task lists\n  const fetchTaskLists = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_BASE}?username=Jroc_182`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch task lists');\n      }\n      const data = await response.json();\n      setTaskLists(data);\n      setError(null);\n    } catch (err) {\n      console.error('Failed to fetch task lists:', err);\n      setError(err.message);\n      // set some mock data here\n      setTaskLists([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Create new task list\n  const createTaskList = async taskListData => {\n    try {\n      const response = await fetch(`${API_BASE}?username=Jroc_182`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(taskListData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create task list');\n      }\n      const newTaskList = await response.json();\n      setTaskLists(prevLists => [...prevLists, newTaskList]);\n      return newTaskList;\n    } catch (err) {\n      console.error('Failed to create task list:', err);\n      throw err;\n    }\n  };\n\n  // Update task list\n  const updateTaskList = async (taskListId, updates) => {\n    try {\n      const response = await fetch(`${API_BASE}/${taskListId}?username=user`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updates)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update task list');\n      }\n      const updatedTaskList = await response.json();\n      setTaskLists(prevLists => prevLists.map(list => list.id === taskListId ? updatedTaskList : list));\n      return updatedTaskList;\n    } catch (err) {\n      console.error('Failed to update task list:', err);\n      throw err;\n    }\n  };\n\n  // Delete task list\n  const deleteTaskList = async taskListId => {\n    try {\n      const response = await fetch(`${API_BASE}/${taskListId}?username=user`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete task list');\n      }\n      setTaskLists(prevLists => prevLists.filter(list => list.id !== taskListId));\n    } catch (err) {\n      console.error('Failed to delete task list:', err);\n      throw err;\n    }\n  };\n\n  // Get task list by ID\n  const getTaskListById = taskListId => {\n    return taskLists.find(list => list.id === taskListId);\n  };\n\n  // Fetch data on mount\n  useEffect(() => {\n    fetchTaskLists();\n  }, []);\n  return {\n    taskLists,\n    loading,\n    error,\n    createTaskList,\n    updateTaskList,\n    deleteTaskList,\n    getTaskListById,\n    fetchTaskLists,\n    refetch: fetchTaskLists\n  };\n};\n_s(useTaskLists, \"R8mW6h9iPfb3JPjZ0J5vMefeRyE=\");\nexport default useTaskLists;","map":{"version":3,"names":["useState","useEffect","useTaskLists","_s","taskLists","setTaskLists","loading","setLoading","error","setError","API_BASE","fetchTaskLists","response","fetch","ok","Error","data","json","err","console","message","createTaskList","taskListData","method","headers","body","JSON","stringify","newTaskList","prevLists","updateTaskList","taskListId","updates","updatedTaskList","map","list","id","deleteTaskList","filter","getTaskListById","find","refetch"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/useTaskLists.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useTaskLists = () => {\n  const [taskLists, setTaskLists] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const API_BASE = 'http://localhost:8080/api/task-lists';\n\n  // Fetch all task lists\n  const fetchTaskLists = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_BASE}?username=Jroc_182`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch task lists');\n      }\n      \n      const data = await response.json();\n      setTaskLists(data);\n      setError(null);\n    } catch (err) {\n      console.error('Failed to fetch task lists:', err);\n      setError(err.message);\n      // set some mock data here\n      setTaskLists([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Create new task list\n  const createTaskList = async (taskListData) => {\n    try {\n      const response = await fetch(`${API_BASE}?username=Jroc_182`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(taskListData),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create task list');\n      }\n\n      const newTaskList = await response.json();\n      setTaskLists(prevLists => [...prevLists, newTaskList]);\n      return newTaskList;\n    } catch (err) {\n      console.error('Failed to create task list:', err);\n      throw err;\n    }\n  };\n\n  // Update task list\n  const updateTaskList = async (taskListId, updates) => {\n    try {\n      const response = await fetch(`${API_BASE}/${taskListId}?username=user`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updates),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update task list');\n      }\n\n      const updatedTaskList = await response.json();\n      setTaskLists(prevLists =>\n        prevLists.map(list =>\n          list.id === taskListId ? updatedTaskList : list\n        )\n      );\n      return updatedTaskList;\n    } catch (err) {\n      console.error('Failed to update task list:', err);\n      throw err;\n    }\n  };\n\n  // Delete task list\n  const deleteTaskList = async (taskListId) => {\n    try {\n      const response = await fetch(`${API_BASE}/${taskListId}?username=user`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to delete task list');\n      }\n\n      setTaskLists(prevLists => prevLists.filter(list => list.id !== taskListId));\n    } catch (err) {\n      console.error('Failed to delete task list:', err);\n      throw err;\n    }\n  };\n\n  // Get task list by ID\n  const getTaskListById = (taskListId) => {\n    return taskLists.find(list => list.id === taskListId);\n  };\n\n  // Fetch data on mount\n  useEffect(() => {\n    fetchTaskLists();\n  }, []);\n\n  return {\n    taskLists,\n    loading,\n    error,\n    createTaskList,\n    updateTaskList,\n    deleteTaskList,\n    getTaskListById,\n    fetchTaskLists,\n    refetch: fetchTaskLists\n  };\n};\n\nexport default useTaskLists;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}