{"ast":null,"code":"import _objectSpread from\"/Users/jenn/Projects/Pixel-Pages/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import apiService from'./api';class BackendAchievementService{constructor(){this.allAchievements=[];this.playerAchievements=[];this.playerStats={};this.loaded=false;}async loadData(){let username=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'user';// Changed from 'testuser' to 'Jroc_182'\ntry{const[achievements,playerAchievements,stats]=await Promise.all([apiService.getAllAchievements(),apiService.getPlayerAchievements(username),apiService.getAchievementPlayerStats(username)]);this.allAchievements=achievements;this.playerAchievements=playerAchievements;this.playerStats=stats;this.loaded=true;console.log('✅ Backend achievement data loaded for',username);return{achievements,playerAchievements,stats};}catch(error){console.error('❌ Failed to load backend achievements:',error);throw error;}}isUnlocked(achievementId){const playerAchievement=this.playerAchievements.find(pa=>pa.achievementId===achievementId||pa.id===achievementId);return(playerAchievement===null||playerAchievement===void 0?void 0:playerAchievement.completed)===true;}getAchievementProgress(achievementId,userStats){const playerAchievement=this.playerAchievements.find(pa=>pa.achievementId===achievementId||pa.id===achievementId// ✅ Check both fields\n);if(playerAchievement!==null&&playerAchievement!==void 0&&playerAchievement.completed){return 1;}// For in-progress achievements, use the progress percentage\nif(playerAchievement!==null&&playerAchievement!==void 0&&playerAchievement.progressPercentage){return playerAchievement.progressPercentage/100;}// Fallback calculation\nconst progressValue=(playerAchievement===null||playerAchievement===void 0?void 0:playerAchievement.progress)||0;const maxProgress=(playerAchievement===null||playerAchievement===void 0?void 0:playerAchievement.maxProgress)||100;return maxProgress>0?progressValue/maxProgress:0;}getUnlockedAchievements(){return this.playerAchievements.filter(pa=>pa.completed)// These are already the full achievement objects\n.map(playerAch=>_objectSpread(_objectSpread({},playerAch),{},{unlockedAt:playerAch.unlockedAt}));}getLockedAchievements(){return this.allAchievements.filter(a=>!this.isUnlocked(a.id));}getInProgressAchievements(){console.log('🔍 DEBUG: Checking for in-progress achievements...');const filtered=this.playerAchievements.filter(achievement=>{const isNotCompleted=!achievement.completed;const hasProgress=(achievement.progressPercentage||0)>0;const isNotFullyComplete=(achievement.progressPercentage||0)<100;console.log(\"\\uD83D\\uDD0D Achievement \".concat(achievement.name,\":\"),{completed:achievement.completed,progressPercentage:achievement.progressPercentage,isNotCompleted,hasProgress,isNotFullyComplete,willInclude:isNotCompleted&&hasProgress&&isNotFullyComplete});return isNotCompleted&&hasProgress&&isNotFullyComplete;});console.log('🔍 Filtered in-progress achievements:',filtered.length);return filtered.map(playerAch=>_objectSpread(_objectSpread({},playerAch),{},{progress:playerAch.progressPercentage||0,currentProgress:playerAch.progress||0,targetProgress:playerAch.maxProgress||100,progressPercentage:playerAch.progressPercentage||0}));}getStats(){const unlocked=this.getUnlockedAchievements();const total=this.allAchievements.length;return{total,unlocked:unlocked.length,percentage:total>0?Math.round(unlocked.length/total*100):0,totalXP:this.playerStats.totalXp||0,byTier:{common:unlocked.filter(a=>a.tier==='common').length,uncommon:unlocked.filter(a=>a.tier==='uncommon').length,rare:unlocked.filter(a=>a.tier==='rare').length,legendary:unlocked.filter(a=>a.tier==='legendary').length}};}}export default new BackendAchievementService();","map":{"version":3,"names":["apiService","BackendAchievementService","constructor","allAchievements","playerAchievements","playerStats","loaded","loadData","username","arguments","length","undefined","achievements","stats","Promise","all","getAllAchievements","getPlayerAchievements","getAchievementPlayerStats","console","log","error","isUnlocked","achievementId","playerAchievement","find","pa","id","completed","getAchievementProgress","userStats","progressPercentage","progressValue","progress","maxProgress","getUnlockedAchievements","filter","map","playerAch","_objectSpread","unlockedAt","getLockedAchievements","a","getInProgressAchievements","filtered","achievement","isNotCompleted","hasProgress","isNotFullyComplete","concat","name","willInclude","currentProgress","targetProgress","getStats","unlocked","total","percentage","Math","round","totalXP","totalXp","byTier","common","tier","uncommon","rare","legendary"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/services/backendAchievementService.js"],"sourcesContent":["import apiService from './api';\n\nclass BackendAchievementService {\n  constructor() {\n    this.allAchievements = [];\n    this.playerAchievements = [];\n    this.playerStats = {};\n    this.loaded = false;\n  }\n\n  async loadData(username = 'user') {  // Changed from 'testuser' to 'Jroc_182'\n    try {\n      const [achievements, playerAchievements, stats] = await Promise.all([\n        apiService.getAllAchievements(),\n        apiService.getPlayerAchievements(username),\n        apiService.getAchievementPlayerStats(username)\n      ]);\n\n      this.allAchievements = achievements;\n      this.playerAchievements = playerAchievements;\n      this.playerStats = stats;\n      this.loaded = true;\n\n      console.log('✅ Backend achievement data loaded for', username);\n\n      return { achievements, playerAchievements, stats };\n    } catch (error) {\n      console.error('❌ Failed to load backend achievements:', error);\n      throw error;\n    }\n  }\n\nisUnlocked(achievementId) {\n  const playerAchievement = this.playerAchievements.find(pa => \n    pa.achievementId === achievementId || pa.id === achievementId \n  );\n  return playerAchievement?.completed === true;\n}\n\ngetAchievementProgress(achievementId, userStats) {\n  const playerAchievement = this.playerAchievements.find(pa => \n    pa.achievementId === achievementId || pa.id === achievementId  // ✅ Check both fields\n  ); \n  \n  if (playerAchievement?.completed) {\n    return 1; \n  }\n  \n  // For in-progress achievements, use the progress percentage\n  if (playerAchievement?.progressPercentage) {\n    return playerAchievement.progressPercentage / 100;\n  }\n  \n  // Fallback calculation\n  const progressValue = playerAchievement?.progress || 0;\n  const maxProgress = playerAchievement?.maxProgress || 100;\n  return maxProgress > 0 ? progressValue / maxProgress : 0;\n}\n\n  getUnlockedAchievements() {\n    return this.playerAchievements\n      .filter(pa => pa.completed)  // These are already the full achievement objects\n      .map(playerAch => ({\n        ...playerAch,\n        unlockedAt: playerAch.unlockedAt\n      }));\n  }\n\n  getLockedAchievements() {\n    return this.allAchievements.filter(a => !this.isUnlocked(a.id));\n  }\n\n  getInProgressAchievements() {\n    console.log('🔍 DEBUG: Checking for in-progress achievements...');\n    \n    const filtered = this.playerAchievements.filter(achievement => {\n      const isNotCompleted = !achievement.completed;\n      const hasProgress = (achievement.progressPercentage || 0) > 0;\n      const isNotFullyComplete = (achievement.progressPercentage || 0) < 100;\n      \n      console.log(`🔍 Achievement ${achievement.name}:`, {\n        completed: achievement.completed,\n        progressPercentage: achievement.progressPercentage,\n        isNotCompleted,\n        hasProgress,\n        isNotFullyComplete,\n        willInclude: isNotCompleted && hasProgress && isNotFullyComplete\n      });\n      \n      return isNotCompleted && hasProgress && isNotFullyComplete;\n    });\n    \n    console.log('🔍 Filtered in-progress achievements:', filtered.length);\n    \n    return filtered.map(playerAch => ({\n      ...playerAch,\n      progress: playerAch.progressPercentage || 0,\n      currentProgress: playerAch.progress || 0,\n      targetProgress: playerAch.maxProgress || 100,\n      progressPercentage: playerAch.progressPercentage || 0\n    }));\n  }\n\n  getStats() {\n    const unlocked = this.getUnlockedAchievements();\n    const total = this.allAchievements.length;\n    \n    return {\n      total,\n      unlocked: unlocked.length,\n      percentage: total > 0 ? Math.round((unlocked.length / total) * 100) : 0,\n      totalXP: this.playerStats.totalXp || 0,\n      byTier: {\n        common: unlocked.filter(a => a.tier === 'common').length,\n        uncommon: unlocked.filter(a => a.tier === 'uncommon').length,\n        rare: unlocked.filter(a => a.tier === 'rare').length,\n        legendary: unlocked.filter(a => a.tier === 'legendary').length\n      }\n    };\n  }\n}\n\nexport default new BackendAchievementService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}