{"ast":null,"code":"// src/services/api.js\nconst API_BASE = 'http://localhost:8080/api';\nconst apiService = {\n  // Notes API calls\n  async fetchNotes() {\n    const response = await fetch(`${API_BASE}/notes`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  async createNote(noteData) {\n    const response = await fetch(`${API_BASE}/notes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(noteData)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  async updateNote(id, noteData) {\n    const response = await fetch(`${API_BASE}/notes/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(noteData)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  async deleteNote(id) {\n    const response = await fetch(`${API_BASE}/notes/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return true;\n  },\n  async searchNotes(query) {\n    const response = await fetch(`${API_BASE}/notes/search?query=${encodeURIComponent(query)}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  // Player API calls\n  async getPlayerStats(username) {\n    const response = await fetch(`${API_BASE}/players/${username}`);\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    return response.json();\n  },\n  async getTasks(username) {\n    const response = await fetch(`${API_BASE}/tasks?username=${username}`);\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    return response.json();\n  },\n  async getTaskLists(username) {\n    const response = await fetch(`${API_BASE}/task-lists?username=${username}`);\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    return response.json();\n  }\n\n  // Add other API methods as needed...\n};\nexport default apiService;","map":{"version":3,"names":["API_BASE","apiService","fetchNotes","response","fetch","ok","Error","status","json","createNote","noteData","method","headers","body","JSON","stringify","updateNote","id","deleteNote","searchNotes","query","encodeURIComponent","getPlayerStats","username","statusText","getTasks","getTaskLists"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\nconst API_BASE = 'http://localhost:8080/api';\n\nconst apiService = {\n  // Notes API calls\n  async fetchNotes() {\n    const response = await fetch(`${API_BASE}/notes`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  async createNote(noteData) {\n    const response = await fetch(`${API_BASE}/notes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(noteData),\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  async updateNote(id, noteData) {\n    const response = await fetch(`${API_BASE}/notes/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(noteData),\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  async deleteNote(id) {\n    const response = await fetch(`${API_BASE}/notes/${id}`, {\n      method: 'DELETE',\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return true;\n  },\n\n  async searchNotes(query) {\n    const response = await fetch(\n      `${API_BASE}/notes/search?query=${encodeURIComponent(query)}`\n    );\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n\n  // Player API calls\n  async getPlayerStats(username) {\n    const response = await fetch(`${API_BASE}/players/${username}`);\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    return response.json();\n  },\n\n  async getTasks(username) {\n    const response = await fetch(`${API_BASE}/tasks?username=${username}`);\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    return response.json();\n  },\n\n  async getTaskLists(username) {\n    const response = await fetch(\n      `${API_BASE}/task-lists?username=${username}`\n    );\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    return response.json();\n  },\n\n  // Add other API methods as needed...\n};\n\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}