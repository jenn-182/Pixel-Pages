{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport apiService from '../services/api';\nexport const useFocusTracker = username => {\n  _s();\n  const [trackerData, setTrackerData] = useState(null);\n  const [analytics, setAnalytics] = useState(null);\n  const [streaks, setStreaks] = useState({\n    currentStreak: 0,\n    bestStreak: 0\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Load today's tracker data\n  const loadTodayTracker = useCallback(async () => {\n    if (!username) return;\n    setLoading(true);\n    setError(null);\n    try {\n      const today = new Date().toISOString().split('T')[0];\n      const data = await apiService.getDailyFocusTracker(username, today);\n      setTrackerData(data);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error loading today tracker:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [username]);\n\n  // Load analytics for a period\n  const loadAnalytics = useCallback(async (period = 'week') => {\n    if (!username) return;\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await apiService.getFocusAnalytics(username, period);\n      setAnalytics(data);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error loading analytics:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [username]);\n\n  // Load streak data\n  const loadStreaks = useCallback(async () => {\n    if (!username) return;\n    try {\n      const data = await apiService.getFocusStreaks(username);\n      setStreaks(data);\n    } catch (err) {\n      console.error('Error loading streaks:', err);\n    }\n  }, [username]);\n\n  // Load dashboard data (combines multiple data sources)\n  const loadDashboard = useCallback(async () => {\n    if (!username) return;\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await apiService.getFocusDashboard(username);\n      setTrackerData(data.today);\n      setAnalytics(data.weekAnalytics);\n      setStreaks({\n        currentStreak: data.currentStreak,\n        bestStreak: data.bestStreak\n      });\n    } catch (err) {\n      setError(err.message);\n      console.error('Error loading dashboard:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [username]);\n\n  // Generate daily stats\n  const generateDailyStats = useCallback(async (date = null) => {\n    if (!username) return;\n    try {\n      const data = await apiService.generateDailyFocusStats(username, date);\n      if (!date || date === new Date().toISOString().split('T')[0]) {\n        setTrackerData(data);\n      }\n      return data;\n    } catch (err) {\n      console.error('Error generating daily stats:', err);\n      throw err;\n    }\n  }, [username]);\n\n  // Update daily goal\n  const updateDailyGoal = useCallback(async (date, goalMet) => {\n    if (!username) return;\n    try {\n      await apiService.updateDailyGoal(username, date, goalMet);\n      // Refresh today's data if updating today\n      if (date === new Date().toISOString().split('T')[0]) {\n        await loadTodayTracker();\n      }\n    } catch (err) {\n      console.error('Error updating daily goal:', err);\n      throw err;\n    }\n  }, [username, loadTodayTracker]);\n\n  // Get tracker range\n  const getTrackerRange = useCallback(async (startDate, endDate) => {\n    if (!username) return [];\n    try {\n      return await apiService.getFocusTrackerRange(username, startDate, endDate);\n    } catch (err) {\n      console.error('Error getting tracker range:', err);\n      return [];\n    }\n  }, [username]);\n\n  // Get recent tracker data\n  const getRecentTracker = useCallback(async (days = 7) => {\n    if (!username) return [];\n    try {\n      return await apiService.getRecentFocusTracker(username, days);\n    } catch (err) {\n      console.error('Error getting recent tracker:', err);\n      return [];\n    }\n  }, [username]);\n\n  // Auto-refresh today's stats when focus entries are created\n  const refreshTodayStats = useCallback(() => {\n    generateDailyStats();\n  }, [generateDailyStats]);\n\n  // Load initial data\n  useEffect(() => {\n    if (username) {\n      loadDashboard();\n    }\n  }, [username, loadDashboard]);\n  return {\n    trackerData,\n    analytics,\n    streaks,\n    loading,\n    error,\n    loadTodayTracker,\n    loadAnalytics,\n    loadStreaks,\n    loadDashboard,\n    generateDailyStats,\n    updateDailyGoal,\n    getTrackerRange,\n    getRecentTracker,\n    refreshTodayStats\n  };\n};\n_s(useFocusTracker, \"jOHG9DGNr8g/UV7hdxEZ32pHwnw=\");","map":{"version":3,"names":["useState","useEffect","useCallback","apiService","useFocusTracker","username","_s","trackerData","setTrackerData","analytics","setAnalytics","streaks","setStreaks","currentStreak","bestStreak","loading","setLoading","error","setError","loadTodayTracker","today","Date","toISOString","split","data","getDailyFocusTracker","err","message","console","loadAnalytics","period","getFocusAnalytics","loadStreaks","getFocusStreaks","loadDashboard","getFocusDashboard","weekAnalytics","generateDailyStats","date","generateDailyFocusStats","updateDailyGoal","goalMet","getTrackerRange","startDate","endDate","getFocusTrackerRange","getRecentTracker","days","getRecentFocusTracker","refreshTodayStats"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/useFocusTracker.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport apiService from '../services/api';\n\nexport const useFocusTracker = (username) => {\n  const [trackerData, setTrackerData] = useState(null);\n  const [analytics, setAnalytics] = useState(null);\n  const [streaks, setStreaks] = useState({ currentStreak: 0, bestStreak: 0 });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Load today's tracker data\n  const loadTodayTracker = useCallback(async () => {\n    if (!username) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const today = new Date().toISOString().split('T')[0];\n      const data = await apiService.getDailyFocusTracker(username, today);\n      setTrackerData(data);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error loading today tracker:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [username]);\n\n  // Load analytics for a period\n  const loadAnalytics = useCallback(async (period = 'week') => {\n    if (!username) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const data = await apiService.getFocusAnalytics(username, period);\n      setAnalytics(data);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error loading analytics:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [username]);\n\n  // Load streak data\n  const loadStreaks = useCallback(async () => {\n    if (!username) return;\n    \n    try {\n      const data = await apiService.getFocusStreaks(username);\n      setStreaks(data);\n    } catch (err) {\n      console.error('Error loading streaks:', err);\n    }\n  }, [username]);\n\n  // Load dashboard data (combines multiple data sources)\n  const loadDashboard = useCallback(async () => {\n    if (!username) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const data = await apiService.getFocusDashboard(username);\n      setTrackerData(data.today);\n      setAnalytics(data.weekAnalytics);\n      setStreaks({\n        currentStreak: data.currentStreak,\n        bestStreak: data.bestStreak\n      });\n    } catch (err) {\n      setError(err.message);\n      console.error('Error loading dashboard:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [username]);\n\n  // Generate daily stats\n  const generateDailyStats = useCallback(async (date = null) => {\n    if (!username) return;\n    \n    try {\n      const data = await apiService.generateDailyFocusStats(username, date);\n      if (!date || date === new Date().toISOString().split('T')[0]) {\n        setTrackerData(data);\n      }\n      return data;\n    } catch (err) {\n      console.error('Error generating daily stats:', err);\n      throw err;\n    }\n  }, [username]);\n\n  // Update daily goal\n  const updateDailyGoal = useCallback(async (date, goalMet) => {\n    if (!username) return;\n    \n    try {\n      await apiService.updateDailyGoal(username, date, goalMet);\n      // Refresh today's data if updating today\n      if (date === new Date().toISOString().split('T')[0]) {\n        await loadTodayTracker();\n      }\n    } catch (err) {\n      console.error('Error updating daily goal:', err);\n      throw err;\n    }\n  }, [username, loadTodayTracker]);\n\n  // Get tracker range\n  const getTrackerRange = useCallback(async (startDate, endDate) => {\n    if (!username) return [];\n    \n    try {\n      return await apiService.getFocusTrackerRange(username, startDate, endDate);\n    } catch (err) {\n      console.error('Error getting tracker range:', err);\n      return [];\n    }\n  }, [username]);\n\n  // Get recent tracker data\n  const getRecentTracker = useCallback(async (days = 7) => {\n    if (!username) return [];\n    \n    try {\n      return await apiService.getRecentFocusTracker(username, days);\n    } catch (err) {\n      console.error('Error getting recent tracker:', err);\n      return [];\n    }\n  }, [username]);\n\n  // Auto-refresh today's stats when focus entries are created\n  const refreshTodayStats = useCallback(() => {\n    generateDailyStats();\n  }, [generateDailyStats]);\n\n  // Load initial data\n  useEffect(() => {\n    if (username) {\n      loadDashboard();\n    }\n  }, [username, loadDashboard]);\n\n  return {\n    trackerData,\n    analytics,\n    streaks,\n    loading,\n    error,\n    loadTodayTracker,\n    loadAnalytics,\n    loadStreaks,\n    loadDashboard,\n    generateDailyStats,\n    updateDailyGoal,\n    getTrackerRange,\n    getRecentTracker,\n    refreshTodayStats\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}