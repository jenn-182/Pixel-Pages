{"ast":null,"code":"import _objectSpread from\"/Users/jenn/Projects/Pixel-Pages/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect,useCallback}from'react';import apiService from'../services/api';export const usePlayer=()=>{const[playerStats,setPlayerStats]=useState({username:'Jroc_182',// Changed from 'PixelAdventurer'\nlevel:1,experience:0,experienceToNext:100,totalNotes:0,totalWords:0,uniqueTags:0,achievementsUnlocked:0});const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const fetchPlayerStats=useCallback(async()=>{try{setLoading(true);setError(null);const response=await apiService.getPlayerStats('Jroc_182');// Pass username explicitly\n// Handle gaming response format\nconst stats=response.data||response;setPlayerStats(prevStats=>_objectSpread(_objectSpread({},prevStats),stats));}catch(err){setError('Failed to fetch player stats');console.error('Error fetching player stats:',err);// Use default stats if API fails\nsetPlayerStats(prevStats=>_objectSpread({},prevStats));}finally{setLoading(false);}},[]);const updatePlayerStats=useCallback(newStats=>{setPlayerStats(prevStats=>_objectSpread(_objectSpread({},prevStats),newStats));},[]);useEffect(()=>{fetchPlayerStats();},[fetchPlayerStats]);return{playerStats,setPlayerStats:updatePlayerStats,loading,error,refreshStats:fetchPlayerStats};};","map":{"version":3,"names":["useState","useEffect","useCallback","apiService","usePlayer","playerStats","setPlayerStats","username","level","experience","experienceToNext","totalNotes","totalWords","uniqueTags","achievementsUnlocked","loading","setLoading","error","setError","fetchPlayerStats","response","getPlayerStats","stats","data","prevStats","_objectSpread","err","console","updatePlayerStats","newStats","refreshStats"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/usePlayer.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport  apiService  from '../services/api';\n\nexport const usePlayer = () => {\n  const [playerStats, setPlayerStats] = useState({\n    username: 'Jroc_182', // Changed from 'PixelAdventurer'\n    level: 1,\n    experience: 0,\n    experienceToNext: 100,\n    totalNotes: 0,\n    totalWords: 0,\n    uniqueTags: 0,\n    achievementsUnlocked: 0\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const fetchPlayerStats = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await apiService.getPlayerStats('Jroc_182'); // Pass username explicitly\n      \n      // Handle gaming response format\n      const stats = response.data || response;\n      setPlayerStats(prevStats => ({\n        ...prevStats,\n        ...stats\n      }));\n    } catch (err) {\n      setError('Failed to fetch player stats');\n      console.error('Error fetching player stats:', err);\n      \n      // Use default stats if API fails\n      setPlayerStats(prevStats => ({\n        ...prevStats,\n        // Keep existing stats or use defaults\n      }));\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const updatePlayerStats = useCallback((newStats) => {\n    setPlayerStats(prevStats => ({\n      ...prevStats,\n      ...newStats\n    }));\n  }, []);\n\n  useEffect(() => {\n    fetchPlayerStats();\n  }, [fetchPlayerStats]);\n\n  return {\n    playerStats,\n    setPlayerStats: updatePlayerStats,\n    loading,\n    error,\n    refreshStats: fetchPlayerStats,\n  };\n};"],"mappings":"8HAAA,OAASA,QAAQ,CAAEC,SAAS,CAAEC,WAAW,KAAQ,OAAO,CACxD,MAAQ,CAAAC,UAAU,KAAO,iBAAiB,CAE1C,MAAO,MAAM,CAAAC,SAAS,CAAGA,CAAA,GAAM,CAC7B,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGN,QAAQ,CAAC,CAC7CO,QAAQ,CAAE,UAAU,CAAE;AACtBC,KAAK,CAAE,CAAC,CACRC,UAAU,CAAE,CAAC,CACbC,gBAAgB,CAAE,GAAG,CACrBC,UAAU,CAAE,CAAC,CACbC,UAAU,CAAE,CAAC,CACbC,UAAU,CAAE,CAAC,CACbC,oBAAoB,CAAE,CACxB,CAAC,CAAC,CACF,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGhB,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACiB,KAAK,CAAEC,QAAQ,CAAC,CAAGlB,QAAQ,CAAC,IAAI,CAAC,CAExC,KAAM,CAAAmB,gBAAgB,CAAGjB,WAAW,CAAC,SAAY,CAC/C,GAAI,CACFc,UAAU,CAAC,IAAI,CAAC,CAChBE,QAAQ,CAAC,IAAI,CAAC,CACd,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAjB,UAAU,CAACkB,cAAc,CAAC,UAAU,CAAC,CAAE;AAE9D;AACA,KAAM,CAAAC,KAAK,CAAGF,QAAQ,CAACG,IAAI,EAAIH,QAAQ,CACvCd,cAAc,CAACkB,SAAS,EAAAC,aAAA,CAAAA,aAAA,IACnBD,SAAS,EACTF,KAAK,CACR,CAAC,CACL,CAAE,MAAOI,GAAG,CAAE,CACZR,QAAQ,CAAC,8BAA8B,CAAC,CACxCS,OAAO,CAACV,KAAK,CAAC,8BAA8B,CAAES,GAAG,CAAC,CAElD;AACApB,cAAc,CAACkB,SAAS,EAAAC,aAAA,IACnBD,SAAS,CAEZ,CAAC,CACL,CAAC,OAAS,CACRR,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAY,iBAAiB,CAAG1B,WAAW,CAAE2B,QAAQ,EAAK,CAClDvB,cAAc,CAACkB,SAAS,EAAAC,aAAA,CAAAA,aAAA,IACnBD,SAAS,EACTK,QAAQ,CACX,CAAC,CACL,CAAC,CAAE,EAAE,CAAC,CAEN5B,SAAS,CAAC,IAAM,CACdkB,gBAAgB,CAAC,CAAC,CACpB,CAAC,CAAE,CAACA,gBAAgB,CAAC,CAAC,CAEtB,MAAO,CACLd,WAAW,CACXC,cAAc,CAAEsB,iBAAiB,CACjCb,OAAO,CACPE,KAAK,CACLa,YAAY,CAAEX,gBAChB,CAAC,CACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}