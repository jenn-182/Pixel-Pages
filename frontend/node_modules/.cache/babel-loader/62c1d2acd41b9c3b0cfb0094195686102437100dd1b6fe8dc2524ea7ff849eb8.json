{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useNotebooks = () => {\n  _s();\n  const [notebooks, setNotebooks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetchNotebooks();\n  }, []);\n  const fetchNotebooks = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/notebooks');\n      if (response.ok) {\n        const data = await response.json();\n        setNotebooks(data);\n      } else {\n        console.error('Failed to fetch notebooks:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error fetching notebooks:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // CREATE NOTEBOOK - Add this method\n  const createNotebook = async notebookData => {\n    try {\n      const response = await fetch('/api/notebooks/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: notebookData.name,\n          description: notebookData.description,\n          colorCode: notebookData.colorCode,\n          folderId: notebookData.folderId || null\n        })\n      });\n      if (response.ok) {\n        const newNotebook = await response.json();\n        setNotebooks(prevNotebooks => [...prevNotebooks, newNotebook]);\n        return newNotebook;\n      } else {\n        const errorText = await response.text();\n        console.error('Failed to create notebook:', response.status, errorText);\n        throw new Error(`Failed to create notebook: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error creating notebook:', error);\n      throw error;\n    }\n  };\n\n  // UPDATE NOTEBOOK - Fixed to include folderId explicitly\n  const updateNotebook = async (id, notebookData) => {\n    try {\n      console.log('updateNotebook called with:', {\n        id,\n        notebookData\n      });\n      const payload = {\n        name: notebookData.name,\n        description: notebookData.description,\n        colorCode: notebookData.colorCode,\n        tags: notebookData.tags,\n        folderId: notebookData.folderId || null\n      };\n      console.log('Sending payload to API:', payload);\n      const response = await fetch(`/api/notebooks/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      if (response.ok) {\n        const updatedNotebook = await response.json();\n        console.log('Received updated notebook from API:', updatedNotebook);\n        setNotebooks(prevNotebooks => prevNotebooks.map(notebook => notebook.id === id ? updatedNotebook : notebook));\n        return updatedNotebook;\n      } else {\n        const errorText = await response.text();\n        console.error('Failed to update notebook:', response.status, errorText);\n        throw new Error(`Failed to update notebook: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error updating notebook:', error);\n      throw error;\n    }\n  };\n  const deleteNotebook = async id => {\n    try {\n      const response = await fetch(`/api/notebooks/${id}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        setNotebooks(prevNotebooks => prevNotebooks.filter(notebook => notebook.id !== id));\n      } else {\n        throw new Error(`Failed to delete notebook: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error deleting notebook:', error);\n      throw error;\n    }\n  };\n  return {\n    notebooks,\n    loading,\n    createNotebook,\n    updateNotebook,\n    deleteNotebook,\n    refreshNotebooks: fetchNotebooks\n  };\n};\n_s(useNotebooks, \"d3DyQ4w1kRqikr/27s7oG/Ziz/I=\");\nexport default useNotebooks;","map":{"version":3,"names":["useState","useEffect","useNotebooks","_s","notebooks","setNotebooks","loading","setLoading","fetchNotebooks","response","fetch","ok","data","json","console","error","statusText","createNotebook","notebookData","method","headers","body","JSON","stringify","name","description","colorCode","folderId","newNotebook","prevNotebooks","errorText","text","status","Error","updateNotebook","id","log","payload","tags","updatedNotebook","map","notebook","deleteNotebook","filter","refreshNotebooks"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/useNotebooks.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useNotebooks = () => {\n  const [notebooks, setNotebooks] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchNotebooks();\n  }, []);\n\n  const fetchNotebooks = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/notebooks');\n      if (response.ok) {\n        const data = await response.json();\n        setNotebooks(data);\n      } else {\n        console.error('Failed to fetch notebooks:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error fetching notebooks:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // CREATE NOTEBOOK - Add this method\n  const createNotebook = async (notebookData) => {\n    try {\n      const response = await fetch('/api/notebooks/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: notebookData.name,\n          description: notebookData.description,\n          colorCode: notebookData.colorCode,\n          folderId: notebookData.folderId || null\n        })\n      });\n\n      if (response.ok) {\n        const newNotebook = await response.json();\n        setNotebooks(prevNotebooks => [...prevNotebooks, newNotebook]);\n        return newNotebook;\n      } else {\n        const errorText = await response.text();\n        console.error('Failed to create notebook:', response.status, errorText);\n        throw new Error(`Failed to create notebook: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error creating notebook:', error);\n      throw error;\n    }\n  };\n\n  // UPDATE NOTEBOOK - Fixed to include folderId explicitly\n  const updateNotebook = async (id, notebookData) => {\n    try {\n      console.log('updateNotebook called with:', { id, notebookData });\n      \n      const payload = {\n        name: notebookData.name,\n        description: notebookData.description,\n        colorCode: notebookData.colorCode,\n        tags: notebookData.tags,\n        folderId: notebookData.folderId || null\n      };\n      \n      console.log('Sending payload to API:', payload);\n      \n      const response = await fetch(`/api/notebooks/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n\n      if (response.ok) {\n        const updatedNotebook = await response.json();\n        console.log('Received updated notebook from API:', updatedNotebook);\n        \n        setNotebooks(prevNotebooks => \n          prevNotebooks.map(notebook => notebook.id === id ? updatedNotebook : notebook)\n        );\n        return updatedNotebook;\n      } else {\n        const errorText = await response.text();\n        console.error('Failed to update notebook:', response.status, errorText);\n        throw new Error(`Failed to update notebook: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error updating notebook:', error);\n      throw error;\n    }\n  };\n\n  const deleteNotebook = async (id) => {\n    try {\n      const response = await fetch(`/api/notebooks/${id}`, {\n        method: 'DELETE'\n      });\n\n      if (response.ok) {\n        setNotebooks(prevNotebooks => prevNotebooks.filter(notebook => notebook.id !== id));\n      } else {\n        throw new Error(`Failed to delete notebook: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error deleting notebook:', error);\n      throw error;\n    }\n  };\n\n  return {\n    notebooks,\n    loading,\n    createNotebook,\n    updateNotebook,\n    deleteNotebook, \n    refreshNotebooks: fetchNotebooks\n  };\n};\n\nexport default useNotebooks;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}