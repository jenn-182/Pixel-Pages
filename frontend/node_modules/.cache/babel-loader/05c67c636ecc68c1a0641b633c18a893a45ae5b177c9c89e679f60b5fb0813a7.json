{"ast":null,"code":"// DEPRECATED - This service is being migrated to backend-only storage\n// Use backendAchievementService instead\nimport backendAchievementService from'./backendAchievementService';console.warn('⚠️ achievementService is deprecated - use backendAchievementService instead');class AchievementService{constructor(){console.warn('⚠️ This service is deprecated. Use backendAchievementService for all achievement operations.');this.listeners=[];}// Redirect all methods to backend service\nasync loadUnlockedAchievements(){console.warn('⚠️ Use backendAchievementService.loadData() instead');return[];}isUnlocked(achievementId){console.warn('⚠️ Use backendAchievementService.isUnlocked() instead');return backendAchievementService.isUnlocked(achievementId);}getUnlockedAchievements(){console.warn('⚠️ Use backendAchievementService.getUnlockedAchievements() instead');return backendAchievementService.getUnlockedAchievements();}async unlockAchievement(achievementId){console.warn('⚠️ Use backendAchievementService.unlockAchievement() instead');return false;}getStats(){console.warn('⚠️ Use backendAchievementService.getStats() instead');return backendAchievementService.getStats();}resetAchievements(){console.warn('⚠️ Use backendAchievementService.resetAchievements() instead');}// Stub methods for backward compatibility\ncheckAchievements(){console.warn('⚠️ Use backendAchievementService.recalculateAchievements() instead');return[];}async getCurrentUserStats(){console.warn('⚠️ User stats now come from backend');return{};}async recalculateAchievements(){console.warn('⚠️ Use backendAchievementService.recalculateAchievements() instead');return[];}cleanupLocalStorage(){console.warn('⚠️ No longer needed - achievements are in backend database');}forceUnlock(){console.warn('⚠️ Use backendAchievementService.unlockAchievement() instead');}// Event listeners for backward compatibility\naddEventListener(callback){this.listeners.push(callback);}removeEventListener(callback){this.listeners=this.listeners.filter(listener=>listener!==callback);}notifyListeners(achievement){this.listeners.forEach(callback=>callback(achievement));}}// Export singleton instance\nconst achievementService=new AchievementService();export default achievementService;","map":{"version":3,"names":["backendAchievementService","console","warn","AchievementService","constructor","listeners","loadUnlockedAchievements","isUnlocked","achievementId","getUnlockedAchievements","unlockAchievement","getStats","resetAchievements","checkAchievements","getCurrentUserStats","recalculateAchievements","cleanupLocalStorage","forceUnlock","addEventListener","callback","push","removeEventListener","filter","listener","notifyListeners","achievement","forEach","achievementService"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/services/achievementService.js"],"sourcesContent":["// DEPRECATED - This service is being migrated to backend-only storage\n// Use backendAchievementService instead\nimport backendAchievementService from './backendAchievementService';\n\nconsole.warn('⚠️ achievementService is deprecated - use backendAchievementService instead');\n\nclass AchievementService {\n  constructor() {\n    console.warn('⚠️ This service is deprecated. Use backendAchievementService for all achievement operations.');\n    this.listeners = [];\n  }\n\n  // Redirect all methods to backend service\n  async loadUnlockedAchievements() {\n    console.warn('⚠️ Use backendAchievementService.loadData() instead');\n    return [];\n  }\n\n  isUnlocked(achievementId) {\n    console.warn('⚠️ Use backendAchievementService.isUnlocked() instead');\n    return backendAchievementService.isUnlocked(achievementId);\n  }\n\n  getUnlockedAchievements() {\n    console.warn('⚠️ Use backendAchievementService.getUnlockedAchievements() instead');\n    return backendAchievementService.getUnlockedAchievements();\n  }\n\n  async unlockAchievement(achievementId) {\n    console.warn('⚠️ Use backendAchievementService.unlockAchievement() instead');\n    return false;\n  }\n\n  getStats() {\n    console.warn('⚠️ Use backendAchievementService.getStats() instead');\n    return backendAchievementService.getStats();\n  }\n\n  resetAchievements() {\n    console.warn('⚠️ Use backendAchievementService.resetAchievements() instead');\n  }\n\n  // Stub methods for backward compatibility\n  checkAchievements() {\n    console.warn('⚠️ Use backendAchievementService.recalculateAchievements() instead');\n    return [];\n  }\n\n  async getCurrentUserStats() {\n    console.warn('⚠️ User stats now come from backend');\n    return {};\n  }\n\n  async recalculateAchievements() {\n    console.warn('⚠️ Use backendAchievementService.recalculateAchievements() instead');\n    return [];\n  }\n\n  cleanupLocalStorage() {\n    console.warn('⚠️ No longer needed - achievements are in backend database');\n  }\n\n  forceUnlock() {\n    console.warn('⚠️ Use backendAchievementService.unlockAchievement() instead');\n  }\n\n  // Event listeners for backward compatibility\n  addEventListener(callback) {\n    this.listeners.push(callback);\n  }\n\n  removeEventListener(callback) {\n    this.listeners = this.listeners.filter(listener => listener !== callback);\n  }\n\n  notifyListeners(achievement) {\n    this.listeners.forEach(callback => callback(achievement));\n  }\n}\n\n// Export singleton instance\nconst achievementService = new AchievementService();\nexport default achievementService;\n"],"mappings":"AAAA;AACA;AACA,MAAO,CAAAA,yBAAyB,KAAM,6BAA6B,CAEnEC,OAAO,CAACC,IAAI,CAAC,6EAA6E,CAAC,CAE3F,KAAM,CAAAC,kBAAmB,CACvBC,WAAWA,CAAA,CAAG,CACZH,OAAO,CAACC,IAAI,CAAC,8FAA8F,CAAC,CAC5G,IAAI,CAACG,SAAS,CAAG,EAAE,CACrB,CAEA;AACA,KAAM,CAAAC,wBAAwBA,CAAA,CAAG,CAC/BL,OAAO,CAACC,IAAI,CAAC,qDAAqD,CAAC,CACnE,MAAO,EAAE,CACX,CAEAK,UAAUA,CAACC,aAAa,CAAE,CACxBP,OAAO,CAACC,IAAI,CAAC,uDAAuD,CAAC,CACrE,MAAO,CAAAF,yBAAyB,CAACO,UAAU,CAACC,aAAa,CAAC,CAC5D,CAEAC,uBAAuBA,CAAA,CAAG,CACxBR,OAAO,CAACC,IAAI,CAAC,oEAAoE,CAAC,CAClF,MAAO,CAAAF,yBAAyB,CAACS,uBAAuB,CAAC,CAAC,CAC5D,CAEA,KAAM,CAAAC,iBAAiBA,CAACF,aAAa,CAAE,CACrCP,OAAO,CAACC,IAAI,CAAC,8DAA8D,CAAC,CAC5E,MAAO,MAAK,CACd,CAEAS,QAAQA,CAAA,CAAG,CACTV,OAAO,CAACC,IAAI,CAAC,qDAAqD,CAAC,CACnE,MAAO,CAAAF,yBAAyB,CAACW,QAAQ,CAAC,CAAC,CAC7C,CAEAC,iBAAiBA,CAAA,CAAG,CAClBX,OAAO,CAACC,IAAI,CAAC,8DAA8D,CAAC,CAC9E,CAEA;AACAW,iBAAiBA,CAAA,CAAG,CAClBZ,OAAO,CAACC,IAAI,CAAC,oEAAoE,CAAC,CAClF,MAAO,EAAE,CACX,CAEA,KAAM,CAAAY,mBAAmBA,CAAA,CAAG,CAC1Bb,OAAO,CAACC,IAAI,CAAC,qCAAqC,CAAC,CACnD,MAAO,CAAC,CAAC,CACX,CAEA,KAAM,CAAAa,uBAAuBA,CAAA,CAAG,CAC9Bd,OAAO,CAACC,IAAI,CAAC,oEAAoE,CAAC,CAClF,MAAO,EAAE,CACX,CAEAc,mBAAmBA,CAAA,CAAG,CACpBf,OAAO,CAACC,IAAI,CAAC,4DAA4D,CAAC,CAC5E,CAEAe,WAAWA,CAAA,CAAG,CACZhB,OAAO,CAACC,IAAI,CAAC,8DAA8D,CAAC,CAC9E,CAEA;AACAgB,gBAAgBA,CAACC,QAAQ,CAAE,CACzB,IAAI,CAACd,SAAS,CAACe,IAAI,CAACD,QAAQ,CAAC,CAC/B,CAEAE,mBAAmBA,CAACF,QAAQ,CAAE,CAC5B,IAAI,CAACd,SAAS,CAAG,IAAI,CAACA,SAAS,CAACiB,MAAM,CAACC,QAAQ,EAAIA,QAAQ,GAAKJ,QAAQ,CAAC,CAC3E,CAEAK,eAAeA,CAACC,WAAW,CAAE,CAC3B,IAAI,CAACpB,SAAS,CAACqB,OAAO,CAACP,QAAQ,EAAIA,QAAQ,CAACM,WAAW,CAAC,CAAC,CAC3D,CACF,CAEA;AACA,KAAM,CAAAE,kBAAkB,CAAG,GAAI,CAAAxB,kBAAkB,CAAC,CAAC,CACnD,cAAe,CAAAwB,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}