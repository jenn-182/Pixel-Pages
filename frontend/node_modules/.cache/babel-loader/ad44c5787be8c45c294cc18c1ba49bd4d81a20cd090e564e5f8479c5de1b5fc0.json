{"ast":null,"code":"import apiService from './api';\nclass BackendAchievementService {\n  constructor() {\n    this.allAchievements = [];\n    this.playerAchievements = [];\n    this.playerStats = {};\n    this.loaded = false;\n  }\n  async loadData(username = 'testuser') {\n    try {\n      const [achievements, playerAchievements, stats] = await Promise.all([apiService.getAllAchievements(), apiService.getPlayerAchievements(username), apiService.getAchievementPlayerStats(username)]);\n      this.allAchievements = achievements;\n      this.playerAchievements = playerAchievements;\n      this.playerStats = stats;\n      this.loaded = true;\n      console.log('✅ Backend achievement data loaded:', {\n        achievements: achievements.length,\n        playerProgress: playerAchievements.length,\n        stats\n      });\n      return {\n        achievements,\n        playerAchievements,\n        stats\n      };\n    } catch (error) {\n      console.error('❌ Failed to load backend achievements:', error);\n      throw error;\n    }\n  }\n  getAchievementProgress(achievementId, userStats) {\n    const playerAchievement = this.playerAchievements.find(pa => pa.achievementId === achievementId);\n    if (playerAchievement !== null && playerAchievement !== void 0 && playerAchievement.completed) return 1;\n    return ((playerAchievement === null || playerAchievement === void 0 ? void 0 : playerAchievement.progress) || 0) / 100; // Backend stores as percentage, frontend expects decimal\n  }\n  isUnlocked(achievementId) {\n    const playerAchievement = this.playerAchievements.find(pa => pa.achievementId === achievementId);\n    return (playerAchievement === null || playerAchievement === void 0 ? void 0 : playerAchievement.completed) || false;\n  }\n  getUnlockedAchievements() {\n    return this.playerAchievements.filter(a => a.completed).map(a => this.allAchievements.find(all => all.id === a.id)).filter(Boolean);\n  }\n  getLockedAchievements() {\n    return this.allAchievements.filter(a => !this.isUnlocked(a.id));\n  }\n  getInProgressAchievements() {\n    return this.playerAchievements.filter(pa => !pa.completed && pa.progress > 0).map(playerAch => {\n      const fullAchievement = this.allAchievements.find(all => all.id === playerAch.achievementId);\n      return fullAchievement ? {\n        ...fullAchievement,\n        progress: playerAch.progress,\n        currentProgress: playerAch.currentProgress,\n        targetValue: playerAch.targetValue\n      } : null;\n    }).filter(Boolean);\n  }\n  getStats() {\n    const unlocked = this.getUnlockedAchievements();\n    const total = this.allAchievements.length;\n    return {\n      total,\n      unlocked: unlocked.length,\n      percentage: total > 0 ? Math.round(unlocked.length / total * 100) : 0,\n      totalXP: this.playerStats.totalXp || 0,\n      byTier: {\n        common: unlocked.filter(a => a.tier === 'common').length,\n        uncommon: unlocked.filter(a => a.tier === 'uncommon').length,\n        rare: unlocked.filter(a => a.tier === 'rare').length,\n        legendary: unlocked.filter(a => a.tier === 'legendary').length\n      }\n    };\n  }\n}\nexport default new BackendAchievementService();","map":{"version":3,"names":["apiService","BackendAchievementService","constructor","allAchievements","playerAchievements","playerStats","loaded","loadData","username","achievements","stats","Promise","all","getAllAchievements","getPlayerAchievements","getAchievementPlayerStats","console","log","length","playerProgress","error","getAchievementProgress","achievementId","userStats","playerAchievement","find","pa","completed","progress","isUnlocked","getUnlockedAchievements","filter","a","map","id","Boolean","getLockedAchievements","getInProgressAchievements","playerAch","fullAchievement","currentProgress","targetValue","getStats","unlocked","total","percentage","Math","round","totalXP","totalXp","byTier","common","tier","uncommon","rare","legendary"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/services/backendAchievementService.js"],"sourcesContent":["import apiService from './api';\n\nclass BackendAchievementService {\n  constructor() {\n    this.allAchievements = [];\n    this.playerAchievements = [];\n    this.playerStats = {};\n    this.loaded = false;\n  }\n\n  async loadData(username = 'testuser') {\n    try {\n      const [achievements, playerAchievements, stats] = await Promise.all([\n        apiService.getAllAchievements(),\n        apiService.getPlayerAchievements(username),\n        apiService.getAchievementPlayerStats(username)\n      ]);\n\n      this.allAchievements = achievements;\n      this.playerAchievements = playerAchievements;\n      this.playerStats = stats;\n      this.loaded = true;\n\n      console.log('✅ Backend achievement data loaded:', {\n        achievements: achievements.length,\n        playerProgress: playerAchievements.length,\n        stats\n      });\n\n      return { achievements, playerAchievements, stats };\n    } catch (error) {\n      console.error('❌ Failed to load backend achievements:', error);\n      throw error;\n    }\n  }\n\n  getAchievementProgress(achievementId, userStats) {\n    const playerAchievement = this.playerAchievements.find(pa => pa.achievementId === achievementId);\n    if (playerAchievement?.completed) return 1;\n    \n    return (playerAchievement?.progress || 0) / 100; // Backend stores as percentage, frontend expects decimal\n  }\n\n  isUnlocked(achievementId) {\n    const playerAchievement = this.playerAchievements.find(pa => pa.achievementId === achievementId);\n    return playerAchievement?.completed || false;\n  }\n\n  getUnlockedAchievements() {\n    return this.playerAchievements\n      .filter(a => a.completed)\n      .map(a => this.allAchievements.find(all => all.id === a.id))\n      .filter(Boolean);\n  }\n\n  getLockedAchievements() {\n    return this.allAchievements.filter(a => !this.isUnlocked(a.id));\n  }\n\n  getInProgressAchievements() {\n    return this.playerAchievements\n      .filter(pa => !pa.completed && pa.progress > 0)\n      .map(playerAch => {\n        const fullAchievement = this.allAchievements.find(all => all.id === playerAch.achievementId);\n        return fullAchievement ? { \n          ...fullAchievement, \n          progress: playerAch.progress,\n          currentProgress: playerAch.currentProgress,\n          targetValue: playerAch.targetValue\n        } : null;\n      })\n      .filter(Boolean);\n  }\n\n  getStats() {\n    const unlocked = this.getUnlockedAchievements();\n    const total = this.allAchievements.length;\n    \n    return {\n      total,\n      unlocked: unlocked.length,\n      percentage: total > 0 ? Math.round((unlocked.length / total) * 100) : 0,\n      totalXP: this.playerStats.totalXp || 0,\n      byTier: {\n        common: unlocked.filter(a => a.tier === 'common').length,\n        uncommon: unlocked.filter(a => a.tier === 'uncommon').length,\n        rare: unlocked.filter(a => a.tier === 'rare').length,\n        legendary: unlocked.filter(a => a.tier === 'legendary').length\n      }\n    };\n  }\n}\n\nexport default new BackendAchievementService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}