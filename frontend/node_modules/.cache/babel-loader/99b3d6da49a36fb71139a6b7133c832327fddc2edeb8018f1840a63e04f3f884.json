{"ast":null,"code":"import apiService from './api';\nclass BackendAchievementService {\n  constructor() {\n    this.allAchievements = [];\n    this.playerAchievements = [];\n    this.playerStats = {};\n    this.loaded = false;\n  }\n  async loadData(username = 'user') {\n    // Changed from 'testuser' to 'Jroc_182'\n    try {\n      const [achievements, playerAchievements, stats] = await Promise.all([apiService.getAllAchievements(), apiService.getPlayerAchievements(username), apiService.getAchievementPlayerStats(username)]);\n      this.allAchievements = achievements;\n      this.playerAchievements = playerAchievements;\n      this.playerStats = stats;\n      this.loaded = true;\n      console.log('✅ Backend achievement data loaded for', username);\n      return {\n        achievements,\n        playerAchievements,\n        stats\n      };\n    } catch (error) {\n      console.error('❌ Failed to load backend achievements:', error);\n      throw error;\n    }\n  }\n  isUnlocked(achievementId) {\n    const playerAchievement = this.playerAchievements.find(pa => pa.achievementId === achievementId // ✅ Change from 'id' to 'achievementId'\n    );\n    return (playerAchievement === null || playerAchievement === void 0 ? void 0 : playerAchievement.completed) === true; // Explicit boolean check\n  }\n  getAchievementProgress(achievementId, userStats) {\n    const playerAchievement = this.playerAchievements.find(pa => pa.id === achievementId);\n    if (playerAchievement !== null && playerAchievement !== void 0 && playerAchievement.completed) {\n      return 1; // Return 1 (100%) for completed achievements\n    }\n\n    // For in-progress achievements, use the progress percentage\n    if (playerAchievement !== null && playerAchievement !== void 0 && playerAchievement.progressPercentage) {\n      return playerAchievement.progressPercentage / 100; // Convert percentage to decimal\n    }\n\n    // Fallback calculation\n    const progressValue = (playerAchievement === null || playerAchievement === void 0 ? void 0 : playerAchievement.progress) || 0;\n    const maxProgress = (playerAchievement === null || playerAchievement === void 0 ? void 0 : playerAchievement.maxProgress) || 100;\n    return maxProgress > 0 ? progressValue / maxProgress : 0;\n  }\n  getUnlockedAchievements() {\n    return this.playerAchievements.filter(pa => pa.completed) // These are already the full achievement objects\n    .map(playerAch => ({\n      ...playerAch,\n      unlockedAt: playerAch.unlockedAt\n    }));\n  }\n  getLockedAchievements() {\n    return this.allAchievements.filter(a => !this.isUnlocked(a.id));\n  }\n  getInProgressAchievements() {\n    console.log('🔍 DEBUG: Checking for in-progress achievements...');\n    const filtered = this.playerAchievements.filter(achievement => {\n      const isNotCompleted = !achievement.completed;\n      const hasProgress = (achievement.progressPercentage || 0) > 0;\n      const isNotFullyComplete = (achievement.progressPercentage || 0) < 100;\n      console.log(`🔍 Achievement ${achievement.name}:`, {\n        completed: achievement.completed,\n        progressPercentage: achievement.progressPercentage,\n        isNotCompleted,\n        hasProgress,\n        isNotFullyComplete,\n        willInclude: isNotCompleted && hasProgress && isNotFullyComplete\n      });\n      return isNotCompleted && hasProgress && isNotFullyComplete;\n    });\n    console.log('🔍 Filtered in-progress achievements:', filtered.length);\n    return filtered.map(playerAch => ({\n      ...playerAch,\n      progress: playerAch.progressPercentage || 0,\n      currentProgress: playerAch.progress || 0,\n      targetProgress: playerAch.maxProgress || 100,\n      progressPercentage: playerAch.progressPercentage || 0\n    }));\n  }\n  getStats() {\n    const unlocked = this.getUnlockedAchievements();\n    const total = this.allAchievements.length;\n    return {\n      total,\n      unlocked: unlocked.length,\n      percentage: total > 0 ? Math.round(unlocked.length / total * 100) : 0,\n      totalXP: this.playerStats.totalXp || 0,\n      byTier: {\n        common: unlocked.filter(a => a.tier === 'common').length,\n        uncommon: unlocked.filter(a => a.tier === 'uncommon').length,\n        rare: unlocked.filter(a => a.tier === 'rare').length,\n        legendary: unlocked.filter(a => a.tier === 'legendary').length\n      }\n    };\n  }\n}\nexport default new BackendAchievementService();","map":{"version":3,"names":["apiService","BackendAchievementService","constructor","allAchievements","playerAchievements","playerStats","loaded","loadData","username","achievements","stats","Promise","all","getAllAchievements","getPlayerAchievements","getAchievementPlayerStats","console","log","error","isUnlocked","achievementId","playerAchievement","find","pa","completed","getAchievementProgress","userStats","id","progressPercentage","progressValue","progress","maxProgress","getUnlockedAchievements","filter","map","playerAch","unlockedAt","getLockedAchievements","a","getInProgressAchievements","filtered","achievement","isNotCompleted","hasProgress","isNotFullyComplete","name","willInclude","length","currentProgress","targetProgress","getStats","unlocked","total","percentage","Math","round","totalXP","totalXp","byTier","common","tier","uncommon","rare","legendary"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/services/backendAchievementService.js"],"sourcesContent":["import apiService from './api';\n\nclass BackendAchievementService {\n  constructor() {\n    this.allAchievements = [];\n    this.playerAchievements = [];\n    this.playerStats = {};\n    this.loaded = false;\n  }\n\n  async loadData(username = 'user') {  // Changed from 'testuser' to 'Jroc_182'\n    try {\n      const [achievements, playerAchievements, stats] = await Promise.all([\n        apiService.getAllAchievements(),\n        apiService.getPlayerAchievements(username),\n        apiService.getAchievementPlayerStats(username)\n      ]);\n\n      this.allAchievements = achievements;\n      this.playerAchievements = playerAchievements;\n      this.playerStats = stats;\n      this.loaded = true;\n\n      console.log('✅ Backend achievement data loaded for', username);\n\n      return { achievements, playerAchievements, stats };\n    } catch (error) {\n      console.error('❌ Failed to load backend achievements:', error);\n      throw error;\n    }\n  }\n\nisUnlocked(achievementId) {\n  const playerAchievement = this.playerAchievements.find(pa => \n    pa.achievementId === achievementId  // ✅ Change from 'id' to 'achievementId'\n  );\n  return playerAchievement?.completed === true; // Explicit boolean check\n}\n\n  getAchievementProgress(achievementId, userStats) {\n    const playerAchievement = this.playerAchievements.find(pa => pa.id === achievementId);\n    \n    if (playerAchievement?.completed) {\n      return 1; // Return 1 (100%) for completed achievements\n    }\n    \n    // For in-progress achievements, use the progress percentage\n    if (playerAchievement?.progressPercentage) {\n      return playerAchievement.progressPercentage / 100; // Convert percentage to decimal\n    }\n    \n    // Fallback calculation\n    const progressValue = playerAchievement?.progress || 0;\n    const maxProgress = playerAchievement?.maxProgress || 100;\n    return maxProgress > 0 ? progressValue / maxProgress : 0;\n  }\n\n  getUnlockedAchievements() {\n    return this.playerAchievements\n      .filter(pa => pa.completed)  // These are already the full achievement objects\n      .map(playerAch => ({\n        ...playerAch,\n        unlockedAt: playerAch.unlockedAt\n      }));\n  }\n\n  getLockedAchievements() {\n    return this.allAchievements.filter(a => !this.isUnlocked(a.id));\n  }\n\n  getInProgressAchievements() {\n    console.log('🔍 DEBUG: Checking for in-progress achievements...');\n    \n    const filtered = this.playerAchievements.filter(achievement => {\n      const isNotCompleted = !achievement.completed;\n      const hasProgress = (achievement.progressPercentage || 0) > 0;\n      const isNotFullyComplete = (achievement.progressPercentage || 0) < 100;\n      \n      console.log(`🔍 Achievement ${achievement.name}:`, {\n        completed: achievement.completed,\n        progressPercentage: achievement.progressPercentage,\n        isNotCompleted,\n        hasProgress,\n        isNotFullyComplete,\n        willInclude: isNotCompleted && hasProgress && isNotFullyComplete\n      });\n      \n      return isNotCompleted && hasProgress && isNotFullyComplete;\n    });\n    \n    console.log('🔍 Filtered in-progress achievements:', filtered.length);\n    \n    return filtered.map(playerAch => ({\n      ...playerAch,\n      progress: playerAch.progressPercentage || 0,\n      currentProgress: playerAch.progress || 0,\n      targetProgress: playerAch.maxProgress || 100,\n      progressPercentage: playerAch.progressPercentage || 0\n    }));\n  }\n\n  getStats() {\n    const unlocked = this.getUnlockedAchievements();\n    const total = this.allAchievements.length;\n    \n    return {\n      total,\n      unlocked: unlocked.length,\n      percentage: total > 0 ? Math.round((unlocked.length / total) * 100) : 0,\n      totalXP: this.playerStats.totalXp || 0,\n      byTier: {\n        common: unlocked.filter(a => a.tier === 'common').length,\n        uncommon: unlocked.filter(a => a.tier === 'uncommon').length,\n        rare: unlocked.filter(a => a.tier === 'rare').length,\n        legendary: unlocked.filter(a => a.tier === 'legendary').length\n      }\n    };\n  }\n}\n\nexport default new BackendAchievementService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}