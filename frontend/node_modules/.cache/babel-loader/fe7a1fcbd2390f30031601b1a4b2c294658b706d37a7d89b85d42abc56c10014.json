{"ast":null,"code":"import apiService from './api';\nclass BackendAchievementService {\n  constructor() {\n    this.allAchievements = [];\n    this.playerAchievements = [];\n    this.playerStats = {};\n    this.loaded = false;\n  }\n  getUnlockedAchievements() {\n    if (!this.loaded) {\n      console.warn('⚠️ Backend achievement service not loaded yet');\n      return [];\n    }\n    const unlockedIds = this.playerAchievements.filter(pa => pa.unlocked).map(pa => pa.achievementId);\n    const unlockedAchievements = this.allAchievements.filter(achievement => unlockedIds.includes(achievement.id)).map(achievement => {\n      const playerAch = this.playerAchievements.find(pa => pa.achievementId === achievement.id);\n      return {\n        ...achievement,\n        unlockedAt: (playerAch === null || playerAch === void 0 ? void 0 : playerAch.unlockedAt) || new Date().toISOString(),\n        progress: (playerAch === null || playerAch === void 0 ? void 0 : playerAch.progress) || 100\n      };\n    });\n    console.log('🔍 BACKEND SERVICE getUnlockedAchievements():');\n    console.log('   - unlockedIds:', unlockedIds);\n    console.log('   - unlockedAchievements:', unlockedAchievements);\n    return unlockedAchievements;\n  }\n  async loadData(username = 'Jroc_182') {\n    try {\n      console.log('🔄 BACKEND SERVICE: Loading data for', username);\n      const [achievements, playerAchievements, stats] = await Promise.all([apiService.getAllAchievements(), apiService.getPlayerAchievements(username), apiService.getAchievementPlayerStats(username)]);\n      console.log('🔍 BACKEND SERVICE: Raw data loaded:');\n      console.log('   - achievements:', (achievements === null || achievements === void 0 ? void 0 : achievements.length) || 0);\n      console.log('   - playerAchievements:', (playerAchievements === null || playerAchievements === void 0 ? void 0 : playerAchievements.length) || 0);\n      console.log('   - stats:', stats);\n      this.allAchievements = achievements;\n      this.playerAchievements = playerAchievements;\n      this.playerStats = stats;\n      this.loaded = true;\n      console.log('✅ Backend achievement data loaded for', username);\n      return {\n        achievements,\n        playerAchievements,\n        stats\n      };\n    } catch (error) {\n      console.error('❌ Failed to load backend achievements:', error);\n\n      // 🔄 FALLBACK: If backend fails, try to use local data\n      console.log('🔄 BACKEND FAILED: Attempting fallback to local achievements');\n      this.allAchievements = allAchievements; // Use imported achievements\n      this.playerAchievements = [];\n      this.playerStats = {};\n      this.loaded = true;\n      throw error;\n    }\n  }\n  isUnlocked(achievementId) {\n    const playerAchievement = this.playerAchievements.find(pa => pa.achievementId === achievementId || pa.id === achievementId);\n    return (playerAchievement === null || playerAchievement === void 0 ? void 0 : playerAchievement.completed) === true;\n  }\n  getAchievementProgress(achievementId, userStats) {\n    const playerAchievement = this.playerAchievements.find(pa => pa.achievementId === achievementId || pa.id === achievementId // ✅ Check both fields\n    );\n    if (playerAchievement !== null && playerAchievement !== void 0 && playerAchievement.completed) {\n      return 1;\n    }\n\n    // For in-progress achievements, use the progress percentage\n    if (playerAchievement !== null && playerAchievement !== void 0 && playerAchievement.progressPercentage) {\n      return playerAchievement.progressPercentage / 100;\n    }\n\n    // Fallback calculation\n    const progressValue = (playerAchievement === null || playerAchievement === void 0 ? void 0 : playerAchievement.progress) || 0;\n    const maxProgress = (playerAchievement === null || playerAchievement === void 0 ? void 0 : playerAchievement.maxProgress) || 100;\n    return maxProgress > 0 ? progressValue / maxProgress : 0;\n  }\n  getLockedAchievements() {\n    return this.allAchievements.filter(a => !this.isUnlocked(a.id));\n  }\n  getInProgressAchievements() {\n    console.log('🔍 DEBUG: Checking for in-progress achievements...');\n    const filtered = this.playerAchievements.filter(achievement => {\n      const isNotCompleted = !achievement.completed;\n      const hasProgress = (achievement.progressPercentage || 0) > 0;\n      const isNotFullyComplete = (achievement.progressPercentage || 0) < 100;\n      console.log(`🔍 Achievement ${achievement.name}:`, {\n        completed: achievement.completed,\n        progressPercentage: achievement.progressPercentage,\n        isNotCompleted,\n        hasProgress,\n        isNotFullyComplete,\n        willInclude: isNotCompleted && hasProgress && isNotFullyComplete\n      });\n      return isNotCompleted && hasProgress && isNotFullyComplete;\n    });\n    console.log('🔍 Filtered in-progress achievements:', filtered.length);\n    return filtered.map(playerAch => ({\n      ...playerAch,\n      progress: playerAch.progressPercentage || 0,\n      currentProgress: playerAch.progress || 0,\n      targetProgress: playerAch.maxProgress || 100,\n      progressPercentage: playerAch.progressPercentage || 0\n    }));\n  }\n  getStats() {\n    const unlocked = this.getUnlockedAchievements();\n    const total = this.allAchievements.length;\n    return {\n      total,\n      unlocked: unlocked.length,\n      percentage: total > 0 ? Math.round(unlocked.length / total * 100) : 0,\n      totalXP: this.playerStats.totalXp || 0,\n      byTier: {\n        common: unlocked.filter(a => a.tier === 'common').length,\n        uncommon: unlocked.filter(a => a.tier === 'uncommon').length,\n        rare: unlocked.filter(a => a.tier === 'rare').length,\n        legendary: unlocked.filter(a => a.tier === 'legendary').length\n      }\n    };\n  }\n}\nexport default new BackendAchievementService();","map":{"version":3,"names":["apiService","BackendAchievementService","constructor","allAchievements","playerAchievements","playerStats","loaded","getUnlockedAchievements","console","warn","unlockedIds","filter","pa","unlocked","map","achievementId","unlockedAchievements","achievement","includes","id","playerAch","find","unlockedAt","Date","toISOString","progress","log","loadData","username","achievements","stats","Promise","all","getAllAchievements","getPlayerAchievements","getAchievementPlayerStats","length","error","isUnlocked","playerAchievement","completed","getAchievementProgress","userStats","progressPercentage","progressValue","maxProgress","getLockedAchievements","a","getInProgressAchievements","filtered","isNotCompleted","hasProgress","isNotFullyComplete","name","willInclude","currentProgress","targetProgress","getStats","total","percentage","Math","round","totalXP","totalXp","byTier","common","tier","uncommon","rare","legendary"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/services/backendAchievementService.js"],"sourcesContent":["import apiService from './api';\n\nclass BackendAchievementService {\n  constructor() {\n    this.allAchievements = [];\n    this.playerAchievements = [];\n    this.playerStats = {};\n    this.loaded = false;\n  }\n\n  getUnlockedAchievements() {\n    if (!this.loaded) {\n      console.warn('⚠️ Backend achievement service not loaded yet');\n      return [];\n    }\n    \n    const unlockedIds = this.playerAchievements\n      .filter(pa => pa.unlocked)\n      .map(pa => pa.achievementId);\n    \n    const unlockedAchievements = this.allAchievements\n      .filter(achievement => unlockedIds.includes(achievement.id))\n      .map(achievement => {\n        const playerAch = this.playerAchievements.find(pa => pa.achievementId === achievement.id);\n        return {\n          ...achievement,\n          unlockedAt: playerAch?.unlockedAt || new Date().toISOString(),\n          progress: playerAch?.progress || 100\n        };\n      });\n    \n    console.log('🔍 BACKEND SERVICE getUnlockedAchievements():');\n    console.log('   - unlockedIds:', unlockedIds);\n    console.log('   - unlockedAchievements:', unlockedAchievements);\n    \n    return unlockedAchievements;\n  }\n\n  async loadData(username = 'Jroc_182') {\n    try {\n      console.log('🔄 BACKEND SERVICE: Loading data for', username);\n      \n      const [achievements, playerAchievements, stats] = await Promise.all([\n        apiService.getAllAchievements(),\n        apiService.getPlayerAchievements(username),\n        apiService.getAchievementPlayerStats(username)\n      ]);\n\n      console.log('🔍 BACKEND SERVICE: Raw data loaded:');\n      console.log('   - achievements:', achievements?.length || 0);\n      console.log('   - playerAchievements:', playerAchievements?.length || 0);\n      console.log('   - stats:', stats);\n\n      this.allAchievements = achievements;\n      this.playerAchievements = playerAchievements;\n      this.playerStats = stats;\n      this.loaded = true;\n\n      console.log('✅ Backend achievement data loaded for', username);\n\n      return { achievements, playerAchievements, stats };\n    } catch (error) {\n      console.error('❌ Failed to load backend achievements:', error);\n      \n      // 🔄 FALLBACK: If backend fails, try to use local data\n      console.log('🔄 BACKEND FAILED: Attempting fallback to local achievements');\n      this.allAchievements = allAchievements; // Use imported achievements\n      this.playerAchievements = [];\n      this.playerStats = {};\n      this.loaded = true;\n      \n      throw error;\n    }\n  }\n\n  isUnlocked(achievementId) {\n    const playerAchievement = this.playerAchievements.find(pa => \n      pa.achievementId === achievementId || pa.id === achievementId \n    );\n    return playerAchievement?.completed === true;\n  }\n\n  getAchievementProgress(achievementId, userStats) {\n    const playerAchievement = this.playerAchievements.find(pa => \n      pa.achievementId === achievementId || pa.id === achievementId  // ✅ Check both fields\n    ); \n    \n    if (playerAchievement?.completed) {\n      return 1; \n    }\n    \n    // For in-progress achievements, use the progress percentage\n    if (playerAchievement?.progressPercentage) {\n      return playerAchievement.progressPercentage / 100;\n    }\n    \n    // Fallback calculation\n    const progressValue = playerAchievement?.progress || 0;\n    const maxProgress = playerAchievement?.maxProgress || 100;\n    return maxProgress > 0 ? progressValue / maxProgress : 0;\n  }\n\n  getLockedAchievements() {\n    return this.allAchievements.filter(a => !this.isUnlocked(a.id));\n  }\n\n  getInProgressAchievements() {\n    console.log('🔍 DEBUG: Checking for in-progress achievements...');\n    \n    const filtered = this.playerAchievements.filter(achievement => {\n      const isNotCompleted = !achievement.completed;\n      const hasProgress = (achievement.progressPercentage || 0) > 0;\n      const isNotFullyComplete = (achievement.progressPercentage || 0) < 100;\n      \n      console.log(`🔍 Achievement ${achievement.name}:`, {\n        completed: achievement.completed,\n        progressPercentage: achievement.progressPercentage,\n        isNotCompleted,\n        hasProgress,\n        isNotFullyComplete,\n        willInclude: isNotCompleted && hasProgress && isNotFullyComplete\n      });\n      \n      return isNotCompleted && hasProgress && isNotFullyComplete;\n    });\n    \n    console.log('🔍 Filtered in-progress achievements:', filtered.length);\n    \n    return filtered.map(playerAch => ({\n      ...playerAch,\n      progress: playerAch.progressPercentage || 0,\n      currentProgress: playerAch.progress || 0,\n      targetProgress: playerAch.maxProgress || 100,\n      progressPercentage: playerAch.progressPercentage || 0\n    }));\n  }\n\n  getStats() {\n    const unlocked = this.getUnlockedAchievements();\n    const total = this.allAchievements.length;\n    \n    return {\n      total,\n      unlocked: unlocked.length,\n      percentage: total > 0 ? Math.round((unlocked.length / total) * 100) : 0,\n      totalXP: this.playerStats.totalXp || 0,\n      byTier: {\n        common: unlocked.filter(a => a.tier === 'common').length,\n        uncommon: unlocked.filter(a => a.tier === 'uncommon').length,\n        rare: unlocked.filter(a => a.tier === 'rare').length,\n        legendary: unlocked.filter(a => a.tier === 'legendary').length\n      }\n    };\n  }\n}\n\nexport default new BackendAchievementService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}