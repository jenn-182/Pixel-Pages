{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport useFocusSessions from './useFocusSessions';\nconst useProductivityStats = () => {\n  _s();\n  const [stats, setStats] = useState({\n    totalTime: 0,\n    todayTime: 0,\n    weekTime: 0,\n    monthTime: 0,\n    sessionBreakdown: [],\n    dailyStats: [],\n    streakCount: 0,\n    avgSessionLength: 0,\n    totalSessions: 0\n  });\n  const [loading, setLoading] = useState(true);\n  const {\n    getAllLogs,\n    sessions\n  } = useFocusSessions();\n  const calculateStats = () => {\n    try {\n      setLoading(true);\n      const logs = getAllLogs();\n      console.log('Raw logs from getAllLogs():', logs); // DEBUG\n\n      const now = new Date();\n      const today = now.toISOString().split('T')[0]; // \"2025-09-06\"\n      const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n      console.log('Date calculations:', {\n        today,\n        weekAgo,\n        monthAgo\n      }); // DEBUG\n\n      // Calculate total time\n      const totalTime = logs.reduce((sum, log) => sum + log.timeSpent, 0);\n      console.log('Total time:', totalTime); // DEBUG\n\n      // Calculate today's time - FIXED\n      const todayTime = logs.filter(log => {\n        const logDate = new Date(log.date).toISOString().split('T')[0];\n        const isToday = logDate === today; // FIXED: Use === instead of >=\n        console.log(`Checking log: ${logDate} === ${today} = ${isToday}, timeSpent: ${log.timeSpent}`); // DEBUG\n        return isToday;\n      }).reduce((sum, log) => sum + log.timeSpent, 0);\n      console.log('Today time calculated:', todayTime); // DEBUG\n\n      // Calculate week time - FIXED\n      const weekTime = logs.filter(log => {\n        const logDate = new Date(log.date);\n        return logDate >= weekAgo;\n      }).reduce((sum, log) => sum + log.timeSpent, 0);\n\n      // Calculate month time - FIXED  \n      const monthTime = logs.filter(log => {\n        const logDate = new Date(log.date);\n        return logDate >= monthAgo;\n      }).reduce((sum, log) => sum + log.timeSpent, 0);\n\n      // Calculate session breakdown\n      const sessionBreakdown = sessions.map(session => {\n        const sessionLogs = logs.filter(log => log.sessionId === session.id);\n        const sessionTime = sessionLogs.reduce((sum, log) => sum + log.timeSpent, 0);\n        const sessionCount = sessionLogs.length;\n        return {\n          id: session.id,\n          name: session.name,\n          colorCode: session.colorCode,\n          tag: session.tag,\n          totalTime: sessionTime,\n          sessionCount,\n          averageTime: sessionCount > 0 ? Math.round(sessionTime / sessionCount) : 0,\n          lastActive: sessionLogs.length > 0 ? new Date(Math.max(...sessionLogs.map(log => new Date(log.date)))) : null\n        };\n      }).sort((a, b) => b.totalTime - a.totalTime);\n\n      // Calculate daily stats for the last 30 days\n      const dailyStats = [];\n      for (let i = 29; i >= 0; i--) {\n        const date = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);\n        const dayStart = new Date(date);\n        const dayEnd = new Date(date.getTime() + 24 * 60 * 60 * 1000);\n        const dayLogs = logs.filter(log => {\n          const logDate = new Date(log.date);\n          return logDate >= dayStart && logDate < dayEnd;\n        });\n        const dayTime = dayLogs.reduce((sum, log) => sum + log.timeSpent, 0);\n        dailyStats.push({\n          date: date.toISOString().split('T')[0],\n          time: dayTime,\n          sessions: dayLogs.length\n        });\n      }\n\n      // Calculate streak (consecutive days with at least 1 session)\n      let streakCount = 0;\n      let checkDate = new Date(now);\n      while (true) {\n        const dayStart = new Date(checkDate);\n        const dayEnd = new Date(checkDate.getTime() + 24 * 60 * 60 * 1000);\n        const hasActivity = logs.some(log => {\n          const logDate = new Date(log.date);\n          return logDate >= dayStart && logDate < dayEnd;\n        });\n        if (hasActivity) {\n          streakCount++;\n          checkDate.setDate(checkDate.getDate() - 1);\n        } else {\n          break;\n        }\n      }\n\n      // Calculate average session length\n      const avgSessionLength = logs.length > 0 ? Math.round(totalTime / logs.length) : 0;\n      setStats({\n        totalTime,\n        todayTime,\n        weekTime,\n        monthTime,\n        sessionBreakdown,\n        dailyStats,\n        streakCount,\n        avgSessionLength,\n        totalSessions: logs.length\n      });\n    } catch (error) {\n      console.error('Error calculating stats:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get time spent in a specific period\n  const getTimeInPeriod = period => {\n    const logs = getAllLogs();\n    const now = new Date();\n    let startDate;\n    switch (period) {\n      case 'today':\n        startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n        break;\n      case 'week':\n        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        break;\n      case 'month':\n        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n        break;\n      default:\n        return 0;\n    }\n    return logs.filter(log => new Date(log.date) >= startDate).reduce((sum, log) => sum + log.timeSpent, 0);\n  };\n\n  // Get session stats for a specific session\n  const getSessionStats = sessionId => {\n    const logs = getAllLogs().filter(log => log.sessionId === sessionId);\n    const totalTime = logs.reduce((sum, log) => sum + log.timeSpent, 0);\n    return {\n      totalTime,\n      sessionCount: logs.length,\n      averageTime: logs.length > 0 ? Math.round(totalTime / logs.length) : 0,\n      lastActive: logs.length > 0 ? new Date(Math.max(...logs.map(log => new Date(log.date)))) : null\n    };\n  };\n\n  // Format time for display\n  const formatTime = minutes => {\n    if (minutes < 60) {\n      return `${minutes}m`;\n    }\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n    return remainingMinutes > 0 ? `${hours}h ${remainingMinutes}m` : `${hours}h`;\n  };\n  useEffect(() => {\n    calculateStats();\n  }, [sessions]);\n  return {\n    stats,\n    loading,\n    calculateStats,\n    formatTime,\n    getAllLogs: () => {\n      try {\n        return JSON.parse(localStorage.getItem('pixelPages_focusLogs') || '[]');\n      } catch (error) {\n        console.error('Error getting logs:', error);\n        return [];\n      }\n    }\n  };\n};\n_s(useProductivityStats, \"oaWl9EbA5N5KacCBv28bRi6K+Hc=\", false, function () {\n  return [useFocusSessions];\n});\nexport default useProductivityStats;","map":{"version":3,"names":["useState","useEffect","useFocusSessions","useProductivityStats","_s","stats","setStats","totalTime","todayTime","weekTime","monthTime","sessionBreakdown","dailyStats","streakCount","avgSessionLength","totalSessions","loading","setLoading","getAllLogs","sessions","calculateStats","logs","console","log","now","Date","today","toISOString","split","weekAgo","getTime","monthAgo","reduce","sum","timeSpent","filter","logDate","date","isToday","map","session","sessionLogs","sessionId","id","sessionTime","sessionCount","length","name","colorCode","tag","averageTime","Math","round","lastActive","max","sort","a","b","i","dayStart","dayEnd","dayLogs","dayTime","push","time","checkDate","hasActivity","some","setDate","getDate","error","getTimeInPeriod","period","startDate","getFullYear","getMonth","getSessionStats","formatTime","minutes","hours","floor","remainingMinutes","JSON","parse","localStorage","getItem"],"sources":["/Users/jenn/Projects/Pixel-Pages/frontend/src/hooks/useProductivityStats.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport useFocusSessions from './useFocusSessions';\n\nconst useProductivityStats = () => {\n  const [stats, setStats] = useState({\n    totalTime: 0,\n    todayTime: 0,\n    weekTime: 0,\n    monthTime: 0,\n    sessionBreakdown: [],\n    dailyStats: [],\n    streakCount: 0,\n    avgSessionLength: 0,\n    totalSessions: 0\n  });\n  const [loading, setLoading] = useState(true);\n\n  const { getAllLogs, sessions } = useFocusSessions();\n\n  const calculateStats = () => {\n    try {\n      setLoading(true);\n      const logs = getAllLogs();\n      console.log('Raw logs from getAllLogs():', logs); // DEBUG\n    \n      const now = new Date();\n      const today = now.toISOString().split('T')[0]; // \"2025-09-06\"\n      const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n      console.log('Date calculations:', { today, weekAgo, monthAgo }); // DEBUG\n\n      // Calculate total time\n      const totalTime = logs.reduce((sum, log) => sum + log.timeSpent, 0);\n      console.log('Total time:', totalTime); // DEBUG\n\n      // Calculate today's time - FIXED\n      const todayTime = logs\n        .filter(log => {\n          const logDate = new Date(log.date).toISOString().split('T')[0];\n          const isToday = logDate === today; // FIXED: Use === instead of >=\n          console.log(`Checking log: ${logDate} === ${today} = ${isToday}, timeSpent: ${log.timeSpent}`); // DEBUG\n          return isToday;\n        })\n        .reduce((sum, log) => sum + log.timeSpent, 0);\n\n      console.log('Today time calculated:', todayTime); // DEBUG\n\n      // Calculate week time - FIXED\n      const weekTime = logs\n        .filter(log => {\n          const logDate = new Date(log.date);\n          return logDate >= weekAgo;\n        })\n        .reduce((sum, log) => sum + log.timeSpent, 0);\n\n      // Calculate month time - FIXED  \n      const monthTime = logs\n        .filter(log => {\n          const logDate = new Date(log.date);\n          return logDate >= monthAgo;\n        })\n        .reduce((sum, log) => sum + log.timeSpent, 0);\n\n      // Calculate session breakdown\n      const sessionBreakdown = sessions.map(session => {\n        const sessionLogs = logs.filter(log => log.sessionId === session.id);\n        const sessionTime = sessionLogs.reduce((sum, log) => sum + log.timeSpent, 0);\n        const sessionCount = sessionLogs.length;\n        \n        return {\n          id: session.id,\n          name: session.name,\n          colorCode: session.colorCode,\n          tag: session.tag,\n          totalTime: sessionTime,\n          sessionCount,\n          averageTime: sessionCount > 0 ? Math.round(sessionTime / sessionCount) : 0,\n          lastActive: sessionLogs.length > 0 \n            ? new Date(Math.max(...sessionLogs.map(log => new Date(log.date))))\n            : null\n        };\n      }).sort((a, b) => b.totalTime - a.totalTime);\n\n      // Calculate daily stats for the last 30 days\n      const dailyStats = [];\n      for (let i = 29; i >= 0; i--) {\n        const date = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);\n        const dayStart = new Date(date);\n        const dayEnd = new Date(date.getTime() + 24 * 60 * 60 * 1000);\n        \n        const dayLogs = logs.filter(log => {\n          const logDate = new Date(log.date);\n          return logDate >= dayStart && logDate < dayEnd;\n        });\n\n        const dayTime = dayLogs.reduce((sum, log) => sum + log.timeSpent, 0);\n        \n        dailyStats.push({\n          date: date.toISOString().split('T')[0],\n          time: dayTime,\n          sessions: dayLogs.length\n        });\n      }\n\n      // Calculate streak (consecutive days with at least 1 session)\n      let streakCount = 0;\n      let checkDate = new Date(now); \n      \n      while (true) {\n        const dayStart = new Date(checkDate);\n        const dayEnd = new Date(checkDate.getTime() + 24 * 60 * 60 * 1000);\n        \n        const hasActivity = logs.some(log => {\n          const logDate = new Date(log.date);\n          return logDate >= dayStart && logDate < dayEnd;\n        });\n\n        if (hasActivity) {\n          streakCount++;\n          checkDate.setDate(checkDate.getDate() - 1);\n        } else {\n          break;\n        }\n      }\n\n      // Calculate average session length\n      const avgSessionLength = logs.length > 0 \n        ? Math.round(totalTime / logs.length) \n        : 0;\n\n      setStats({\n        totalTime,\n        todayTime,\n        weekTime,\n        monthTime,\n        sessionBreakdown,\n        dailyStats,\n        streakCount,\n        avgSessionLength,\n        totalSessions: logs.length\n      });\n\n    } catch (error) {\n      console.error('Error calculating stats:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get time spent in a specific period\n  const getTimeInPeriod = (period) => {\n    const logs = getAllLogs();\n    const now = new Date();\n    let startDate;\n\n    switch (period) {\n      case 'today':\n        startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n        break;\n      case 'week':\n        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        break;\n      case 'month':\n        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n        break;\n      default:\n        return 0;\n    }\n\n    return logs\n      .filter(log => new Date(log.date) >= startDate)\n      .reduce((sum, log) => sum + log.timeSpent, 0);\n  };\n\n  // Get session stats for a specific session\n  const getSessionStats = (sessionId) => {\n    const logs = getAllLogs().filter(log => log.sessionId === sessionId);\n    const totalTime = logs.reduce((sum, log) => sum + log.timeSpent, 0);\n    \n    return {\n      totalTime,\n      sessionCount: logs.length,\n      averageTime: logs.length > 0 ? Math.round(totalTime / logs.length) : 0,\n      lastActive: logs.length > 0 \n        ? new Date(Math.max(...logs.map(log => new Date(log.date))))\n        : null\n    };\n  };\n\n  // Format time for display\n  const formatTime = (minutes) => {\n    if (minutes < 60) {\n      return `${minutes}m`;\n    }\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n    return remainingMinutes > 0 ? `${hours}h ${remainingMinutes}m` : `${hours}h`;\n  };\n\n  useEffect(() => {\n    calculateStats();\n  }, [sessions]);\n\n  return {\n    stats,\n    loading,\n    calculateStats,\n    formatTime,\n    getAllLogs: () => {\n      try {\n        return JSON.parse(localStorage.getItem('pixelPages_focusLogs') || '[]');\n      } catch (error) {\n        console.error('Error getting logs:', error);\n        return [];\n      }\n    }\n  };\n};\n\nexport default useProductivityStats;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}